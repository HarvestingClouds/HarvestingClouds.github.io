<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
<channel>
<title>Harvesting Clouds</title>
<link>http://HarvestingClouds.com</link>
<description>Blog about all things regarding private and public clouds</description>
<language>en-us</language>
<item>
<title>Troubleshooting Azure Site Recovery (ASR) - Data Replication Not Working</title>
<description><![CDATA[<p>If you have the Azure Site Recovery (ASR) setup in your environment and are facing the issue where the data replication is stuck, then follow this blog to troubleshoot. The data replication can be stuck either during the initial replication or during the delta changes. This can occur for various reasons. We will inspect various components involved in ASR. Major of the troubleshooting is done on the Management Server i.e. the on-premise Configuration/Master target server.</p>
<h3>1. Check Alerts Details</h3>
<p>Go to the Azure Site Recovery Vault and navigate to the settings. Click on the <strong><em>Alerts and Events</em></strong>. Check the alerts for the data replication being blocked etc. Verify that the problem is related to data replication and not something else. </p>
<p>You can also navigate to the &quot;<strong><em>Replicated Items</em></strong>&quot; in the ASR Vault settings. On the blade for replicated items, click on the server for which the data is not being replicated. A new blade will open for this server's properties Then click on the Error Details on the server properties blade's context menu (which you can access by clicking on the top right ellipse i.e. 3 dots).</p>
<p>After verifying the issue, proceed to next sections to troubleshoot.</p>
<h3>2. Check Resource Monitor</h3>
<p>Check if you see any activity in the Resource Monitor. This is also to validate if the issue is there or not. Sometimes the <strong>Low Bandwidth</strong> and <strong>multiple servers</strong> configured against one Management server can cause this issue. Ensure that this is not the scenario in your case.</p>
<p>From the Task manager, go to performance view and check for the bandwidth consumption. Then click on the &quot;Open Resource Monitor&quot; button to launch the Resource Monitor. From the CPU section in the Overview tab, select the below two services:</p>
<ul>
<li>cxps.exe</li>
<li>cbengine.exe</li>
</ul>
<p>Then click on the Network tab and see if there is any traffic going out to Azure. If the data transfer is going on without issues then you should be able to view entries against cbengine going out to a URL which will look something like &quot;blob.aaa1aaa1aa.core.windows.net&quot; and entries against the csps service .</p>
<p><img src="/images/1479242042582b713a13d26.png" alt="Resource Monitor" /></p>
<h3>3. Check ASR Infrastructure Setup</h3>
<p>First of all, check if the ASR infrastructure setup is correct and nothing is wrong there. To view this, navigate to the ASR Vault. Go to the settings and click on the &quot;Site Recovery Infrastructure&quot;. In the next blade, click on the kind of infrastructure you have setup. E.g. If you are replicating from VMWare or Physical Machines from on-premise to Azure then click on the &quot;Configuration Servers&quot; under the &quot;For VMWare &amp; Physical Machines&quot; section.</p>
<p><img src="/images/1479235374582b572e7bd28.png" alt="Site Recovery Infrastructure" /></p>
<p>Here check if the Config Server is showing as &quot;Connected&quot;. If not then the problem is in the communication between Configuration Server and the Azure. Ensure that you are able to connect to the Azure portal from the config server. Also, ensure that all the public URLs for Azure are accessible. Check this link for exact URLs: <a href="https://docs.microsoft.com/en-us/azure/site-recovery/site-recovery-best-practices#verify-url-access">Verify URL Access</a>.</p>
<p>Next, click on the configuration server. This will open another blade with details for the configuration server. Expand the section for &quot;Associated Servers&quot; as marked no. 2 in the screenshot below. Check if all the associated servers, i.e. Process Server, vCenter Server and Master Target servers are connected and showing green tick mark.</p>
<p>Next, check the configuration server health as shown at no. 3 below. Check if all the services are running and showing healthy. Ensure that you have sufficient free space on the configuration server to send the replication data. If you see any services not running then go to the next section to check and start the services on the Management Server on-premise. </p>
<p>You can try refreshing the server after making any configuration changes on it, e.g. increasing memory or freeing up disk space. Click on the &quot;Refresh Server&quot; button as shown at no. 4, at the top of the blade for the configuration server.</p>
<p><img src="/images/1479235804582b58dc26f55.png" alt="Config Server Settings" /></p>
<h3>4. Checking Services on the Management Server</h3>
<p>Check if the services on the Management Server are up and running. You need to check for the below services:</p>
<ul>
<li>InMage PushInstall</li>
<li>InMage Scout Application Service</li>
<li>InMage Scout VX Agent - Sentinel/Outpost</li>
<li>INMAGE-AppScheduler</li>
<li>Microsoft Azure Recovery Services Agent</li>
<li>Microsoft Azure Site Recovery Service</li>
<li>cxprocessserver (This is important service. It is the service for the InMage CX Process Server)</li>
<li>tmansvc (This is the service for the InMage Volsync Thread Manager Service)</li>
</ul>
<p>Start any service which is not running and check if the problem still exists. 90% of the time the problem is going to be because of something related to these services (e.g. a restart or patch stopped one of these services).</p>
<h3>5. Checking Services on the Server being replicated</h3>
<p>Check if the services on the Server being replicated are up and running. You need to check for the below services:</p>
<ul>
<li>Azure Site Recovery VSS Provider</li>
<li>InMage Scout Application Service</li>
<li>InMage Scout VX Agent - Sentinel/Outpost</li>
</ul>
<p>Start any service which is not running and check if the problem still exists.</p>
<h3>6. Verify Service Account credentials are correct and have required access</h3>
<p>The replication can stop if the service account is not correct or it doesn't have required access. Check if the service account's password expired or changed. </p>
<p>You can use the Configuration Server config tool to check and update the service accounts. This tool can be accessed from this directory path: &quot;<em>D:\Program Files (x86)\Microsoft Azure Site Recovery\home\svsystems\bin</em>&quot; where D is your install directory for ASR setup. The tool name under this directory is &quot;<strong>cspsconfigtool.exe</strong>&quot;.</p>
<p><img src="/images/1479238579582b63b3688bd.png" alt="CSPS Config Tool" /></p>
<h3>7. Check Logs</h3>
<p>There are various ASR logs that gets generated in the Management server. Two key logs that you should check are as shown below. This assumes that D is the directory where ASR is installed.</p>
<ul>
<li><strong>Monitoring Logs</strong> - These logs are located at &quot;<em>D:\Program Files (x86)\Microsoft Azure Site Recovery\home\svsystems\var</em>&quot;. Name of the file you should check is &quot;<strong>monitor_ps</strong>&quot;.</li>
<li><strong>VM-Specific ASR Logs</strong> - These logs are located at &quot;<em>D:\Program Files (x86)\Microsoft Azure Site Recovery\home\svsystems</em>&quot;. Then there will be a folder with the name as a GUID for each VM. Navigate to the folder with the Guid and try to find the folder for your VM's GUID. One indication will be the number of disks and the disk sizes. Once you have located the folder for one of the VM having replication problems. Then navigate to internal folders and locate the perf.log file for your VM's disks. Check to see if there are any errors here.</li>
</ul>
<p>These logs should give you an idea as to what may have been causing the issues.</p>
<h3>In Conclusion</h3>
<p>After all these steps and any changes you should Refresh the Configuration Server as shown in the point 3 above. </p>
<p>Let me know if this blog helped in your scenario. </p>]]></description>
<link>http://HarvestingClouds.com/post/troubleshooting-azure-site-recovery-asr-data-replication-not-working</link>
<pubDate>Mon, 14 Nov 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>General Availability - Azure Active Directory (AD) Domain Services</title>
<description><![CDATA[<p><strong>Azure Active Directory Domain Services</strong> are here to revolutionize the way Domain Services are used. They are here to reduce even further the infrastructure management for IT Administrators. </p>
<h3>What is this service</h3>
<p>Using this service you can now setup domains without having to setup the domain controllers. You can set up your Domain in Azure using Domain Services and then you can have virtual machines joining to that domain. At no point, you need to set up any domain controllers. You can also use Group Policy with this service to securely administer your domain joined infrastructure.</p>
<p>This service benefits all customers. For <strong>enterprise customers</strong>, they get the familiar enterprise grade service. For <strong>medium to small business customers</strong>, the service makes even more sense as they get enterprise level service for a smaller price due to small infrastructure and thus a small number of objects in AD.</p>
<p>This service is out of the box a highly available service. It is hosted in globally distributed datacenters.</p>
<h3>When is this service available</h3>
<p>This service is now <strong>Generally Available</strong>. The pricing for this service will start from 1st December 2016.</p>
<p>The payment model is Pay-As-You-Go. The usage will be charged per hour. The chargeback will be based on the total number of AD Objects in your AD Tenant. These objects include users, groups, and domain-joined computers. Directory size and hours are calculated and emitted daily. Usage is prorated to the minute.</p>
<p>Currently, there are 3 tiers. </p>
<ul>
<li>Less than 25,000 directory objects</li>
<li>25,001 to 100,000 directory objects</li>
<li>more than 100,000 directory objects</li>
</ul>
<h3>Is this service available in my region</h3>
<p>At the time of writing of this blog post, this service is available in the following regions:</p>
<ul>
<li>East US</li>
<li>East US 2</li>
<li>Central US</li>
<li>South Central US</li>
<li>West US</li>
</ul>
<p>Check this link for most updated availability: <a href="https://azure.microsoft.com/en-us/regions/services/">Azure Products by Region</a></p>
<p>Also, check the official ADDS page here: <a href="https://azure.microsoft.com/en-us/services/active-directory-ds/">Azure Active Directory Domain Services</a>
And, check the upto date pricing here: <a href="https://azure.microsoft.com/en-us/pricing/details/active-directory-ds/">Pricing</a></p>
<p>Now it is time for you to go and try this new service for yourself and enjoy it's benefits!</p>]]></description>
<link>http://HarvestingClouds.com/post/general-availability-azure-active-directory-ad-domain-services</link>
<pubDate>Thu, 27 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Suspending and Resuming Azure Site Recovery (ASR) Replication on a single or multiple servers</title>
<description><![CDATA[<p>Let us assume that you have enabled the Azure Site Recovery (ASR) replication on various servers. These servers can be:</p>
<ul>
<li>On Premise VMWare VMs</li>
<li>On Premise Physical Servers</li>
<li>Azure ASM (older portal) VMs</li>
</ul>
<p>The purpose could be anything from setting up Disaster Recovery for your infrastructure or using ASR for Migrating workloads from on-premise to Azure. For any reason, you may need to suspend and resume ASR replication on one or more target servers.</p>
<p>Currently, ASR does not have the feature to allow you to suspend and resume the ASR replication. But you can do this manually as easily. </p>
<p>To <strong>Suspend</strong> the ASR replication on a particular server, all you need to do is:</p>
<ol>
<li>Log into the server on which ASR replication is currently going on and you want to suspend the replication.</li>
<li>Open the Services (Run -&gt; services.msc)</li>
<li>Locate the following services and Stop these services.
<ul>
<li>Azure Site Recovery VSS Provider</li>
<li>InMage Scout Application Service</li>
<li>InMage Scout VX Agent - Sentinel/Outpost</li>
</ul></li>
</ol>
<p>Checkout these servers below:</p>
<p><img src="/images/1477354219580ea2eb7f4e6.png" alt="Services 1" /></p>
<p><img src="/images/1477354229580ea2f52b728.png" alt="Services 2" /></p>
<p>To <strong>Resume</strong> the ASR replication, just do the opposite, i.e. Log into the server and Start these services. </p>
<p>Until Azure adds this feature directly in the portal, this easy manual step is the workaround for suspending and resuming the replication on servers.</p>]]></description>
<link>http://HarvestingClouds.com/post/suspending-and-resuming-azure-site-recovery-asr-replication-on-a-single-or-multiple-servers</link>
<pubDate>Tue, 25 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Creating ASR Template from an existing Azure Infrastructure and Modifying It</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>This blog post is for you if:</p>
<ul>
<li>You want to backup an Infrastructure configuration/setup in Azure and want to redeploy it to another environment then this blog is for you. </li>
<li>You want to create similar infrastructure as one of existing deployments in Azure</li>
<li>You want to modify the configurations of existing Azure IaaS infrastructure and redeploy various elements</li>
</ul>
<p>This <strong>Power Tip</strong> is really easy if you know just the option. </p>
<ol>
<li>If you want to make the template for all the resources in a Resource Group in Azure, then go to the properties of the Resource Group and find the option for &quot;<strong>Automation Script</strong>&quot;.</li>
<li>If you want to get the template only for a particular resource, then navigate to that resource in the Azure Portal and then open it's settings. You will find the same &quot;<strong>Automation Script</strong>&quot; option. </li>
</ol>
<p>You can check this option in the below screenshot.</p>
<p><img src="/images/1477349409580e902123ab1.png" alt="Automation Script" /></p>
<p>Once you click on the Automation Script option in the settings (of a resource group or a resource) then you will be presented with the complete JSON template along with the JSON outline on the right side (marked 2 above in the image).</p>
<p>You have various options for the actions to take on the template (marked 3 in the image above):</p>
<ul>
<li>You can download the template</li>
<li>Add to Library to deploy the same resources again and again in your subscription</li>
<li>To directly deploy the resources again with the modifications you make. </li>
</ul>
<p>Normally, you would download the template to make edits to the same. After downloading, you should start cleaning up the template. There are only 4 major tasks that you need to perform as part of the cleanup:</p>
<ol>
<li>Remove any <strong>hard-coded values</strong> for various dependent resources e.g. NIC for a VM, VHD for a VM etc.</li>
<li>Remove any resources and dependent parameters that you don't need.</li>
<li>Create <strong>Parameters</strong> for the values you want to change for each deployment and want the end user to provide during the deployment.</li>
<li>Create <strong>Variables</strong> for the values which can have fixed values but are being used at multiple locations in your template.</li>
</ol>
<p>That's all there is to it. Using this tip you can spearhead your ARM Template developments. You don't need to start from scratch and can base your templates on the existing deployments.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-creating-asr-template-from-an-existing-azure-infrastructure-and-modifying-it</link>
<pubDate>Mon, 24 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step Azure Resource Manager (ARM) Templates - Index</title>
<description><![CDATA[<p><strong>Azure Resource Manager (ARM) Template</strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources. The template can be used to deploy the resources consistently and repeatedly.</p>
<p>ARM Templates can be used for the deployment of resources on both Azure and Azure Stack. Using these templates for all deployments provides you with various <strong>benefits</strong> including:</p>
<ul>
<li><strong>Declarative Deployment</strong> – All you need to do is declare what you need to deploy. You don't need to create any complex rules or write lengthy scripts.</li>
<li><strong>Idempotency</strong> – You can deploy the same template over and over again without affecting the current resources.</li>
<li><strong>Predictability</strong> - Using Templates you can have accurate predictability when performing large deployments. You reduce any manual errors.</li>
<li><strong>Repitition without Errors</strong> - You can deploy the same infrastructure over and over again (e.g. in Dev-test environments and then in production).</li>
</ul>
<p>This series of posts try to decode and understand the ARM Templates &quot;Step By Step&quot;.</p>
<p>This post is an index of all the posts, in sequence, for understanding the Azure Resource Manager (ARM) Templates. This post will be updated regularly as more posts on this topic are added.</p>
<ol>
<li><a href="#">Index</a> </li>
<li><a href="/post/step-by-step-arm-templates-json-101-for-it-administrators/">JSON 101 for IT Administrators</a></li>
<li><a href="/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components/">What is in an ARM Template - Understanding All Components</a></li>
<li><a href="/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters/">What is in an ARM Template - Understanding Components 2 - Parameters</a></li>
<li><a href="/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables/">What is in an ARM Template - Understanding Components 3 - Variables</a></li>
<li><a href="/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources/">What is in an ARM Template - Understanding Components 4 - Resources</a></li>
<li><a href="/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs/">What is in an ARM Template - Understanding Components 5 - Outputs</a></li>
<li><a href="/post/step-by-step-arm-templates-helper-functions/">Helper Functions in ARM Templates</a></li>
<li><a href="/post/step-by-step-arm-templates-building-your-first-arm-template/">Building your first ARM Template</a></li>
<li><a href="/post/step-by-step-arm-templates-deploying-template-using-azure-portal/">Deploying Template Using Azure Portal</a></li>
<li><a href="/post/step-by-step-arm-templates-deploying-template-using-azure-powershell/">Deploying Template Using Azure PowerShell</a></li>
<li><a href="/post/step-by-step-arm-templates-creating-parameters-file-for-an-arm-template/">Creating Parameters file for an ARM Template</a></li>
<li><a href="/post/step-by-step-arm-templates-authoring-arm-templates-using-visual-studio/">Authoring ARM Templates using Visual Studio</a></li>
<li><a href="/post/step-by-step-arm-templates-deploying-arm-templates-using-visual-studio/">Deploying ARM Templates using Visual Studio</a></li>
<li><a href="/post/step-by-step-arm-templates-iterating-and-creating-multiple-instances-of-a-resource/">Iterating and creating multiple instances of a resource</a></li>
<li><a href="/post/step-by-step-arm-templates-visualizing-arm-templates-and-generating-diagrams/">Visualizing ARM Templates and Generating Diagrams</a></li>
<li><a href="/post/step-by-step-arm-templates-using-key-vault-to-securely-provide-information-in-arm-templates/">Using Key Vault to Securely Provide Information in ARM Templates</a></li>
<li><a href="/post/step-by-step-arm-templates-providing-powershell-scripts-to-run-after-vm-deployment-via-arm-template/">Providing PowerShell Scripts to Run after VM deployment via ARM Template</a></li>
<li><a href="/post/step-by-step-arm-templates-deploying-a-windows-vm-with-oms-integration/">Deploying a Windows VM with OMS integration</a></li>
<li><a href="/post/step-by-step-arm-templates-creating-asr-template-from-an-existing-azure-infrastructure-and-modifying-it/">Creating ASR Template from an existing Azure Infrastructure and Modifying It</a></li>
</ol>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-azure-resource-manager-arm-templates-index</link>
<pubDate>Fri, 21 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Providing PowerShell Scripts to Run after VM deployment via ARM Template</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>By providing PowerShell Scripts to Run after VM deployment via ARM Template, you can accomplish various activities. </p>
<ul>
<li>You can setup different features and roles on the VM. </li>
<li>You can setup web server. </li>
<li>You can setup SQL Database and configure it.</li>
<li>You can configure custom policies</li>
<li>And so on...</li>
</ul>
<p>You first need to have PowerShell script files uploaded to a storage account.
To do this you add an <strong>Extension resource</strong> (<em>Microsoft.Compute/virtualMachines/extensions</em>) nested inside a VM. This extension resource should be of type &quot;<strong>CustomScriptExtension</strong>&quot;. You provide the URLs to the PowerShell scripts inside this custom script extension.</p>
<h3>Preparation</h3>
<p>As part of the preparation process you need to:</p>
<ul>
<li>Ensure that the PowerShell scripts are uploaded to the Storage Account and that you have the complete URL to the blob. </li>
<li>Or you can upload the scripts to the GitHub and get the Raw file URL</li>
<li>If there are more than one scripts then there should be one master script amongst all ps1 files which will internally invoke other files. This master file will be triggered via the template. Information of all file URLs will also be provided via the Template</li>
</ul>
<h3>Providing and configuring Scripts to Run After VM Deployment</h3>
<p>Define the below resource to provide PowerShell scripts to be run after VM deployment:</p>
<pre><code>{
   "type": "Microsoft.Compute/virtualMachines/extensions",
   "name": "MyCustomScriptExtension",
   "apiVersion": "2015-05-01-preview",
   "location": "[parameters('location')]",
   "dependsOn": [
       "[concat('Microsoft.Compute/virtualMachines/',parameters('vmName'))]"
   ],
   "properties": {
       "publisher": "Microsoft.Compute",
       "type": "CustomScriptExtension",
       "typeHandlerVersion": "1.7",
       "autoUpgradeMinorVersion":true,
       "settings": {
           "fileUris": [
           "http://Yourstorageaccount.blob.core.windows.net/customscriptfiles/start.ps1",
           "http://Yourstorageaccount.blob.core.windows.net/customscriptfiles/secondaryScript.ps1",

       ],
       "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File start.ps1"
     }
   }
 }</code></pre>
<p><strong>How it works:</strong></p>
<ul>
<li>Both the files i.e. start.ps1 and secondaryScript.ps1 are picked up from the storage account after VM deployment. Ensure to replace the URLs with your actual storage account blob URLs. You can add more files if needed.</li>
<li>The &quot;start.ps1&quot; is the main powerShell script which should be invoking the secondaryScript.ps1 internally</li>
<li>CommandToExecutre property is used to invoke the start.ps1 powerShell script on the deployed VM</li>
</ul>
<h3>Passing Parameters to the PowerShell Script dynamically</h3>
<p>To pass the parameters to the PowerShell script use commandToExecute property. </p>
<p>One such example to pass the parameters is shown below:</p>
<pre><code>"commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File start.ps1', ' -domainName ', parameters('domainNameParameter')]"</code></pre>
<p>Note the use of &quot;concat&quot; helper function to create the value of the &quot;commandToExecute&quot;. Also note that there is starting and trailing space in the second argument of the concat i.e. &quot; -domainName &quot;.</p>
<p>The parameter &quot;domainNameParameter&quot; should already be defined in the template in the parameters section. If the value of parameter &quot;domainNameParameter&quot; is &quot;testdomain.com&quot; then the dynamically generated command will become:</p>
<pre><code>powershell.exe -ExecutionPolicy Unrestricted -File start.ps1 -domainName testdomain.com</code></pre>
<h3>Securing the Access to the PowerShell Script File in Storage account</h3>
<p>Let us assume you want to deploy Windows VM with Protected settings. Then use the below sample to provide the PowerShell files.</p>
<pre><code>{
    "publisher": "Microsoft.Compute",
    "type": "CustomScriptExtension",
    "typeHandlerVersion": "1.7",
    "settings": {
        "fileUris": [
            "http: //Yourstorageaccount.blob.core.windows.net/customscriptfiles/start.ps1"
        ]
    },
    "protectedSettings": {
        "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -start.ps1",
        "storageAccountName": "yourStorageAccountName",
        "storageAccountKey": "yourStorageAccountKey"
    }
}</code></pre>
<p>Note the use of &quot;protectedSettings&quot; above. This time you also specify the Storage Account Name and the Storage Account Key.</p>
<p>You can also refer the official documentation here: <a href="https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-extensions-customscript/">Windows VM Custom Script extensions with Azure Resource Manager templates</a>.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-providing-powershell-scripts-to-run-after-vm-deployment-via-arm-template</link>
<pubDate>Wed, 19 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Using Key Vault to Securely Provide Information in ARM Templates</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>When providing passwords and other secure and confidential information in ARM Templates, you need to ensure that you don't hard code these values anywhere. You don't need to compromise the security of the system while trying to automate deployments. Your end goal is to try to automate as much as possible and reduce manual involvement. </p>
<p><strong>Key Vaults</strong> are there to solve this problem without compromising any security. In fact, they make the whole solution more secure with least manual intervention.</p>
<h3>Setting up the Key Vault</h3>
<p>We first need to setup the Key Vault in Azure to be able to use it via ARM Template parameters.</p>
<ol>
    <li>
<b>Create a Key Vault in Azure</b> by going to <i>New -> Security + Identity -> Key Vault</i>. Provide a name, subscription, resource group etc. and provision the Key Vault. Once it is created navigate to it by clicking on "More Services" and searching for Key Vault. Click on the name of the vault you created. E.g. In this example we have named the key vault to "TestKeyVault101".

<br />
<b>Note</b> that this feature is in Preview  at the time of writing of this blog.

    </li>

    <li>
        Next, we need to <b>Add a Secret</b> in the key vault. Click on the Secrets and then the + Add button at the top, as shown below:
<br /><br />
<img alt="Adding Secret" src="/images/1476818644580676d447b16.png" />
<br /><br />
Next, in the "Create a secret" blade, set the Upload Options to Manual. Provide a name and value to the secret. Value is the password you want to securely save.
Ensure that the Enabled is set to Yes. Optionally you can set the activation and expiration dates. In this example, we are setting the Secret Name to "DefaultAdminPasswordSecret".
<br /><br />
<img alt="Creating Secret" src="/images/1476818650580676da89fee.png" />
    </li>

    <li>
        Next, we will set the <b>Access Policies </b> to provide access to the user under the context of which the template will be deployed. This is the user which will be accessing the Key Vault. Go to Key Vault settings and select Access Policies. Add the new user as shown below:
<br /><br />
<img alt="Access Policies" src="/images/14768190995806789bad0c4.png" />
<br /><br />

    </li>

    <li>
        Next, we will set the <b>Advanced Access Policies </b> to indicate that this key vault can be accessed via ARM Templates. Go to Key Vault settings and select Advanced Access Policies. Ensure that the checkbox for "<i>Enable access to Azure Resource Manager for template deployment</i>" is checked as shown below:
<br /><br />
<img alt="Access Policies" src="/images/1476819105580678a1cfc9f.png" />
<br /> <br />

    </li>

</ol>
<p>We are now all set with our Key Vault. Next, we will be using the secret we created to set the local Administrator user's password.</p>
<h3>Using the Key Vault Secret in ARM Template</h3>
<p>Let us assume that you have a JSON ARM Template which deploys a VM. One of the parameters in this template is AdminPassword. You want to use the Key Vault Secret to provide the value for this parameter. </p>
<p><strong>First</strong>, ensure that the parameter is declared as <i>securestring</i> as shown below:</p>
<pre><code>"adminPassword": {
    "type": "securestring",
    "metadata": {
        "description": "Password for local admin account."
    }
}</code></pre>
<p><strong>Next</strong>, we need to use the parameters file for this template. If you don't have one already create a new one. We can provide the reference to the Key Vault Secret as the value of admin user's password parameter in this file. General Syntax of providing reference is as shown follow:</p>
<pre><code>"adminPassword": {
  "reference": {
    "keyVault": {
      "id": "Key Vault Id Here"
    },
    "secretName": "Name of the secret in Azure Key Vault"
  }
}</code></pre>
<p>Now the ID in the above Syntax can be provided as:</p>
<p><em>/subscriptions/{guid}/resourceGroups/{group-name}/providers/Microsoft.KeyVault/vaults/{vault-name}</em>. </p>
<p>Note to replace the <em>{guid}</em> with actual GUID for the subscription (without the curly braces), replace <em>{group-name}</em> with the actual name of the resource group and <em>{vault-name}</em> with the actual name of the Key Vault.</p>
<p>You can also find the Resource ID for the Key Vault by navigating to it in the Azure Portal and then checking it's properties as shown below:</p>
<p><img src="/images/147682308858068830f2f8e.png" alt="Key Vault Resource ID" /></p>
<p>The complete parameter file looks like below:</p>
<pre><code>{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "OtherParameter": {
      "value": "otherValue"
    },
    "adminPassword": {
      "reference": {
        "keyVault": {
          "id": "/subscriptions/11111aaa-1a11-1a11-a1aa-1a1111a111a1/resourceGroups/TestRG101/providers/Microsoft.KeyVault/vaults/TestKeyVault101"
        },
        "secretName": "DefaultAdminPasswordSecret"
      }
    }
  }
}</code></pre>
<p>Next, deploy the template using PowerShell and pass this parameters file as explained here: <a href="/post/step-by-step-arm-templates-deploying-template-using-azure-powershell/">Deploying Template Using Azure PowerShell</a>. </p>
<p>Example PowerShell cmdlet to deploy will look like:</p>
<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile .\TemplateFile.json -TemplateParameterFile .\ParametersFile.json</code></pre>
<p>Now that you know how to use values from Key Vaults, you can make the automated deployment of resources more secure in your environment.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-using-key-vault-to-securely-provide-information-in-arm-templates</link>
<pubDate>Tue, 18 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Visualizing ARM Templates and Generating Diagrams</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>When developing ARM Templates, from time to time you will need to:</p>
<ul>
<li>Visualize your ARM Templates</li>
<li>Generate Diagrams for your ARM Templates</li>
</ul>
<p>Microsoft has provided an Open Source tool for this named &quot;ARMVIZ&quot; (short for ARM Visualizer). This tool can be accessed by navigating to the below URL:</p>
<p><a href="http://armviz.io/"><a href="http://armviz.io/">http://armviz.io/</a></a></p>
<h3>Navigating ARMVIZ</h3>
<p>ARMVIZ is a nice in-browser application to visualize all the components in a template. It also shows the dependencies between various components. Using this web application you can:</p>
<ul>
<li>Either visualize your own developed template,</li>
<li>Or inspect existing templates on GitHub</li>
</ul>
<p>Let's take a quick tour of the interface:</p>
<p><img src="/images/14768067785806487ad77dd.png" alt="ARMVIZ Interface" /></p>
<p>I have numbered various elements of the interface in the above diagram. Let's quickly review these elements:</p>
<ol>

    <li>
              <b>Designer</b> - This is represented by an "eye" icon on the left bar. This should be selected by default. If you are in the editor mode then you can click this and the diagram will be shown in the middle portion of the screen.
    </li>

    <li>
              <b>Editor</b> - This is represented by "</>" text for code on the left bar. Clicking on this will take you to the editor portion of the ARMVIZ tool. In this area, you can edit your template while still in the tool. You can add or remove components. You can even edit the components or add dependencies.
    </li>

     <li>
              <b>Canvas area</b> - This is the main screen (the middle area) where the template is displayed.
    </li>

    <li>
              <b>File Menu</b> - This is the main and simple menu in the whole web application in the top bar. It has two options:
              <ol type="a">
                       <li>
                             <b>Open Local Template</b> - You can open an ARM Template JSON from your local computer to visualize using this menu option.
                       </li>
                       <li>
                             <b>Download Template</b> - You can download the current template by using this menu option.
                       </li>
              </ol>
    </li>

    <li>
              <b>Quickstart ARM Templates</b> - This is the link to external library of Quickstart ARM Templates on GitHub. These starter templates can help you save a lot of time. Instead of starting from scratch you can use these templates to fasten the ARM Templates Development.
    </li>

</ol>
<p>This is how the Editor portion of the tool looks like. Use this area to edit or update your template.
<strong>Note:</strong> If there will be mistakes, such as missing parenthesis in your template, the designer will not show any diagram. </p>
<p><img src="/images/147680732358064a9ba1310.png" alt="Editor Area" /></p>
<p>You can zoom into and zoom out of your template diagram by rolling the mouse wheel. You can also drag and reposition various elements.
Take a screenshot once you have repositioned the elements as per your requirements and have zoomed into an appropriate level.</p>
<p>Below screenshot is taken from a much more complex template.</p>
<p><img src="/images/1476806791580648877fed3.png" alt="Complex ARM Template Diagram" /></p>
<p>In conclusion, ARMVIZ can enable you to easily visualize your ARM Templates. It can empower you to generate diagrams for your documentation and to present to your team.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-visualizing-arm-templates-and-generating-diagrams</link>
<pubDate>Mon, 17 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Deploying a Windows VM with OMS integration</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>You can deploy a Windows VM with OMS integration. You can have the OMS extension installed. And then you can onboard the VM to a specified workspace. </p>
<h3>Prerequisites</h3>
<p>You need already have an OMS workspace setup in your subscription. You need to have the following information about this OMS Workspace:</p>
<ol>
<li>OMS workspace ID</li>
<li>OMS workspace Key</li>
</ol>
<p>You may obtain the workspace ID and key by going to the Connected Sources tab in the Settings page in the OMS Portal or to the Direct Agent blade in the Azure portal.</p>
<p>In the Azure Portal go to the Log Analytics -&gt; Click on the OMS Workspace you want to use. Click on the &quot;OMS Portal&quot; to navigate to the OMS Portal.</p>
<p><img src="/images/14768464545806e3762d97c.png" alt="Link to OMS Portal" /></p>
<p>In the OMS portal, navigate to the Settings.</p>
<p><img src="/images/14768422705806d31e60125.png" alt="OMS Portal Settings" /></p>
<p>In Settings, go to the Connected Sources -&gt; Windows Servers. Note the Workspace ID and the Primary Key as shown below:</p>
<p><img src="/images/14768422755806d323b2caa.png" alt="OMS Portal ID and Key" /></p>
<h3>ARM Template Sections for OMS integration</h3>
<p>Within the VM resource, you need to define the OMS extension as shown below:</p>
<pre><code>  "resources": [
    {
      "type": "extensions",
      "name": "Microsoft.EnterpriseCloud.Monitoring",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "Your Workspace ID Here"
        },
        "protectedSettings": {
          "workspaceKey": "Your Workspace Key Here"
        }
      }
    }
  ]</code></pre>
<p>The above configures the OMS on the VM. Note that you need the nested extension resource of type &quot;Microsoft.EnterpriseCloud.Monitoring&quot;. </p>
<p>Also, note the Workspace Id and Key in the template section above. Enter the values as per your environment which we found in the Prerequisites section above. </p>
<h3>Providing the Workspace ID and Workspace Key Dynamically</h3>
<p>You can also provide the Workspace Id and the Workspace Key dynamically by only using the OMS Workspace name. Follow the below sample. Note the use of reference, listKeys, and resourceId helper functions.</p>
<pre><code>"settings": {
          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName')), '2015-03-20').customerId]"
        },
        "protectedSettings": {
          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName')), '2015-03-20').primarySharedKey]"
        }</code></pre>
<p><strong>Reference:</strong> You can check the complete quick starter template for OMS integration here: <a href="https://github.com/Azure/azure-quickstart-templates/tree/master/201-oms-extension-windows-vm">GitHub Sample - Deployment of a Windows VM with OMS Extension</a></p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-deploying-a-windows-vm-with-oms-integration</link>
<pubDate>Sun, 16 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Azure Automation Preview Solution - Start/Stop VMs during off-hours </title>
<description><![CDATA[<p>Starting and Stopping VMs during off-hours can mean lots of cost optimizations for you. We have been implementing this via custom Runbooks and schedules for various customers. Now there is out of the box support for this within Azure. The feature is currently in Preview but you can build on this.</p>
<h3>What do I need - Prerequisites</h3>
<p>Before beginning check that your region has this feature available. Just like with any other automation solution, you will need to have:</p>
<ol>
<li>OMS Workspace (or you can create new while adding the solution)</li>
<li>Automation Account (or you can create new)</li>
<li>Azure Run As account (and not the Microsoft Account)</li>
<li>For email support, Office 365 business-class subscription is required</li>
</ol>
<p>Note: The VMs that you want to manage should be in the same subscription and resource group as where the Automation account resides.</p>
<h3>How to Add</h3>
<p>To Add the solution, click on &quot;+ New&quot; symbol and search for &quot;Start/Stop VMs during off-hours&quot;. You will find the below solution available to be created:</p>
<p><img src="/images/1476808753580650317ab68.png" alt="Start and Stop VMs Preview Solution" /></p>
<h3>What does it Contain</h3>
<p>The solution is a combination of various automation assets:</p>
<ol>
<li>Runbooks</li>
<li>Variables</li>
<li>Schedules</li>
<li>Credentials</li>
</ol>
<p>You can change some configurations during and some after the deployment. </p>
<p>Find out more here: <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-solution-vm-management/">Start/Stop VMs during off-hours [Preview]</a></p>]]></description>
<link>http://HarvestingClouds.com/post/azure-automation-preview-solution-start-stop-vms-during-off-hours</link>
<pubDate>Tue, 11 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Azure RemoteApp is going away. New Purchases in portal are now stopped </title>
<description><![CDATA[<p>Today I got an email saying &quot;Action recommended: Deleting unnecessary RemoteApp collections can save you money&quot;. This email is also a reminder from Microsoft that the RemoteApp is going away. We need to plan for the migration for the existing RemoteApps to other platforms.</p>
<h3>What this means</h3>
<p>This means various things to you. Most prominently:</p>
<ul>
<li>Over the next year, the support for Remote App is going away</li>
<li>You need to plan and migrate the existing RemoteApp application to other platforms</li>
<li>New Purchases in the Azure portal for RemoteApp are no longer available</li>
</ul>
<h3>When is the service coming to Stop</h3>
<p>The service will have support through <strong>August 31st, 2017</strong>. That's when this service will come to a stop. New service purchase was stopped effective October 1st, 2016.</p>
<h3>What are my Options</h3>
<p>You have various options for migration. The option being <strong>recommended</strong> by Microsoft is using &quot;<strong>Citrix XenApp express</strong>&quot;. In fact, Microsoft is partnering up with Citrix on this. This service is not yet available and is currently under development. As this will be the native option in Azure this will be your best bet once it is announced. You can learn more about this solution here on Citrix site: <a href="https://www.citrix.com/global-partners/microsoft/remote-app.html">Citrix and Microsoft</a></p>
<p>The second option is to use Remote Desktop Services (RDS) deployed on Azure IaaS. This means to set up the infrastructure yourself and then deploy and host the RDS solution on that infrastructure in Azure. You can know more about the steps here: <a href="https://technet.microsoft.com/en-us/windows-server-docs/compute/remote-desktop-services/host-desktops-and-apps-in-remote-desktop-services">Host desktops and apps in Remote Desktop Services on Azure</a></p>
<p>Another option is to use  hosted solutions from various 3rd party vendors. You can find such solution from various partners from the Azure marketplace. You can also read and get to know the complete list of these hosting partners here: <a href="https://technet.microsoft.com/en-us/windows-server-docs/compute/remote-desktop-services/rds-hosting-partners">RDS - Partners for hosting desktops and apps</a></p>
<p><strong>In conclusion,</strong> I will recommend to wait and look out for Citrix XenApp express solution. If you need new remote application solutions then you need to either deploy your own solution or use one of the hosted solutions by 3rd party vendors. You can read more about the official announcement here: <a href="https://blogs.technet.microsoft.com/enterprisemobility/2016/08/12/application-remoting-and-the-cloud/?WT.mc_id=azurebg_email_Trans_1218_No_Usage_Azure_RemoteApp">Application Remoting and the Cloud</a></p>]]></description>
<link>http://HarvestingClouds.com/post/azure-remoteapp-is-going-away-new-purchases-in-portal-are-now-stopped</link>
<pubDate>Mon, 10 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Script Sample - Generate Azure Resources Report by Tags</title>
<description><![CDATA[<p>When managing resources in Azure, Tags are there to help you. They add very valuable metadata to the Azure resources.
In nutshell, tags are Key-Value pairs. E.g. &quot;Business Unit = Finance&quot;, &quot;Site = Central US&quot; are two such tags.</p>
<p>These <strong>tags help you to</strong>:</p>
<ul>
<li>Organize your resources and manage the same</li>
<li>Get insights into Chargeback categorically</li>
</ul>
<p>Tags go beyond the boundaries of deployments. You can have few resources deployed in one resource group and few other resources into the second resource group. If for these resources in both the resource groups you apply the same tag (i.e. same Key and value combination) then you can view and manage these resources in a single click.</p>
<p>Now once in a while, you want to take a health check of your Azure environment. You want to see what all resources are there and what are the tags applied to these resources. You want to extract this data to a CSV file so that you can apply filters and perform other business intellegence (BI) operations on it. The script below provides exactly that. </p>
<p>The <strong>script gives you</strong> a CSV output report with:</p>
<ul>
<li>All the resources in your Azure Subscription</li>
<li>Type of each resource, so that you can filter on various types</li>
<li>Tags for each of the resource in Azure</li>
</ul>
<p><strong>The Columns</strong> in the Output CSV file (generated by the script) are:</p>
<ol>
<li>Semi-colon separated list of tags</li>
<li>Resource Name</li>
<li>Resource Group Name</li>
<li>Location</li>
<li>Resource Type</li>
<li>Resource Id</li>
<li>Name</li>
<li>Subscription Id</li>
</ol>
<p>You can find this script on GitHub here: <a href="https://github.com/HarvestingClouds/PowerShellSamples/blob/a4eb910aa8eb2cdd340c2866cde150282b47067e/Scripts/Azure%20Resources%20Report%20by%20Tags.ps1">Azure Resources Report by Tags</a></p>
<p><a href="https://raw.githubusercontent.com/HarvestingClouds/PowerShellSamples/a4eb910aa8eb2cdd340c2866cde150282b47067e/Scripts/Azure%20Resources%20Report%20by%20Tags.ps1">Direct Link to the Script here. Right click and choose Save As</a></p>
<p>You are welcome to make changes and submit Pull Requests to this script or even fork and make your modifications. </p>]]></description>
<link>http://HarvestingClouds.com/post/script-sample-generate-azure-resources-report-by-tags</link>
<pubDate>Mon, 03 Oct 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Iterating and creating multiple instances of a resource</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>In Azure Resource Manager (ARM) templates, you can define the variable once and then iterate/loop over that definition and create multiple instances of that resource.
There are 3 special constructs in ARM templates to help you with this. </p>
<p>These <strong>constructs</strong> are:</p>
<ul>
<li><strong>copy</strong> - This is a property that is defined within the resource. This is the construct which when defined indicates that this resource needs to be looped over and created multiple times. It also specifies the number of times to iterate via &quot;count&quot; property.</li>
<li><strong>copyIndex()</strong> - Used to access the current iteration value. Its value for the first iteration is <strong>zero</strong>. For the second iteration, its value is 1 and so on... You can pass it an integer (number) as a parameter. Whatever number you pass that will become the value for the first iteration and subsequent iterations. E.g. copyIndex(20) will compute to 20 in the first iteration, 21 in the second iteration and so on.</li>
<li><strong>length</strong> - This is the method of arrays. It computes the number of elements in an array. It can be used to set the &quot;count&quot; property of &quot;copy&quot; construct.</li>
</ul>
<p><strong>Note:</strong> Arrays are always <strong>zero indexed</strong>. What that means is that the first element of the array is indexed at 0, the second element of the array is indexed at 1, and so on...</p>
<h3>1. Simple Example</h3>
<p>Let us understand these constructs using an example.</p>
<pre><code>"parameters": { 
  "count": { 
    "type": "int", 
    "defaultValue": 3 
  } 
}, 
"resources": [ 
  { 
      "name": "[concat('HarvestingClouds-', copyIndex(100))]", 
      "type": "Microsoft.Web/sites", 
      "location": "Central US", 
      "apiVersion": "2015-08-01",
      "copy": { 
         "name": "websitescopy", 
         "count": "[parameters('count')]" 
      }, 
      "properties": {
          "serverFarmId": "hostingPlanName"
      }
  } 
]</code></pre>
<p>The above example will <strong>result</strong> in creation of below 3 web apps in Azure:</p>
<ul>
<li>HarvestingClouds-100</li>
<li>HarvestingClouds-101</li>
<li>HarvestingClouds-102</li>
</ul>
<p>Note the usage of &quot;copy&quot; property in the above code example:</p>
<pre><code> "copy": { 
             "name": "websitescopy", 
             "count": "[parameters('count')]" 
          }</code></pre>
<p>As you can notice above, the value of this property is another JSON object. This object has further two properties: </p>
<ul>
<li>First is the name property, which provides the name to the looping construct. This can be any meaningful name. </li>
<li>The second property is the count, which specifies how many times this resource definition should be deployed. Note that the value is set to the parameter named &quot;count&quot;. The name of the parameter can be anything but the value of the parameter has to be a number (i.e. an integer).</li>
</ul>
<p>Next, note how the name of the web application is constructed using the copyIndex() helper function.</p>
<pre><code>"name": "[concat('HarvestingClouds-', copyIndex(100))]"</code></pre>
<p>The above value uses two helper functions. First is the &quot;concat()&quot; which is concatenating (i.e. joining) two values. First value is the prefix string &quot;HarvestingClouds-&quot;. Second parameter and the second helper function is <code>copyIndex(100)</code>. This specifies the current iteration value, which is offset with 100. So for the first iteration, the value will be 0+100 = 100, for the second iteration the value will be 1+100 = 101 and so on...</p>
<h3>2. Example with an Array</h3>
<p>Let's assume that you want to deploy multiple web apps for different purposes. You need one web app for Production, one for Staging or testing and one for Development. You want to name the web apps deployed with the purpose concatenated.
The below example uses an array to set the values for the web app name:</p>
<pre><code>"parameters": { 
  "purpose": { 
     "type": "array", 
         "defaultValue": [ 
         "Production", 
         "Staging", 
         "Development" 
      ] 
  }
}, 
"resources": [ 
  { 
      "name": "[concat('HarvestingClouds-', parameters('purpose')[copyIndex()])]", 
      "type": "Microsoft.Web/sites", 
      "location": "Central US", 
      "apiVersion": "2015-08-01",
      "copy": { 
         "name": "websitescopy", 
         "count": "[length(parameters('purpose'))]" 
      }, 
      "properties": {
          "serverFarmId": "hostingPlanName"
      } 
  } 
]</code></pre>
<p>The <strong>output</strong> of the above sample will be 3 web apps deployed in Azure with following names:</p>
<ul>
<li>HarvestingClouds-Production</li>
<li>HarvestingClouds-Staging</li>
<li>HarvestingClouds-Development</li>
</ul>
<p>Note in the above code sample that the parameter &quot;purpose&quot; is an array with 3 values i.e. Production, Staging, and Development. Then in the &quot;copy&quot; construct the count property is set using the length of this array as shown below. As there are 3 elements in the array, the value of count will be 3 and the resource will be deployed 3 times.</p>
<pre><code>"count": "[length(parameters('purpose'))]" </code></pre>
<p>Next, the name of the web app is set using the copyIndex() and the array itself as shown below:</p>
<pre><code>"name": "[concat('HarvestingClouds-', parameters('purpose')[copyIndex()])]"</code></pre>
<p>As earlier, it uses concat helper function to add two strings. The first string is simple text i.e. &quot;HarvestingClouds-&quot;, which becomes the prefix for the web app name. Second is finding out the value of the array based on the current iteration. For the first iteration, copyIndex() will compute to zero, therefore the second parameter becomes <code>parameters('purpose')[0]</code>. This will fetch the 0th element of the array which is Production. Similarly, for the second iteration, copyIndex() will compute to 1, therefore the second parameter becomes <code>parameters('purpose')[1]</code>. This will fetch the second element of the array (or element at index value 1) which is Staging, and so on...</p>
<h3>3. Depending upon resources being deployed by the copy Loop</h3>
<p>Let's assume you want to deploy a storage account. But you want to deploy it only after all the web apps are deployed by the loop. In this scenario, the dependsOn property of a resource is set to the name of the &quot;copy&quot; property of the resource, rather than the resource itself.</p>
<pre><code>    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "teststorage101",
        "location": "[resourceGroup().location]",
        "properties": {
            "accountType": "Standard_LRS"
         }
       "dependsOn": ["websitescopy"]
    }</code></pre>
<p>Note above that the dependsOn property is set to the name property of the copy in the earlier web app example. This storage account will not be deployed until all 3 web apps are not deployed.</p>
<h3>4. Limitations</h3>
<p>There are two limitations on the use of the copy to iterate and create multiple resource instances:</p>
<ol>
<li><strong>Nested Resources</strong> - You cannot use a copy loop for a nested resource. If you need to create multiple instances of a resource that you typically define as nested within another resource, you must instead create the resource as a top-level resource and define the relationship with the parent resource through the <strong>type</strong> and <strong>name</strong> properties.</li>
<li><strong>Looping Properties of a Resource</strong> - You can only use copy on resource types, not on properties within a resource type. E.g. Creating multiple data disks within a VM.</li>
</ol>
<p>That is all there is to iterate and creating multiple resources from a single definition. When your templates will start becoming complex then these constructs/helper functions will help you a lot. E.g. you may need to deploy multiple load balanced resources, then you can use the concepts defined in this post.</p>
<p>You can also refer the official documentation here: <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-create-multiple/">copy, copyIndex, and length</a></p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-iterating-and-creating-multiple-instances-of-a-resource</link>
<pubDate>Tue, 27 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Deploying ARM Templates using Visual Studio</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>In the last blog we saw <a href="/post/step-by-step-arm-templates-authoring-arm-templates-using-visual-studio/">How to use Visual Studio to author ARM templates</a>. In this blog we will see how to use Visual Studio (VS) to deploy the template without leaving VS.</p>
<p>Deploying with Visual Studio is very simple, straightforward and very intuitive. Just follow the below steps.</p>
<ol>

    <li>
Either go to the Solution Explorer -> Right Click on the project and select "Deploy -> New Deployment" as shown below:<br />
<img src="/images/147578624957f6b6090d5eb.png" alt="New Deployment - Solution Explorer" /><br />

Or you can go to the menu option Project -> Deploy -> New Deployment as shown below:<br />
<img src="/images/147578624157f6b601b647b.png" alt="New Deployment - Project Menu" />

<br />
Once you click on the "New Deployment", you will be presented with the below Dialog for the deployment.<br />
<img src="/images/147578742957f6baa5bfb1c.png" alt="New Deployment Dialog" /><br />

If you are not logged in then it will ask you to log into your Azure account. <br />

    </li>

    <li>
In the Dialog for "Deploy to Resource Group" select the Subscription by clicking on the first drop down.<br />
    </li>

    <li>
Next click on the drop down for the Resource Group. You can either select an existing Resource Group or you can click on "<Create New...>" option to create a new resource group for the current deployment.
<br />
<img src="/images/147578768757f6bba7dd5ec.png" alt="Resource Group creation" />
<br />
If you click on "<Create New...>" option to create a new Resource Group then you will be presented with an additional popup.
<br />
<img src="/images/147578794457f6bca893e66.png" alt="Resource Group creation additional Popup" /><br />
In this additional popup, type the name for your new resoruce group and the location in Azure where this should be created. Click "Create" once done in the additional popup. <br /><br />
    </li>

    <li>
Next, we are going to provide the value for the parameters. Go ahead and click on the "Edit Parameters..." link in the "Deploy to Resource Group" dialog. This will open another popup to provide the parameters. <br />
Button to edit parameters is shown below:<br />
<img src="/images/147578820657f6bdae623f9.png" alt="Edit Parameters" /> <br />

Additional dialog to provide parameters is shown below: <br />
<img src="/images/147578821157f6bdb3ec989.png" alt="Providing Parameters" /> <br />

Note the following points in the parameters:
<ol type="a">
<li>Corresponding to the string parameters, a text box is provided.</li>
<li>For the secure string parameters like password, a secure password text box is provided.</li>
<li>Corresponding to the parameters for which you have defined the "Allowed Values" in your template, a combo box (or drop Down) is provided with the "default Value" selected by default.</li>
</ol>
 Click Ok once done
   </li>

    <li>
Next, click on the Deploy button to deploy the template to Azure.
    </li>

    <li>
You can check the results in the <b>Outputs</b> window in the Visual Studio. Along with time stamp, it will show you what steps Visual Studio took to perform the deployment. It uses the values of parameters you provided and uses the PowerShell script to deploy the resources. You will notice the PowerShell window opening and prompt for the Admin Password. 
<br />
<b>Note 1: </b>The PowerShell window may not come above as active window. Just search and click on the window in your Taskbar. <br />
Provide the password and hit Enter as shown below:
<img src="/images/147578930357f6c1f7c0b65.png" alt="PowerShell window" /> <br />
<br />
<b>Note 2: </b>It may take some time to complete the deployment after that. Wait and do not close the PowerShell window. It should automatically close once done.
<br />
<b>Note 3: </b>Once the deployment completes the last line in Output window in Visual Studio will be: "Successfully deployed template..." as shown below:
<br />
<img src="/images/147578931057f6c1fecaa6a.png" alt="Success - Output Window" /> <br />

    </li>

</ol>
<p>This is it! Navigate to the Azure portal and validate the deployed resources in your selected resource group.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-deploying-arm-templates-using-visual-studio</link>
<pubDate>Tue, 20 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Authoring ARM Templates using Visual Studio</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p><strong>Visual Studio</strong> is a very powerful tool when it comes to authoring ARM Templates. </p>
<p><strong>Key features</strong> which make it a tool of our choice are:</p>
<ul>
<li>In-house support for ARM Templates</li>
<li>Smart IntelliSense</li>
<li>Pre-populated templates for various Azure resources</li>
<li>JSON Outlining</li>
<li>Easy Deployment options</li>
</ul>
<p>The screenshots in this blog post are from Visual Studio 2013. You can use other newer versions as well.</p>
<h3>Pre-Requisites</h3>
<p>You need to have Azure SDK installed to get true power of Visual Studio with Azure integration. If you don't have it already, you can install the same from here: <a href="https://azure.microsoft.com/en-us/downloads/">Azure SDK Downloads</a></p>
<h3>Authoring First ARM Template in Visual Studio</h3>
<p>Authoring with Visual Studio is very easy. </p>
<ol type="1">
<li>To get started just launch the Visual Studio from the Start menu.</li>
<li>Next, Create a new Project of type "Azure Resource Group" by navigating to Templates -> Visual C# -> Cloud <br /><br />

<img src="/images/147576108957f653c1768fc.png" alt="New Project" />
<br />

</li>

<li>
    Next, you will be presented with a dialog to "Select Azure Template". If you want to author from scratch then choose a Blank Template. Else select one of the starter template. For this blog, we will be using "Windows Virtual Machine" Template.<br /><br />
    <img src="/images/147576828457f66fdc0f0e6.png" alt="Selecting Azure Template" />
    <br />
</li>

<li>
    Project is created with various folders and files. You can explore the project in the solution explorer in Visual Studio.<br /><br />
    <img src="/images/147576986357f6760758619.png" alt="Solution Explorer" />
    <br />

Let us see what these folders and files are:
        <ol type="a">
            <li><b>Scripts</b>: The single PS1 file is to create a new Resource Group and deploy the ARM Template. It uses "New-AzureRmResourceGroupDeployment" PowerShell cmdlet to deploy the template. </li>
            <li><b>Templates</b>: "<i>WindowsVirtualMachine.json</i>" is the main ARM Template file that we are interested in. Also, "<i>WindowsVirtualMachine.parameters.json</i>" is the parameters file for the ARM template.</li>
            <li><b>Tools</b>: This folder contains the "AzCopy.exe" file to help you copy any artifacts to Azure.</li>
        </ol>
</li>

<li>
    Double click and open the "<i>WindowsVirtualMachine.json</i>" file to open it. You will be presented with a huge JSON file. Collapse the section by clicking the small "-" signs to the left of the file. Also notice the <b>JSON Outline</b> panel to the left. This is your biggest friend in Visual Studio when authoring ARM Templates.<br /><br />
    <img src="/images/147577487757f6899d297b5.png" alt="" />
    <br />
You can immediately notice that key sections both in the template in the middle and in the JSON Oultine panel on the left (in the image above) are:
               <ol type="a">
                   <li>parameters</li>
                   <li>variables</li>
                   <li>resources</li>
               </ol>
You can click on any of the elements in the left JSON Outline panel and the same section will be highlighted in the center, in the JSON template file.
    <br />

</li>

<li>
    Next, let us look at JSON Outline panel and check how it can provide us more information and help us in authoring templates.<br /><br />
    <img src="/images/147578115457f6a2226c2be.png" alt="JSON Outline Panel" />
    <br />
    You can see that the panel provides a special icon for each type of the resource. In our current template the various resources listed are:
    <ol type="a">
        <li>StorageAccount</li>
        <li>PublicIPAddress</li>
        <li>VirtualNetwork</li>
        <li>NetworkInterface</li>
        <li>VirtualMachine</li>
    </ol>

Click on each of the resources and inspect how their JSON structure looks and differs. You will immediately notice that the major difference in each of these resources is in their <b>Type</b> and <b>Properties</b>.

<h3>Adding New Resource</h3> 
Let's assume you want to add a new resource to this template. You have 2 ways to achieve the same:
    <ol>
    <li><b>Method 1</b> - Create a new resource by modifying and adding the JSON for the new resource in the template.</li>
    <li><b>Method 2</b> - Let Visual Studio add the resource for you. Right click anywhere in the resources area of the JSON Outline Panel or the small "+" box at the top left of the panel (as shown in the image above) and VS will give you a new popup to add the resource from pre-defined resources as shown below.</li>
    </ol>
    <img src="/images/147578170157f6a4457bae0.png" alt="Add Resource" />
<br />
Once you click Add the JSON for resource will be added to the template and the corresponding new element will appear in the JSON Outline Panel.
<br />

<h3>Deleting a Resource</h3> <br />
If you need to delete a resource, simply right click on that resource in the JSON outline panel on the left and then select "Delete Resource".
<br />

<h3>Using Intellisense</h3>     
The last thing to notice is the use of <b>Intellisense</b> in Visual Studio which helps you as you are editing the templates.<br /><br />
    <img src="/images/147578465457f6afce4debb.png" alt="Intellisense" />
    <br />
     When you type quotes the closing quotes are automatically provided. Also, as you can see in the above image the various valid values, that can come there are also shown along with small tooltip about the data type. If the Intellisense doesn't come up automatically, then press Ctrl + Space to get Intellisense.
</li>

</ol>
<p>In the end, the Visual Studio makes authoring ARM templates much more manageable and easy for you.</p>
<p>In the next blog, we will see how to use Visual Studio to Deploy the templates.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-authoring-arm-templates-using-visual-studio</link>
<pubDate>Sat, 17 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Creating Parameters file for an ARM Template</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>You can pass the input values for the Parameters in your ARM template using an additional JSON file. This additional file is what we will be referring to as <strong>Parameters File</strong>.</p>
<p>The only restriction on a parameters file is that the size of the parameter file cannot be more than 64 KB.</p>
<p>Parameters file follows a similar structure to the ARM Template. They are very simple as compared to the ARM template. In all they have 3 sections as explained below:</p>
<ol>
<li><strong>$schema</strong> - Required Object - Location of the JSON schema file that describes the version of the template language.</li>
<li><strong>contentVersion</strong> - Required Object - Version of the template (such as 1.2.0.20). When deploying resources using the template, this value can be used to make sure that the right template is being used.</li>
<li><strong>parameters</strong> - Required Object - This is a JSON object which contains various objects as it's members. Each object within the &quot;parameters&quot; object represent a value for a parameter corresponding to your ARM template.</li>
</ol>
<p>Let's check how the parameters file will look like for the ARM template we have built earlier for deploying Storage Account and a Virtual Network.</p>
<pre><code>{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vhdStorageName": {
            "value": "harvestingstorage101"
        },
        "virtualNetworkName": {
            "value": "testvNet101"
        }
    }
}</code></pre>
<p>Note that the only 2 parameter values are provided. These correspond to the parameters in the ARM template. </p>
<p><strong>Note:</strong> The parameter names should match to the parameters defined in the ARM template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-creating-parameters-file-for-an-arm-template</link>
<pubDate>Wed, 14 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Deploying Template Using Azure PowerShell</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>In the previous blog you learned <a href="/post/step-by-step-arm-templates-building-your-first-arm-template/">How to build your first ARM Template</a> . Now that you have a fully functional ARM template we want to deploy this template to Azure.</p>
<p>There are various options to deploy a template to Azure. We already saw in the last blog <a href="/post/step-by-step-arm-templates-deploying-template-using-azure-portal/">How to deploy template using <strong>Azure Portal</strong></a>. Now we will look at <strong>Azure PowerShell</strong> as more programmatic and automated way to deploy the template.</p>
<h2>Pre-requisites</h2>
<p>Things you should know before deployment</p>
<ol>
<li><strong>Azure PowerShell</strong> - This should be installed on the machine from where the Steps will be followed. If you don't have this then use this link to get it: <a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/">Get Azure PowerShell</a></li>
<li><strong>Azure Subscription</strong> - where you want to deploy your template</li>
<li><strong>Resource Group</strong> - This is the resource group in Azure where you will be deploying your template. You can create a new resource group (for the resources that will be deployed by the template) or use an existing one.</li>
<li><strong>Parameters</strong> - Value of the input parameters to the template should be known to you for the deployment. Follow all your naming conventions when defining the parameters for deployments of resources in Azure. </li>
<li><strong>Internet Connectivity</strong> - This should be present on the machine from where the Steps will be followed for connectivity to Azure</li>
</ol>
<h2>Steps for Deployment</h2>
<ul>
<li>First, launch a PowerShell window as an Administrator</li>
<li>Then, log into the Azure account. </li>
</ul>
<p>Run the below cmdlet to log into Azure:</p>
<pre><code>Add-AzureRmAccount</code></pre>
<ul>
<li>Select appropriate Azure Subscription</li>
</ul>
<p>You have two choices here. You can either use below cmdlet to use Subscription ID</p>
<pre><code>Set-AzureRmContext -SubscriptionID &lt;YourSubscriptionId&gt;</code></pre>
<p>Or you can use the Subscription name with the below cmdlet:</p>
<pre><code>Select-AzureRmSubscription -SubscriptionName "&lt;Your Subscription Name&gt;"</code></pre>
<ul>
<li>Next, if you already have a resource group to which you want to deploy the template then skip this step. Else create a new resource group. A resource in Azure ARM architecture can only exist in a resource group. </li>
</ul>
<p>Use below cmdlet to create a new Resource Group:</p>
<pre><code>New-AzureRmResourceGroup -Name TestResourceGroup01 -Location "Central US"</code></pre>
<ul>
<li>Before deploying the Resource Template to Azure, you should Test it. This step is optional but highly recommended.</li>
</ul>
<p>Use the below cmdlet to test and validate your template:</p>
<pre><code>Test-AzureRmResourceGroupDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToJsonTemplate&gt;</code></pre>
<ul>
<li>Now comes the last step i.e. to deploy the template. You have two options when deploying the template. You can either deploy a template without any parameters (if none are required) or you need to specify the parameters. Let's check both these options next.</li>
</ul>
<h3>Deploying Template which doesn't need Parameters</h3>
<p>You can deploy such template using <code>New-AzureRmResourceGroupDeployment</code> cmdlet.
If the template file is on a local directory then use the below cmdlet:</p>
<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt;</code></pre>
<p>If the template file is uploaded to some hosted location and is accessible via a link, then use the below cmdlet to deploy the template:</p>
<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateUri &lt;LinkToTemplate&gt;</code></pre>
<h3>Deploying Template with Parameters</h3>
<p>Deploying of the template is exactly similar as the previous section. You use the same cmdlet. To specify the parameter, you have 4 options. Use the below cmdlets for the option you want to use.</p>
<p><strong>Option 1</strong> - Using Inline Parameter</p>
<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt; -myParameterName "parameterValue" -secondParameterName "secondParameterValue"</code></pre>
<p><strong>Option 2</strong> - Using Parameter Object</p>
<pre><code>$parameters = @{"&lt;ParameterName&gt;"="&lt;Parameter Value&gt;"}
New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt; -TemplateParameterObject $parameters</code></pre>
<p><strong>Option 3</strong> - Using Parameter file which is in local environment</p>
<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt; -TemplateParameterFile &lt;PathToParameterFile&gt;</code></pre>
<p><strong>Option 4</strong> - Using Parameter file which is located externally and can be referenced via Link</p>
<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateUri &lt;LinkToTemplate&gt; -TemplateParameterUri &lt;LinkToParameterFile&gt;</code></pre>
<h3>Key Gotchas</h3>
<ol>
<li>If you provide values for a parameter in both the local parameter file and inline, the inline value takes precedence.</li>
<li>You cannot use inline parameters with an external parameter file. All inline parameters are ignored when you specify &quot;TemplateParameterUri&quot; parameter.</li>
<li>As a best practice, do not store sensitive infomation in the parameters file e.g. Local admin password. Instead either provide these dynamically using inline parameters. Or store them using the Azure Key vault and then reference the key vault in your parameters file.</li>
</ol>
<p>You can find more details about these cmdlets here: <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/#deploy-with-powershell">Deploy resources with Resource Manager templates and Azure PowerShell</a></p>
<p>In the next blog, we will see how to create a Parameters File for providing parameters dynamically to the template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-deploying-template-using-azure-powershell</link>
<pubDate>Sun, 11 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Deploying Template Using Azure Portal</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>In the last blog you learned <a href="/post/step-by-step-arm-templates-building-your-first-arm-template/">How to build your first ARM Template</a> . Now that you have a fully functional ARM template we want to deploy this template to Azure.</p>
<p>There are various options to deploy a template to Azure. Using Azure portal is by far the easiest and most intuitive option for the deployment. Follow the steps in this blog to deploy your template to Azure.</p>
<h2>Pre-requisites</h2>
<p>Things you should know before deployment</p>
<ol>
<li><strong>Azure Subscription</strong> - where you want to deploy your template</li>
<li><strong>Resource Group</strong> - This is the resource group in Azure where you will be deploying your template. You can create a new resource group (for the resources that will be deployed by the template) or use an existing one.</li>
<li><strong>Parameters</strong> - Value of the input parameters to the template should be known to you for the deployment. Follow all your naming conventions when defining the parameters for deployments of resources in Azure.</li>
</ol>
<h2>Steps for Deployment</h2>
<ol>
<li>First, log into the Azure Portal.</li>
<li>
<p>Next, go to &quot;New&quot; and type &quot;Template deployment&quot; in the search box and hit enter.</p>
<p><img src="/images/147559616157f3cf81381da.png" alt="New Deployment" /></p>
</li>
<li>
<p>Next, click on the <strong>Template Deployment</strong> and then click on &quot;Create&quot;</p>
<p><img src="/images/147559654057f3d0fc1bf5c.png" alt="Create Deployment" /></p>
</li>
<li>
<p>Now click on the &quot;<strong>Template (Edit Template)</strong>&quot;. It will open a panel to paste your template. Delete whatever is auto populated in the template area. Copy your whole json template and paste it here. Note that the left section in the new panel will update to show you what parameters, variables, and resources you have in the template. Click on &quot;Save&quot; once done.</p>
<p><img src="/images/147559697957f3d2b32ff67.png" alt="Editing Template" /></p>
</li>
<li>
<p>Next, click on the &quot;<strong>Parameters (Edit Parameters)</strong>&quot; on the left side. The parameters will be automatically picked from the template. The parameters for which the default value is provided will be automatically populated. Rest you will have to provide the inputs. Click Ok once done.</p>
<p><img src="/images/147559719657f3d38c652e3.png" alt="Providing Parameters" /></p>
</li>
<li>
<p>Next, you have the option to select the <strong>Resource Group</strong>. You can either create a new resource group (for all the resources that will be deployed via the template) or you can use and existing resource group.</p>
<p><img src="/images/147559727457f3d3da45879.png" alt="Resource Group Selection" /></p>
</li>
<li>
<p>The last option is to click on the &quot;<strong>Legal Terms</strong>&quot; and read through the terms. If you agree then click on the &quot;Purchase&quot; button. </p>
<p><img src="/images/147559762057f3d534eae90.png" alt="Legal Terms" /></p>
</li>
<li>Finally, click on the <strong>Create</strong> to submit the deployment. </li>
</ol>
<p>You can monitor the job performing the deployments and progress of the same. After some time the deployment will finish successfully and you can view the resources in the resource group you selected.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-deploying-template-using-azure-portal</link>
<pubDate>Thu, 08 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Building your first ARM Template</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>In this blog post, we will use the knowledge learned in previous blogs and will build a basic ARM template.
If you haven't checked previous blog posts then have a quick read of your preferred topics here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>To follow this blog, you can use any text editor which can provide JSON syntax highlighting. We will be looking at using Visual Studio to author ARM templates in a future blog post. Visual Studio can provide JSON outlining and is a very powerful tool for authoring ARM templates.</p>
<p>Let us assume that you want to deploy a storage account and build a virtual network in Azure. You want to automate the process and need to repeat the process in various environments. ARM templates fit the bill for the solution of this problem.</p>
<p>In the next few sections, we will build each section of the template and then at the end will check the complete template.</p>
<h3>1. Template Header</h3>
<p>This section is very basic and contains just the schema and the content version. You can use the content version to manage the development versions of the template as you make changes to your templates in the future.</p>
<pre><code>"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",</code></pre>
<h3>2. Parameters</h3>
<p>Here we define all the inputs we need from the end users. We provide default values for those parameters for which we know what the most common values will be based on our environment. For the current template we define two parameters:</p>
<ul>
<li><strong>vhdStorageName</strong> - This is the name of the storage account in Azure which will be created by the deployment of this template.</li>
<li><strong>virtualNetworkName</strong> - This is the name of the Virtual Network which will be created by the deployment of this template.</li>
</ul>
<p>As a best practice, provide the metadata, describing what each parameter is for. Also, note that we have used pascal casing to name the parameters with very descriptive names.</p>
<pre><code>"parameters": {
    "vhdStorageName": {
        "type": "string",
        "minLength": 1,
        "defaultValue": "mystorage101",
        "metadata": {
            "description": "Name of the Storage Account."
        }
    },
    "virtualNetworkName": {
        "type": "string",
        "metadata": {
            "description": "Name of the virtual network."
        }
    }
},</code></pre>
<h3>3. Variables</h3>
<p>Next, we add some variables for the values which will be reused later in the template in the resources section. We create variables for all those reusable values for which we know what their value at deployment will be. We define 4 variables in this template:</p>
<ul>
<li><strong>addressPrefix</strong> - Address prefix for the Virtual Network </li>
<li><strong>subnetName</strong> - Subnet name which will be created under the virtual network</li>
<li><strong>subnetPrefix</strong> - Subnet prefix for the subnet, which will be created under the virtual network</li>
<li><strong>vhdStorageType</strong> - Type of the storage account. Here we used Standard locally redundant storage (LRS)</li>
</ul>
<p>Variables section look as below:</p>
<pre><code>"variables": {
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "vhdStorageType": "Standard_LRS"
},</code></pre>
<h3>4. Resources</h3>
<p>Now comes the last and main section i.e. Resources. Here we define both the resources for our template:</p>
<ul>
<li>Storage Account</li>
<li>Virtual Network</li>
</ul>
<p>Let us look at each of these resources one by one.</p>
<p><strong>A. Storage Account Resource</strong></p>
<p>This resource has below properties (or key-value pairs):</p>
<ol>
<li><strong>Type</strong> - Type of the resource is set to Microsoft.Storage/storageAccounts. This is what tells the Azure that the current resource is a Storage Account</li>
<li><strong>Name</strong> - This defines the name of the storage account to be deployed based on the parameter to the template</li>
<li><strong>API Version</strong> - this is the standard version for the REST API in Azure</li>
<li><strong>Location</strong> - This is the Azure location. The location is found dynamically based on the location of the resource group to which this template will be deployed.</li>
<li><strong>tags</strong> - only one tag is defined for the display name. You should have more tags in case of a production ready template</li>
<li><strong>properties</strong> - This is where you tell Azure what kind of storage account you need. Here the account type is set using the value of the variable vhdStorageType.</li>
</ol>
<p><strong>B. Virtual Network Resource</strong></p>
<p>This resource has below properties (or key-value pairs):</p>
<ol>
<li><strong>Type</strong> - Type of the resource is set to Microsoft.Network/virtualNetworks. This is what tells the Azure that the current resource is a Virtual Network</li>
<li><strong>Name</strong> - This defines the name of the virtual network to be deployed based on the parameter to the template</li>
<li><strong>API Version</strong> - this is the standard version for the REST API in Azure</li>
<li><strong>Location</strong> - This is the Azure location. The location is found dynamically based on the location of the resource group to which this template will be deployed.</li>
<li><strong>tags</strong> - only one tag is defined for the display name. You should have more tags in case of a production ready template</li>
<li><strong>properties</strong> - This is where you define the address space for the virtual network. You also define the subnet under the virtual network here.</li>
</ol>
<p>The resources section look like below:</p>
<pre><code>"resources": [
    {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[parameters('vhdStorageName')]",
        "apiVersion": "2015-06-15",
        "location": "[resourceGroup().location]",
        "tags": {
            "displayName": "StorageAccount"
        },
        "properties": {
            "accountType": "[variables('vhdStorageType')]"
        }
    },
    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[parameters('virtualNetworkName')]",
        "location": "[resourceGroup().location]",
        "tags": {
            "displayName": "VirtualNetwork"
        },
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[variables('addressPrefix')]"
                ]
            },
            "subnets": [
                {
                    "name": "[variables('subnetName')]",
                    "properties": {
                        "addressPrefix": "[variables('subnetPrefix')]"
                    }
                }
            ]
        }
    }
]</code></pre>
<h3>Complete Template</h3>
<p>Here is the complete template build from all the sections discussed above. You can copy and use this template for testing and working along with next deployment posts.</p>
<pre><code>{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vhdStorageName": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "mystorage101",
            "metadata": {
                "description": "Name of the Storage Account."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the virtual network."
            }
        }
    },
    "variables": {
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "vhdStorageType": "Standard_LRS"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('vhdStorageName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('vhdStorageType')]"
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        }
    ]
}</code></pre>
<p>In the next blog, we will learn how to deploy this template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-building-your-first-arm-template</link>
<pubDate>Sun, 04 Sep 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - Helper Functions</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>ARM Templates has various dynamic constructs called <strong>Helper Functions</strong> which can make your template more generic. These constructs reduce the hard coded values in your templates. You can use the information from this blog to make your existing templates more dynamic and start writing new templates with a much generic approach.</p>
<p>Let's look at the most important helper functions and their practical usage one by one. </p>
<h3>1. Resource Id - Resource Function</h3>
<p>You use this function to determine the ID of a resource. This is only used when the resource (whose ID is needed) is not being deployed in the current template and it already exists in Azure.</p>
<p>The generic syntax to use this is:</p>
<pre><code>resourceId ([subscriptionId], [resourceGroupName], resourceType, resourceName1, [resourceName2]...)</code></pre>
<p>Only required parameters of this helper function are resourceType and resourceName1.</p>
<p>These parameters are as follows:</p>
<ul>
<li>subscription ID - This is only needed if you want to refer a different subscription. Default value is the current subscription</li>
<li>resource Group Name - Name of the resource group where the resource exists. Default is the current resource group, in which you are deploying the template</li>
<li>resource Type - Type of resource including resource provider namespace</li>
<li>resource Name 1  - Name of the resource</li>
<li>resource Name 2  - Next resource name segment if resource is nested. E.g. a VM Extension</li>
</ul>
<p><strong>Example</strong></p>
<pre><code>"vnetId1": "[resourceId('AE06-Mgmt-RG','Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
"vnetId2": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"</code></pre>
<p>The above example shows two ways of using the resource ID helper function to determine the Id of a virtual network. First one uses the resource group, resource type and resource name. Second example uses only the resource Type and resource name. Second example assumes the resource group to be same as the template being deployed to.</p>
<h3>2. Resource Group - Resource Function</h3>
<p>This helper function returns an object that represents the current resource group to which the template is being deployed.</p>
<p>The generic syntax to use this is:</p>
<pre><code>resourceGroup()</code></pre>
<p>No parameters are needed in this helper function.</p>
<p><strong>Example</strong></p>
<pre><code>"vhdStorageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
 "storageAccountResourceGroup": "[resourcegroup().name]",
 "location": "[resourceGroup().location]"</code></pre>
<p>The above example shows 3 uses of the resource group helper functions. First one uses the ID of the resource group, second uses the name property and third uses the location for the current resource group.</p>
<h3>3. Subscription - Resource Function</h3>
<p>The generic syntax to use this is:</p>
<pre><code>subscription()</code></pre>
<p>No parameters are needed in this helper function.</p>
<p><strong>Example</strong></p>
<pre><code>"subscriptionId": "[subscription().subscriptionId]"</code></pre>
<p>The above example is straightforward. It fetches the subscription Id of the current subscription.</p>
<h3>4. Concat - String Function</h3>
<p>This function is used to concatinate (i.e. combine) two or more values.</p>
<p>The generic syntax to use this is:</p>
<pre><code>concat (array1, array2, array3, ...)</code></pre>
<p>At least 1 array is needed for concat to work. </p>
<p><strong>Example</strong></p>
<pre><code>"subnetRef": "[concat(variables('vNetId'), '/subnets/', variables('subnetName'))]"</code></pre>
<p>The above example combines (or concatinates) 3 text values. First value is the value of variable vNetId. Second value is a string &quot;/subnets/&quot;. Third value is the value of the variable subnet Name.</p>
<p>These are the most common Helper functions that you will use in 80%-90% of the templates. </p>
<p>To check the complete list of Helper Functions, check this official link: <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-functions/#resource-functions">Azure Resource Manager template functions</a></p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-helper-functions</link>
<pubDate>Wed, 31 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - What is in an ARM Template - Understanding Components 5 - Outputs</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.</p>
<ol>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components/">Understanding all components</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters/">Parameters</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables/">Variables</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources/">Resources</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs/">Outputs - This blog post</a></li>
</ol>
<h2>Outputs</h2>
<p>This section is used to output any values after the deployment of the ARM Template. This can output any Ids or connection strings based on the deployed resources. </p>
<p>This is a single JSON object with various output objects (just like Parameters. The overall JSON structure looks like below:</p>
<pre><code>"outputs": { 
    "output1" : {
                     "type":"string",
                     "value": "value1"
      },
    "output2" : {
                     "type":"string",
                     "value": "value2"
      },
}</code></pre>
<p>Each output object has 2 properties:</p>
<ol>
<li>Type - Data type of the output</li>
<li>Value - value of the output</li>
</ol>
<p>A real life example with look like below:</p>
<pre><code>"outputs": {
    "adminUsername": {
        "type": "string",
        "value": "[parameters('adminUsername')]"
    }
}</code></pre>
<p>The above example will output the administrator Username using the parameter from the template.</p>
<p>That's all there is to Outputs in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs</link>
<pubDate>Tue, 30 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - What is in an ARM Template - Understanding Components 4 - Resources</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.</p>
<ol>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components/">Understanding all components</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters/">Parameters</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables/">Variables</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources/">Resources  - This blog post</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs/">Outputs</a></li>
</ol>
<h2>Resources</h2>
<p>This is the major section of the whole ARM template. This is where you define what resources should be deployed in Azure. You also define dependencies between resources in this section. </p>
<p>The resources section consist of an array of JSON Objects as shown below:</p>
<pre><code>"resources": [
        { },
        { },
]</code></pre>
<p>Each object in the array (represented via curly braces) is an Azure resource. You can deploy multiple resources in a single ARM template. E.g. You can deploy a new Storage Account, new Virtual Network and three Virtual Machines in that virtual network within a single template.
Within the object, various properties (and nested properties) are used to provide the configurations of each resource. </p>
<h3>Elements</h3>
<p>Different elements in a single resource object can be one of the following:</p>
<ol>
<li><strong>apiVersion</strong> - <strong><em>Required</em></strong> - Version of the API. e.g. &quot;2015-06-15&quot;</li>
<li><strong>type</strong> - <strong><em>Required</em></strong> - Type of the resource. This value is a combination of the namespace of the resource provider and the resource type that the resource provider supports. e.g. Azure Storage Account will have type as &quot;Microsoft.Storage/storageAccounts&quot;.</li>
<li><strong>name</strong> - <strong><em>Required</em></strong> - Name of the resource. The name must follow URI component restrictions and also the Azure naming restrictions if any. E.g. Storage account name can only be in small letters and has to be unique.</li>
<li><strong>location</strong> - Optional - Use supported geo-locations of the provided resource without any spaces. Or use the resource group's location dynamically.</li>
<li><strong>tags</strong> - Optional - Tags that are associated with the resource.</li>
<li><strong>dependsOn</strong> - Optional - Other resources in the same template, that the current resource being defined depends on. The dependencies between resources are evaluated and resources are deployed in their dependent order. When resources are not dependent on each other, they are attempted to be deployed in parallel. The value can be a comma-separated list of resource names or resource unique identifiers.</li>
<li><strong>properties</strong> - Optional - Resource specific configuration settings. E.g. Account type property for a storage account name.</li>
<li><strong>resources</strong> - Optional - Child resources that depend on the resource being defined. E.g. Extension resources for a Virtual Machine resource.</li>
</ol>
<h3>Examples</h3>
<p>Let's look at two examples. First, we will take a simple resource example to deploy a storage account in Azure:</p>
<pre><code>{
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('vhdStorageName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount",
                "department" : "Finance",
                "application" : "database"
            },
            "properties": {
                "accountType": "[variables('vhdStorageType')]"
            }
        }</code></pre>
<p>Above example will deploy a storage account with the name from &quot;vhdStorageName&quot; variable. It will apply 3 tags to the resource after deployment. It will use the account type (i.e. standard or premium) based on the value of the &quot;vhdStorageType&quot; variable. If you want to deploy 2 or more similar storage accounts, then just copy and paste the json for the resource, separated by comma. It will become another object in the Resources array.</p>
<p>Now let's look at a complex and larger example of deploying a single virtual machine with one extension for Diagnostics.</p>
<pre><code>    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[variables('vmName')]",
        "location": "[resourceGroup().location]",
        "tags": {
            "displayName": "VirtualMachine"
        },
        "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', variables('vhdStorageName'))]",
            "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
        ],
        "properties": {
            "hardwareProfile": {
                "vmSize": "[variables('vmSize')]"
            },
            "osProfile": {
                "computerName": "[variables('vmName')]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]"
            },
            "storageProfile": {
                "imageReference": {
                    "publisher": "[variables('imagePublisher')]",
                    "offer": "[variables('imageOffer')]",
                    "sku": "[parameters('windowsOSVersion')]",
                    "version": "latest"
                },
                "osDisk": {
                    "name": "osdisk",
                    "vhd": {
                        "uri": "[concat('http://', variables('vhdStorageName'), '.blob.core.windows.net/', variables('vhdStorageContainerName'), '/', variables('OSDiskName'), '.vhd')]"
                    },
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                }
            },
            "networkProfile": {
                "networkInterfaces": [
                    {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                ]
            },
            "diagnosticsProfile": {
                "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[concat('http://', variables('diagnosticsStorageAccountName'), '.blob.core.windows.net')]"
                }
            }
        },
        "resources": [
            {
                "type": "extensions",
                "name": "Microsoft.Insights.VMDiagnosticsSettings",
                "apiVersion": "2015-06-15",
                "location": "[resourceGroup().location]",
                "tags": {
                    "displayName": "AzureDiagnostics"
                },
                "dependsOn": [
                    "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
                ],
                "properties": {
                    "publisher": "Microsoft.Azure.Diagnostics",
                    "type": "IaaSDiagnostics",
                    "typeHandlerVersion": "1.5",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                        "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), variables('wadcfgxend')))]",
                        "storageAccount": "[variables('diagnosticsStorageAccountName')]"
                    },
                    "protectedSettings": {
                        "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                        "storageAccountKey": "[listkeys(variables('accountid'), '2015-06-15').key1]",
                        "storageAccountEndPoint": "https://core.windows.net"
                    }
                }
            }
        ]
    }</code></pre>
<p>Note that the above code snippet defines a single virtual machine. Let us decode various sections of this complex resource:</p>
<ul>
<li>It begins with simple properties like apiVersion, type, name, location and tags as discussed in the previous example. These are straightforward and thus values are provided to these attributes.</li>
<li>Next is the <strong>dependsOn</strong> section. This defines the dependency between resources. In the above example, the virtual machine resource is dependent on the storage account and a network interface, which are also defined in the template. These 2 resources will be created before the virtual machine creation/deployment. If these resources are not created in the template then it will check for the presence of these resources in the current subscription. If they are not present the template will not get deployed and will error out.</li>
<li>Next are various <strong>properties</strong> to configure the Virtual machine, like hardware profile, os profile, storage profile, os disk, network profile, diagnostics profile etc.</li>
<li>Next, we have additional <strong>sub-resources</strong>. These are Azure resources which will be created and linked to the current resource. Only one sub-resource is created in the above example which is an extension for VM diagnostics settings.</li>
</ul>
<p>That's all there is to Resources in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources</link>
<pubDate>Mon, 29 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - What is in an ARM Template - Understanding Components 3 - Variables</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.</p>
<ol>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components/">Understanding all components</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters/">Parameters</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables/">Variables - This blog post</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources/">Resources</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs/">Outputs</a></li>
</ol>
<h2>Variables</h2>
<p>Variables are values that you either know beforehand or you can construct from the input parameters. These variables can then be reused at multiple locations in the resources section. If you later want to change the value of a variable then it automatically gets updated at all other locations. They can be used to define a resource property.</p>
<h3>Defining Variables</h3>
<p>Variable is a one huge JSON object. Each property can be one of the simple data type (like integer, bool, string etc.) or can be another complex JSON object. The general structure is as shown below:</p>
<pre><code>"variables": {
      "variable 1" : "value 1",
      "variable 2" : "value 2",
      "variable 3" : 1024,
      "variable 4" : {}
}</code></pre>
<p>Note that in the above example, the first 3 variables are of simple value type. The 4rth variable is however of a complex JSON object type.</p>
<p>Let's now check a real variables section from an actual ARM template:</p>
<pre><code>"variables": {
        "vmSize": "Standard_A2",
        "virtualNetworkName": "MyVNETName",
        "vnetId1": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "vnetId2": "[resourceId(parameters('vNetRG'),'Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",
        "vhdStorageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageAccountResourceGroup": "[resourcegroup().name]",
        "location": "[resourceGroup().location]",
        "subscriptionId": "[subscription().subscriptionId]"
    }</code></pre>
<p>There are lots of key constructs in the above code snippet. I have tried to capture as many different constructs in this snippets as I could. Let us decode each variable one by one.</p>
<ol>
<li>vmSize - Simple String</li>
<li>virtualNetworkName - Simple string name</li>
<li>vnetId1 - This uses a special function named &quot;<strong>resourceId</strong>&quot; to find out the resource ID of the virtual network. This function is invoked by using the syntax <code>"[resourceId(Input)]"</code> .  This gets the resource ID of a resource which is defined by the Input to this. Also, note the use of another variable as an input to this.</li>
<li>vnetId2 - This also fetches the resource Id of a virtual network using &quot;resourceId&quot; method. Note the use of the value of a parameter in this to find out Resource Group of the existing Virtual network (parameter &quot;vNetRG&quot;).</li>
<li>subnetRef - This variable uses another function &quot;<strong>concat</strong>&quot; in ARM template i.e. <code>"[concat(input1,input2,...)]"</code>. This function can take many inputs and will concatinate (i.e. club together) the value of all the inputs provided. You can use parameters or another variable.</li>
<li>vhdStorageName - This also uses concat function to dynamically generate a storage name. However it uses &quot;<strong>resourcegroup</strong>&quot; function as <code>"[resourcegroup()]"</code>. This function always returns the resource group to which you are deploying the current ARM template. Then the variable uses the id property of the resource group returned.</li>
<li>storageAccountResourceGroup - This uses the &quot;name&quot; property of the current resource group</li>
<li>location - This uses the &quot;location&quot; property of the current resource group.</li>
<li>subscriptionId - This uses the &quot;<strong>subscription</strong>&quot; function as <code>"[subscription()]"</code> to find out the current subscription to which the current ARM template is being deployed.  Then it uses the subscription Id property of the subscription to get the required Id.</li>
</ol>
<p>Note that these constructs are very powerfull and can be used to dynamically construct your ARM template. These constructs are also known as Helper Functions and are explained in detail here: <a href="../step-by-step-arm-templates-helper-functions/">Step by Step ARM Templates - Helper Functions</a></p>
<h3>Using Variables</h3>
<p>Using variables is very easy and is similar to using parameters. In fact, you already saw the usage of variables above, while defining other variables.</p>
<p>You use the square parenthesis to indicate to the ARM engine to evaluate whatever is inside the parenthesis. You use the &quot;variable&quot; keyword and then you pass the name of the variable as input. Check the example below.</p>
<pre><code>"storageAccountName": "[variables('storageAccountName')]"</code></pre>
<h3>Best Practices</h3>
<p>Best practices are similar to the Parameters.</p>
<ul>
<li>Provide complete descriptive names, no matter how long.</li>
<li>Use <strong>Pascal Casing</strong> to name your parameters. i.e. First letter should be a small letter. Then every new word will have the first letter as a capital. No space between words. E.g. storageAccountName</li>
<li>Use the constructs explained in the previous section to dynamically generate variables. This reduces any human errors.</li>
<li>Anything that is used more than once and is not required to be entered by an end user, should be created as a variable. Later on, this helps by minimizing the number of places you need to change the value.</li>
</ul>
<p>That's all there is to Variables in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables</link>
<pubDate>Fri, 26 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - What is in an ARM Template - Understanding Components 2 - Parameters</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.</p>
<ol>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components/">Understanding all components</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters/">Parameters - This blog post</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables/">Variables</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources/">Resources</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs/">Outputs</a></li>
</ol>
<h2>Parameters</h2>
<p>As mentioned earlier, parameters are the way to customize the templates, each time you deploy it to create resources in Azure. These parameters are the end-user inputs for various aspects of the template. E.g. If you are deploying an Azure Virtual Machine via an ARM Template then the name of the VM can be an input parameter. Operating System type can be another parameter.</p>
<p>The parameters can be referred and used in other parts of the ARM Template.</p>
<h3>1. Defining Parameters</h3>
<p>Parameters is a one huge JSON object with multiple JSON properties. Each property is one parameter which is represented as another JSON object. Let us look at its structure at a high level.</p>
<pre><code>"parameters": {
               "parameter 1" : {},
               "parameter 2" : {},
               "parameter 3" : {}
}</code></pre>
<p>E.g. If you are creating a template to deploy a Windows Virtual Machine then the parameters will look something like below:</p>
<pre><code>"parameters": {
               "VMName" : {},
               "AdminUserName" : {},
               "AdminPassword" : {},
               "WindowsOSVersion" : {}
}</code></pre>
<p>Now let us look at one of the parameters. E.g. The AdminUserName parameter will look like:</p>
<pre><code>"adminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        }</code></pre>
<p>The parameter object, as shown above, has following parts:</p>
<ol>
<li><strong>Type</strong> - This is the data Type of the parameter.</li>
<li><strong>minLength</strong> - This is the minimum length the parameter must have</li>
<li><strong>Metadata</strong> - This is just to provide a description as to what the parameter means.</li>
</ol>
<p>The <strong>Data Type</strong> allowed for the parameter are:</p>
<ul>
<li>string or secureString – any valid JSON string</li>
<li>int – any valid JSON integer</li>
<li>bool – any valid JSON boolean </li>
<li>object – any valid JSON object </li>
<li>array – any valid JSON array</li>
</ul>
<p>A more complex parameter e.g. Windows OS Version, with few more properties, is shown below:</p>
<pre><code>"windowsOSVersion": {
            "type": "string",
            "defaultValue": "2012-R2-Datacenter",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
            }
        }</code></pre>
<p>It has additional below properties:</p>
<ol>
<li><strong>Default Value</strong> - This is the default value. End User will be able to change this value when deploying the template. If no value is provided then this value is picked.</li>
<li><strong>Allowed Values</strong> - This is an Array of values which are allowed for the parameter. Only value from this set is allowed as an input.</li>
</ol>
<h3>2. Using Parameters</h3>
<p>Using parameters is easy. Wherever in your template (in variables or resources section) you want to use the value of a parameter, just use the parameter function as shown below with the name of the parameter as input, enclosed in square brackets. </p>
<pre><code>[parameters('windowsOSVersion')]</code></pre>
<p>If the parameter value is assigned to a property, enclosing it in double quotes, as shown below:</p>
<pre><code>"sku": "[parameters('windowsOSVersion')]"</code></pre>
<h3>3. Best Practices</h3>
<ul>
<li>Try to always provide Default Values</li>
<li>Provide metadata so that you can provide insight as to what the parameter is meant for</li>
<li>Provide complete descriptive names, no matter how long.</li>
<li>Use <strong>Pascal Casing</strong> to name your parameters. i.e. First letter should be a small letter. Then every new word will have the first letter as a capital. No space between words. E.g. windowsOSVersion</li>
<li>Use properties like minLength and Allowed values to impose restrictions. This reduces any human errors.</li>
</ul>
<p>That's all there is to Parameters in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters</link>
<pubDate>Wed, 24 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - What is in an ARM Template - Understanding All Components</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>As we discussed <a href="../step-by-step-azure-resource-manager-arm-templates-index/">earlier in the introduction</a> <strong>Azure Resource Manager (ARM) Template</strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources.</p>
<p>In this post, we will deconstruct any basic ARM template and will understand it's various components.</p>
<p>Any ARM Template will look like below:</p>
<pre><code>{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {},
    "resources": [ {}, {} ]
}</code></pre>
<p>Snapshot of the Template at root level, as generated via Visual Studio:</p>
<p><img src="http://HarvestingClouds.com/images/147520488857edd71873f9b.png" alt="ARM Template Components" /></p>
<p>As you can see the components (or properties) of any ARM template includes:</p>
<ol>
<li>Schema</li>
<li>Content Version</li>
<li>Parameters</li>
<li>Variables</li>
<li>Resources</li>
</ol>
<p>Let's look at these in more detail.</p>
<table border="1" cellpadding="4" cellspacing="4">
        <colgroup>
            <col>
            <col>
            <col>
            <col>
        </colgroup>
        <tbody valign="top">
            <tr>
                <th>Element name</th>
                <th>Required</th>
                <th>JSON Type</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>$schema</td>
                <td>Yes</td>
                <td>String Value</td>
                <td>Location of the JSON schema file that describes the version of the template language.</td>
            </tr>
            <tr>
                <td>contentVersion</td>
                <td>Yes</td>
                <td>String Value</td>
                <td>Version of the template (such as 1.2.0.20). When deploying resources using the template, this value can be used to make sure that the right template is being used.</td>
            </tr>
            <tr>
                <td>parameters</td>
                <td>No</td>
                <td>JSON Object</td>
                <td>Values that are provided by the end user (manually or via a parameters file) when deployment is executed to customize resource deployment.</td>
            </tr>
            <tr>
                <td>variables</td>
                <td>No</td>
                <td>JSON Object</td>
                <td>Values that are reused multiple times in the template. You can update these values. They are different from Parameters as their value is known and they are not required as inputs from the end user.</td>
            </tr>
            <tr>
                <td>resources</td>
                <td>Yes</td>
                <td>Array of Objects</td>
                <td>Types of services that are deployed or updated in a resource group. Each JSON object in this Array denotes an Azure Resource.</td>
            </tr>
            <tr>
                <td>outputs</td>
                <td>No</td>
                <td>JSON Object</td>
                <td>Values that are returned after deployment.</td>
            </tr>
        </tbody>
</table>
<p>Now that you know what each part is at a high level, in the next posts, we will look at the key 4 components in detail.</p>
<ol>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters/">Parameters</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables/">Variables</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources/">Resources</a></li>
<li><a href="../step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs/">Outputs</a></li>
</ol>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components</link>
<pubDate>Mon, 22 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Step by Step ARM Templates - JSON 101 for IT Administrators</title>
<description><![CDATA[<p><strong>Index</strong> of all blogs in this <strong>Step by Step ARM Templates series</strong> is located here: <a href="/post/step-by-step-azure-resource-manager-arm-templates-index/">Step by Step Azure Resource Manager (ARM) Templates - Index</a></p>
<p>Azure Resource Manager (ARM) templates are written in JSON or <strong>JavaScript Object Notation</strong>. To understand ARM templates, you need to understand few quick basics about JSON. These will enable you to lay a great foundation which will enable you to understand ARM templates very easily.</p>
<p>JSON or JavaScript Object Notation (pronounce like &quot;Jay-son&quot;) is a text-based data format that's designed to be human-readable, lightweight, and easy to transmit between a server and a web client. Its syntax is derived from JavaScript. Think of this as an even more compact version of XML files.</p>
<p>JSON is a popular notation for transmitting data through RESTful web services. The official internet media type for JSON is <code>application/json</code>, and JSON files typically have a <code>.json</code> extension.</p>
<p>To understand JSON we need to understand <strong>3 main components</strong>. These components are like building blocks, using which you can build very complex JSON files.</p>
<h2>1. Objects</h2>
<p>Objects are the heart of JSON. Object denotes a real life object, e.g. an Employee. Just like a real life object, these have various properties and a value for each of these properties. E.g. An Employee will have Name property with value as John. Further, an employee object can have various another properties like Age, Salary, Department etc. So to denote an object in JSON you:</p>
<ul>
<li>One object will be represented by curly brackets. It will begin from opening curly bracket i.e. <code>{</code> and will end at closing curly bracket i.e. <code>}</code></li>
<li>Denote the property and corresponding values as <code>"key" : "value"</code> or <code>"property" : "value"</code> pairs.</li>
<li>You can only use double quotes for Properties as they will always be of type string</li>
<li>You will have double quotes around Values if they are of string type. You will not have any quotes in case of a number or a boolean value.</li>
<li>Each property will be separated from next property by a comma</li>
</ul>
<p><strong>Note:</strong> Each JSON file is also a single JSON object. At root level it starts with an opening curly bracket i.e. <code>{</code> and will end with closing curly bracket i.e. <code>}</code>. There can't be any other objects at the root level. Think of this similar to how in an XML file there can be only one element at the root level. </p>
<p>Example Employee object is shown below:</p>
<pre><code>{
    "Name" : "John",
    "Age" : 34,
    "Department" : "Finance",
    "Salary" : "100000",
    "IsAdmin" : true
}</code></pre>
<h2>2. Arrays</h2>
<p>Simply put, arrays are a collection of items. In JSON the <strong>square brackets</strong> represents an Array. E.g. An array of 3 employees will look like below:</p>
<pre><code>[
  {
        "Name" : "John",
        "Age" : 34
    },
   {
        "Name" : "Mary",
        "Age" : 32
    },
   {
        "Name" : "Matthew",
        "Age" : 29
    }
]</code></pre>
<h2>3. Nesting of Objects</h2>
<p>Now things get more interesting with nesting of Objects. What Nesting means is that one object can have it's property as another complex object. Don't worry if that sounds confusing. Let's understand that statement using an example. An Address where a person lives can be represented by an object. This object will look like below:</p>
<pre><code>{
  "StreetNumber" : "50",
  "StreetName" : "Brian Harrison Way",
  "Unit Number" : 22,
  "City" : "Toronto",
  "Country" : "Canada"
}</code></pre>
<p>Now an Employee Object will have an Address object as one of it's property (because employee need to live somewhere). This new complex Employee object will look like below, with nested Address object as one of it's property:</p>
<pre><code> {
        "Name" : "John",
        "Age" : 34,
        "Department" : "Finance",
        "Salary" : "100000",
        "IsAdmin" : true,
        "Address" :   {
                          "StreetNumber" : "50",
                          "StreetName" : "Brian Harrison Way",
                          "Unit Number" : 22,
                          "City" : "Toronto",
                          "Country" : "Canada"
                       }
    }</code></pre>
<p>That's all there is to it. Now you can use these 3 components and build very complex json files/templates. Even the most complex template can be broken into these 3 components. </p>
<p>Below is a complex example with all 3 components. </p>
<pre><code>{
    "Department": "Finance",
    "TotalEmployees": 2,
    "Employees": [
        {
            "Name": "John",
            "Age": 34,
            "Department": "Finance",
            "Salary": "100000",
            "IsAdmin": true,
            "Address": {
                "StreetNumber": "50",
                "StreetName": "Brian Harrison Way",
                "Unit Number": 22,
                "City": "Toronto",
                "Country": "Canada"
            }
        },
        {
            "Name": "John",
            "Age": 34,
            "Department": "Finance",
            "Salary": "100000",
            "IsAdmin": true,
            "Address": {
                "StreetNumber": "50",
                "StreetName": "Brian Harrison Way",
                "Unit Number": 22,
                "City": "Toronto",
                "Country": "Canada"
            }
        }
    ]
}</code></pre>
<p>The above JSON object denotes one department with name as Finance and total number of employees as 2. Then the &quot;Employees&quot; object is an array of 2 emplyees. Each emplyee object further have a complex property as Address, which is another object. </p>
<p>If you understood each of the 3 components, you should be able to build/understand most complex JSON files with ease.</p>]]></description>
<link>http://HarvestingClouds.com/post/step-by-step-arm-templates-json-101-for-it-administrators</link>
<pubDate>Wed, 17 Aug 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>ASR Setup for VMs running in VMWare without VMware level User Access</title>
<description><![CDATA[<h3>Problem Statement</h3>
<p>Recently I was setting up <strong>Azure Site Recovery</strong> (or ASR) in an environment. We had multiple VMs in VMWare environment. The environment was managed by Third Party who did not want to give any service account for VMWare as their environment was shared with different customers. So we had access only to the VMs. Without relevant access, ASR for VMWare was out of the question for us.</p>
<h3>Solution</h3>
<p>We treated the VMs, in such environment, as physical machines when setting up ASR to replicate these machines to Azure.
We used the option of &quot;<strong><em>Not virtualized/other</em></strong>&quot; in the &quot;<strong><em>Prepare Infrastructure</em></strong>&quot; wizard of ASR. We <strong>treated the VMs as physical servers</strong> and did not face any issues during the migration. </p>
<p>Refer below screenshot for the exact option discussed above.</p>
<p><img src="http://HarvestingClouds.com/images/14696297155798c513ea908.png" alt="Protection Goal" /></p>
<p>Later when enabling the Replication for any Server, run the &quot;<strong><em>Enable Replication</em></strong>&quot; wizard by clicking on &quot;<strong>+Replicate</strong>&quot; on the ASR vault's blade. Then select &quot;<strong>Machine Type</strong>&quot; as &quot;<strong><em>Physical Machine</em></strong>&quot; and add the Physical Machines by mentioning their IP addresses. </p>
<p><strong>Note:</strong> For this approach to work, the Configuration server should be on the same network as the VM being considered as Physical Machine.</p>
<p>We were able to migrate many servers successfully and without any issues using this approach.</p>]]></description>
<link>http://HarvestingClouds.com/post/asr-setup-for-vms-running-in-vmware-without-vmware-level-user-access</link>
<pubDate>Tue, 26 Jul 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Uploading and Downloading files securely from Azure Storage Blob via PowerShell</title>
<description><![CDATA[<p><strong>Azure blob storage</strong> can provide a very highly available way to store your files in the cloud. You can dynamically add or remove the files in an automated fashion. These files can then be used for any number of purposes. E.g. A parameter file for ARM template can be kept in Azure blob storage and then dynamically read while creating resources from an ARM template.</p>
<p><strong>The whole process can be broken down into 3 parts</strong>:</p>
<ol>
<li>Generating the context to the storage container</li>
<li>Uploading the files using the context</li>
<li>Downloading the files using the context</li>
</ol>
<h3>1. Generating the context to the storage container</h3>
<p>The context to the storage blob container can be created in one of the 3 ways, based on your security requirements. All methods use the <code>New-AzureStorageContext</code> cmdlet to generate the storage context. The methods differ on how you pass the parameters to this cmdlet.</p>
<p><strong>A. Via fetching the Azure Storage Key</strong></p>
<p>This first method uses the <code>Get-AzureStorageKey</code> to fetch the storage key. This key is then used to generate the context as shown below.</p>
<pre><code>$StorageAccountName = "yourstorageaccount"
$StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName
$Ctx = New-AzureStorageContext $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary</code></pre>
<p><strong>B. Via fetching the Azure Storage Container SAS Token</strong></p>
<p>This second method uses the <code>New-AzureStorageContainerSASToken</code> to create a new SAS token to securely access the storage container. This token is then used to generate the context as shown below.</p>
<pre><code>$sasToken = New-AzureStorageContainerSASToken -Container abc -Permission rl
$Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -SasToken $sasToken</code></pre>
<p><strong>C. Via Connectin String</strong></p>
<p>This third method uses a connection string, entered manually, which is then used to generate the context as shown below.</p>
<pre><code>$ConnectionString = "DefaultEndpointsProtocol=http;BlobEndpoint=&lt;blobEndpoint&gt;;QueueEndpoint=&lt;QueueEndpoint&gt;;TableEndpoint=&lt;TableEndpoint&gt;;AccountName=&lt;AccountName&gt;;AccountKey=&lt;AccountKey&gt;"
$Ctx = New-AzureStorageContext -ConnectionString $ConnectionString</code></pre>
<h3>2. Uploading the files using the context</h3>
<p>Now that you have the context to the storage account you can upload and download files from the storage blob container.
Use the below code to upload a file named &quot;<em>Parameters.json</em>&quot;, located on the local machine at &quot;<em>C:\Temp</em>&quot; directory.</p>
<pre><code>#Uploading File
$BlobName = "Parameters.json"
$localFile = "C:\Temp\" + $BlobName
$ContainerName  = "vhds"

#Note the Force switch will overwrite if the file already exists in the Azure container
Set-AzureStorageBlobContent -File $localFile -Container $ContainerName -Blob $BlobName -Context $Ctx -Force</code></pre>
<h3>3. Downloading the files using the context</h3>
<p>Download works in almost identical manner. You use the Get cmdlet instead of Set as shown below to download a file to a local folder, located at &quot;<em>C:\Downloads</em>&quot;.</p>
<pre><code>#Download File
$BlobName = "Parameters.json"
$localTargetDirectory = "C:\Downloads"
$ContainerName  = "vhds"

Get-AzureStorageBlobContent -Blob $BlobName -Container $ContainerName -Destination $localTargetDirectory -Context $ctx</code></pre>
<p>I hope this helps simplify the automated usage of Azure Storage container. Let us know your concerns or questions if any.</p>
<p>You can find the <strong>complete sample</strong> at the below link on GitHub. Right-click and select Save As to save the file: <a href="https://raw.githubusercontent.com/HarvestingClouds/PowerShellSamples/master/Scripts/StorageAccountBlobManagement.ps1">StorageAccountBlobManagement.ps1</a></p>
<p><strong>Reference:</strong> <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-powershell-guide-full/" target="_blank">Using Azure PowerShell with Azure Storage</a></p>]]></description>
<link>http://HarvestingClouds.com/post/uploading-and-downloading-files-securely-from-azure-storage-blob-via-powershell</link>
<pubDate>Wed, 18 May 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Azure comes to Canada (along with Office 365)</title>
<description><![CDATA[<p>Last week marked the general availability of Azure datacenter for Canada locations. Also Office 365 has been released last week. Microsoft has set up 2 new datacenters in Canada. </p>
<h3>Where Exactly are these datacenters located</h3>
<ol>
<li><strong>Canada Central</strong> - The first datacenter is located in Toronto.</li>
<li><strong>Canada East</strong> - The second datacenter is located in Quebec City.</li>
</ol>
<p>Now when you are creating a new resource (like a Virtual Machine) you will see these two options.</p>
<p><img src="http://HarvestingClouds.com/images/1463686879573e16df4f64c.png" alt="New Locations" /></p>
<p>Check out the brief announcement video by <strong>Janet Kennedy</strong>, President of Microsoft Canada:</p>
<iframe src="https://channel9.msdn.com/Blogs/CANITPRO/The-Microsoft-Canada-Cloud-is-Open-for-Business/player" width="560" height="315" allowFullScreen frameBorder="0"></iframe>
<h3>Key Resources:</h3>
<ul>
<li>These locations are also listed in the official Microsoft Regions list here: <a href="https://azure.microsoft.com/en-us/regions/#services?WT.mc_id=azurebg_email_Trans_1106_Tier2_Release_MOSP" target="_blank">Azure Regions</a></li>
<li>Various resources and information for cloud in Canada are available here at <a href="https://www.microsoft.com/en-ca/sites/datacentre/default.aspx" target="_blank">Cloud Accelerate site for Canada</a>.</li>
<li>You can read about this announcement and upcoming features here: <a href="https://azure.microsoft.com/en-us/blog/microsoft-cloud-accelerates-in-canada-and-expands-to-south-korea/?WT.mc_id=azurebg_email_Trans_1106_Tier2_Release_MOSP" target="_blank">Microsoft Cloud accelerates in Canada and expands to South Korea</a></li>
</ul>]]></description>
<link>http://HarvestingClouds.com/post/azure-comes-to-canada-along-with-office-365</link>
<pubDate>Mon, 16 May 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>NEW Feature - Azure Cool Blob Storage</title>
<description><![CDATA[<p>Have you heard about the new <strong>Azure Cool Blob Storage</strong>? </p>
<p>If you haven’t heard about it, this is Microsoft's low-cost storage for <strong>Cool</strong> object data. “Example use cases for cool storage include backups, media content, scientific data, compliance and archival data. In general, any data which lives for a longer period of time and is accessed less than once a month is a perfect candidate for cool storage.” It is similar to what <strong>Glacier storage tier</strong> provides in Amazon Web Services.</p>
<ul>
<li><strong>Pricing:</strong> Its cost is as low as $0.01/GB.</li>
<li><strong>Availability:</strong> 99% (as compared to 99.9% for Hot Storage). With Read-access geo-redundant storage (or RA-GRS) the SLA is 99.9% (as compared to 99.99% for Hot).</li>
<li><strong>Deciding which AccessTier to use:</strong> If the objects in the storage account will be more frequently accessed, then go with <strong>Hot Tier</strong>. Select the <strong>Cold Tier</strong> for infrequently accessed data.</li>
</ul>
<p>Now when you go to New -&gt; &quot;Data + Storage&quot; -&gt; Storage Account, and try to create a Blob Storage account then you can select from one of the options for <strong>Access Tier</strong> from Cold or Hot tier. </p>
<p><img src="http://HarvestingClouds.com/images/146232375357294a2980ece.png" alt="Storage Tiers" /></p>
<p>Also, note that at the time of this writing, Blob storage account is <strong>only available in these locations</strong>: Central US, East US 2, North Central US, North Europe, West Europe, Southeast Asia, Japan East, Japan West, Central India, South India, West India.</p>
<p><strong>Resources to know more:</strong>  </p>
<ul>
<li><a href="https://azure.microsoft.com/en-us/blog/introducing-azure-cool-storage/" target="_blank">Official Announcement</a></li>
<li><a href="https://azure.microsoft.com/en-us/documentation/articles/storage-blob-storage-tiers/" target="_blank">Getting started guide</a></li>
</ul>]]></description>
<link>http://HarvestingClouds.com/post/new-feature-azure-cool-blob-storage</link>
<pubDate>Mon, 02 May 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Taking Automatic Remediation Action on Azure VM Alert Generation</title>
<description><![CDATA[<p>Using a new feature in Azure, now you can easily configure to trigger an Azure Automation Runbook when an Alert is triggered on an Azure Virtual Machine to take a remediation action. To leverage this feature all you need to do is link the alert on Azure VM to an already existing Azure Automation Runbook.</p>
<blockquote>
<p>Note: This feature is supported only for the V2 Virtual Machines, i.e. the VMs created using ARM portal.</p>
</blockquote>
<p>To access this feature open your Virtual Machine. Then go to the Manage alerts section in the Settings:</p>
<p><img src="http://HarvestingClouds.com/images/14618976705722c9c653752.png" alt="Setting - Manage alerts" /></p>
<p>Then open an existing alert or click on &quot;Add alert&quot; to create a new one. Specify the criteria for the alert. Scroll down to the bottom and you can view the new section to link the alert to an Automation Runbook.</p>
<p><img src="http://HarvestingClouds.com/images/14618990795722cf4763dce.png" alt="Automation Runbook for Alert" /></p>
<h3>Under the hood</h3>
<p>The alert will send data to your Runbook in a special format. Your Runbook should be expecting this. Under the hood this happens via WebHooks. The alert data is passed via a HTTP POST request. The Automation webhook service extracts the alert data from the POST request and passes it to the runbook in a parameter called <strong>&quot;WebhookData&quot;</strong>. The Runbook will look like below:</p>
<pre><code>[OutputType("PSAzureOperationResponse")]

param ( [object] $WebhookData )

if ($WebhookData)
{
    # Get the data object from WebhookData
    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

    #Rest of the script comes here
}</code></pre>
<p><strong>In Nutshell</strong>, now you can now trigger Azure Automation Runbooks to take remediation actions on Virtual Machines in case an alert is triggered. </p>
<p><strong>Reference with complete Runbook sample:</strong> <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-azure-vm-alert-integration/">Azure Automation solution - remediate Azure VM alerts</a></p>]]></description>
<link>http://HarvestingClouds.com/post/taking-automatic-remediation-action-on-azure-vm-alert-generation</link>
<pubDate>Wed, 27 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>ROADMAP - Solutions to help with Migration from Azure ASM to ARM portal</title>
<description><![CDATA[<p>In additional to the tool I mentioned yesterday regarding <a href="http://harvestingclouds.com/Migrating-from-Azure-ASM-to-ARM-portal">Migrating from Azure ASM to ARM portal</a> there are various solutions in the pipeline. This post looks at the high level Roadmap for the same from Microsoft.</p>
<p>Microsoft has promised that they are committed to make the migration more easier from ASM (older) to ARM (newer) portal. Various solutions are already in the pipeline for this.
Below are the details and roadmap for the tentative timelines for these solutions.</p>
<table border="1" cellpadding="0" cellspacing="0"> <tbody> <tr> <td valign="top" width="29%"> <p><b>Solution</b></p> </td> <td valign="top" width="51%"> <p><b>Customer Experience</b></p> </td> <td valign="top" width="18%"> <p><b>Expected availability in 2016</b></p> </td> </tr> <tr> <td valign="top" width="29%"> <p>Script migration</p> </td> <td valign="top" width="51%"> <p>VM is rebooted as it is recreated in the Resource Manager model. While the Virtual Machines for the environment are recreated, the network is disconnected.</p> </td> <td valign="top" width="18%"> <p align="center">Q1</p> </td> </tr> <tr> <td valign="top" width="29%"> <p>Virtual Machines, no VNET</p> </td> <td valign="top" width="51%"> <p>As all Virtual Machines deployed in the Resource Manager model must be in a VNet, Virtual Machines will be migrated and placed in a new VNET. This will result in a change in network configuration, requiring a reboot to reconnect.</p> </td> <td valign="top" width="18%"> <p align="center">Q2</p> </td> </tr> <tr> <td valign="top" width="29%"> <p>Virtual Machines with VNET</p> </td> <td valign="top" width="51%"> <p>Starting in Q2, the platform will offer Virtual Machine migration from ASM to Resource Manager model without disrupting the running Virtual Machine. This will require disconnecting any VNets connected on-premises, whether via ExpressRoute or VPN, before doing the migration.</p> </td> <td valign="top" width="18%"> <p align="center">Q2</p> </td> </tr> <tr> <td valign="top" width="29%"> <p>Virtual Machines with basic hybrid (one connection)</p> </td> <td valign="top" width="51%"> <p>Starting in Q3, the platform will offer Virtual Machine migration from ASM to Resource Manager model without disrupting the running Virtual Machine and with minimal disruption to a basic hybrid connection, limited to just one connection back on-premises. More complex connections will require disconnecting before doing the migration.</p> </td> <td valign="top" width="18%"> <p align="center">Q3</p> </td> </tr> </tbody> </table>
<p>Reference: <a href="https://azure.microsoft.com/en-us/blog/transitioning-to-the-resource-manager-model/">Transitioning to the Resource Manager model</a></p>]]></description>
<link>http://HarvestingClouds.com/post/roadmap-solutions-to-help-with-migration-from-azure-asm-to-arm-portal</link>
<pubDate>Fri, 22 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Migrating from Azure ASM to ARM portal</title>
<description><![CDATA[<p>With co-existing Azure Service Management or ASM portal (older) and Azure Resource Manager or ARM portal (newer) there has been lots of confusions and problems for IT administrators.
The bottom line of all the discussion around the two portals is that <strong>ARM is the future and is here to stay</strong>. It means that you need to <strong>plan and migrate</strong> your resources from ASM portal to the ARM portal.</p>
<p>The key resource is your infrastructure which primarily consists of virtual machines. To migrate a single Virtual Machine (VM) from ASM portal to ARM portal you can leverage a set of PowerShell scripts called ASM2ARM.
You can download these scripts and check their description on <a href="https://github.com/fullscale180/asm2arm">GitHub here on the <strong>ASM2ARM</strong> page</a>. You can check the detailed instructions there too.</p>
<p>To plan this right now is very important as the transitioning to Azure Resource Manager model is already underway. Any future development and investment seems to be happening only in the newer portal only.</p>
<p><strong>Reference:</strong> <a href="https://github.com/fullscale180/asm2arm">ASM2ARM scripts on GitHub</a></p>]]></description>
<link>http://HarvestingClouds.com/post/migrating-from-azure-asm-to-arm-portal</link>
<pubDate>Thu, 21 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>PowerShell DSC - Partial Configurations</title>
<description><![CDATA[<p><strong>Partial Configurations</strong> is a new feature in PowerShell 5.0 Desired State Configuration or DSC. It allows the configurations to be delivered in parts or fragments. These configurations can come from various sources.
The Local Configuration Manager or LCM on the target node puts these partial configurations from different sources together and after that apply the same as a single configuration.</p>
<p>This opens various possibilities for Enterprises to manage their infrastructure and designate the responsibility to various teams for a single node. The team expert in a particular field can focus on that feature without worrying about other features.</p>
<p>You can have partial configurations in following modes:</p>
<ol>
<li>Push Mode</li>
<li>Pull Mode</li>
<li>Hybrid Mode (i.e. combination of Push and Pull)</li>
</ol>
<h3>Configuration for the PUSH Mode</h3>
<p>You need to follow three steps to configure Partial configurations for the PUSH mode:</p>
<ul>
<li>Configure the LCM, on the target node, to expect partial configurations</li>
<li>Push each partial configuration from different sources using <strong>Publish-DSCConfiguration</strong> cmdlet. Target node will automatically combine the partial configurations into single configuration.</li>
<li>Apply the configuration by calling the <strong>Start-DSCConfiguration</strong>cmdlet</li>
</ul>
<h3>Configuration for the PULL Mode</h3>
<p>This is bit complex than the Push mode. In nutshell you only need couple of steps:</p>
<ul>
<li>Configure the LCM, on the target node, to receive partial configurations but from PULL servers</li>
<li>Name and locate the configuration documents properly on the pull servers</li>
</ul>
<p>To know more about DSC Partial configurations follow the below references:</p>
<ul>
<li><a href="https://automationnext.wordpress.com/2016/04/19/powershell-desired-state-configuration-partial-configurations-without-configurationid/">Detailed Blog by AutomationNext with very valuable insights</a></li>
<li><a href="https://msdn.microsoft.com/en-us/powershell/dsc/partialconfigs">Official MSDN Article</a></li>
</ul>]]></description>
<link>http://HarvestingClouds.com/post/powershell-dsc-partial-configurations</link>
<pubDate>Wed, 20 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Azure Container Service hits General Availability</title>
<description><![CDATA[<p>Azure Container Service has finally hit General Availability today. </p>
<p>If you don't know already, it is the &quot;container hosting solution&quot; which is optimized for Microsoft's Azure cloud.
All the tools that you may be familiar with when working with a Container Service should work like Apache Mesos or Docker Swarm. It only uses open source components in the orchestration layers to give you portability of full applications.</p>
<p>You can find the announcement here: <a href="https://azure.microsoft.com/en-us/updates/general-availability-azure-container-service/">GA for Azure Container Service</a></p>
<p>You can learn more about the Container Service as offered by Azure on the product page here: <a href="https://azure.microsoft.com/en-us/services/container-service/">Azure Container Service</a></p>]]></description>
<link>http://HarvestingClouds.com/post/azure-container-service-hits-general-availability</link>
<pubDate>Tue, 19 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Azure Authentication - Authenticating any Azure API Request in your Application</title>
<description><![CDATA[<p>I have created a code sample to showcase how you can authenticate any request programatically with Azure.
This also contains <strong>a Reusable Authentication Helper class</strong> which you can directly use in your code.</p>
<h3>Where is the code</h3>
<p>You can find the complete code sample along with the reusable Azure Authentication Helper class library from this GitHub repo:
<a href="https://github.com/HarvestingClouds/AzureAuthentication">Azure Authentication Sample</a></p>
<h3>What are my authentication Options</h3>
<p>You have the following options</p>
<ul>
<li>Authenticating by <strong>Prompting</strong> for Credentials from end user. (This needs end user interaction)</li>
<li>Authenticating by <strong>Credentials</strong> i.e. using a password. (This does not need any end user interaction)</li>
<li>Authenticating by using a <strong>Certificate</strong> ( This also does not need any end user interaction)</li>
</ul>
<p>I have provided this functionality in 3 separate methods, in a separate class file along with it's interface.
You can follow the instructions in the ReadMe file in the GitHub repo and start using any one of the method.</p>
<p>I hope you find this usefull and this will avoid the trouble of figuring things out, which I have already undergone. </p>
<p>Let me know in the comments below if you have any questions or anything to add to this.</p>]]></description>
<link>http://HarvestingClouds.com/post/azure-authentication-authenticating-any-azure-api-request-in-your-application</link>
<pubDate>Fri, 15 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Run Azure Automation Runbooks via PowerShell ISE</title>
<description><![CDATA[<p>Today I came across this blog post from my friend: <a href="https://scomanswers.wordpress.com/2016/04/11/azure-automation-powershell-ise-add-on/">Azure Automation PowerShell ISE add-on</a></p>
<p>What I came to know is that now you can Run the Azure Automation Runbooks via PowerShell ISE. This solves a big pain point for all Azure developers.
Now you will be able to develop and test your scripts right from the convenience of your laptop's local PowerShell ISE. </p>
<h3>What you need to do</h3>
<p>All you need to do is install the PowerShell Add-On using the below cmdlet:</p>
<pre><code class="language-powershell">Find-Module AzureAutomationAuthoringToolkit | Install-Module -Scope CurrentUser</code></pre>
<p>Then import the module using below cmdlet:</p>
<pre><code class="language-powershell">Import-Module AzureAutomationAuthoringToolkit</code></pre>
<p>You can configure the Add-On using a Configuration tab in the add-on and start getting your hands dirty. </p>
<h3>Official Information from the Add-On Help</h3>
<h4>Capabilities</h4>
<ul>
<li>Test runbooks on your local machine and in the Azure Automation service: </li>
<li>Store and edit Automation Assets locally </li>
<li>Use Automation Activities (Get-AutomationVariable, Get-AutomationPSCredential, etc) in local PowerShell scripts </li>
<li>Sync changes back to your Automation Account </li>
<li>Run test jobs in Automation and view results </li>
</ul>
<h4>Notes</h4>
<p>Assets</p>
<ul>
<li>Secret values (passwords, encrypted variables) are not downloaded automatically; they need to be set manually the first time the account is synced </li>
<li>Values that haven't been downloaded will be highlighted </li>
<li>Asset values you enter locally will not get overwritten when you sync from the cloud </li>
</ul>
<p>Runbooks </p>
<ul>
<li>Native PowerShell and PowerShell Workflow runbooks are supported </li>
</ul>
<p>Check the screenshot regarding this information below:
<img src="http://HarvestingClouds.com/images/1461735632572050d069253.png" alt="Official Notes" title="Official Notes" /></p>
<h3>How much time it would take me</h3>
<p>In all it would take you under 10 mins to get setup and rolling.</p>
<h3>Where is more information on this and screenshots</h3>
<p>Go to the official <a href="https://blogs.technet.microsoft.com/msoms/2016/04/08/the-way-cool-azure-automation-powershell-ise-add-on/">Technet blog by clicking HERE.</a></p>
<p>Start playing around and let us know your initial impression in the comments below. If you have any doubts and I will be happy to address them.</p>]]></description>
<link>http://HarvestingClouds.com/post/run-azure-automation-runbooks-via-powershell-ise</link>
<pubDate>Thu, 14 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Various Options Added to Buy Microsoft Azure Active Directory Basic</title>
<description><![CDATA[<p>Today Microsoft announced that they have added various options to buy Microsoft Azure Active Directory (AAD) Basic.
You can now buy it through the Direct program as well as through following options:</p>
<ul>
<li><a href="https://www.microsoft.com/en-us/licensing/licensing-programs/enterprise.aspx?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP">Microsoft Enterprise Agreement</a></li>
<li><a href="https://www.microsoft.com/en-us/licensing/licensing-programs/open-license.aspx?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP">Open Volume License Program</a></li>
<li><a href="https://partner.microsoft.com/en-US/Solutions/cloud-reseller-overview?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP">Microsoft Cloud Solution Provider</a></li>
</ul>
<p>To purchase, sign in to the <a href="https://portal.office.com">Office 365 Administration Portal</a></p>
<p>You can also watch the below video for details. Although the video is for AAD Premium, the steps are essentially similar for AAD Basic.</p>
<iframe src="https://channel9.msdn.com/Series/Azure-Active-Directory-Videos-Demos/How-to-Purchase-Azure-Active-Directory-Premium-Existing-Customer/player" width="560" height="315" allowFullScreen frameBorder="0"></iframe>
<p>You can also engage a partner to assist you with the purchase and your Azure Active Directory related any requirements.
<a href="http://www.infrontconsulting.com/">Infront Consulting Group</a> (where I currently work) is one such partner who are highly respected in market and are Microsoft Gold Certified Partner. </p>
<p>Thanks for reading! If you have any questions please ask in the comments below.</p>]]></description>
<link>http://HarvestingClouds.com/post/various-options-added-to-buy-microsoft-azure-active-directory-basic</link>
<pubDate>Wed, 13 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Multiple Values In Grid.Mvc Single Column Filter via Checkboxes with Code Sample</title>
<description><![CDATA[<p>I have been struggling to implement multiple filters in a single column in Grid.Mvc tool. I have solved this by altering the code and updating the custom widget.
<strong>Note:</strong> The WithMultipleFilters() option will not help you in this. That option enables multiple filters on different columns. To have multiple filters in the same column you need to update the way filtering works in the tool itself.</p>
<p>I have used a list of checkboxes and any or all of the elements selected in this checkbox list will be used for filtering the column values.</p>
<p>You can find the code in my fork of the official Grid.Mvc repo at below link:
<a href="https://github.com/HarvestingClouds/Grid.Mvc" target="_blank">Fork of Grid.Mvc repo with Advance Filters</a></p>
<p>I have also created a pull request for the same so that more people get benefit from this if they refer the master branch of the main repo.</p>
<h3>What are the changes I have done?</h3>
<p>I have made changes to two files:</p>
<ol>
<li><strong>DefaultColumnFilter.cs</strong> file in &quot;<strong>GridMvc</strong>&quot; class library project under the Filters folder. I have updated the GetFilterExpression method to create multiple expressions based on the pipeline character in filter values.</li>
<li><strong>gridmvc.customwidgets.js</strong> file in &quot;<strong>GridMvc.Site</strong>&quot; web application project</li>
</ol>
<p>Both of these paths are shown below:
Location of DefaultColumnFilter.cs:
<img src="http://HarvestingClouds.com/images/146173541957204ffb99678.png" alt="DefaultColumnFilter.cs" title="DefaultColumnFilter.cs" /></p>
<p>Location of gridmvc.customwidgets.js:
<img src="http://HarvestingClouds.com/images/146173543057205006529e6.png" alt="gridmvc.customwidgets.js" title="gridmvc.customwidgets.js" /></p>
<p>How the end result look like:
<img src="http://HarvestingClouds.com/images/14617354255720500171fe7.png" alt="Checkbox Filtering" title="Checkbox Filtering" /></p>
<p>You can directly use the code if you want. Just honor the license of the original author.</p>
<p>Let me know in the comments below if you have any doubts and I will be happy to address them.</p>]]></description>
<link>http://HarvestingClouds.com/post/multiple-values-in-gridmvc-single-column-filter-via-checkboxes-with-code-sample</link>
<pubDate>Tue, 12 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Getting Started - Azure Site Recovery (ASR) In New Azure Portal</title>
<description><![CDATA[<p>Azure Site Recovery or ASR is now available in the new Azure Resource Manager or ARM portal (codename Ibiza) with modern user interface. It is in preview at this stage. But it is production ready for all the Hyper-V related scenarios.
<strong>Your older Vaults (created via Classic ASM Azure Portal) will not be available in ASR preview feature.</strong></p>
<h3>What are the new features</h3>
<p>The new features include:</p>
<ul>
<li>All the goodness of Azure Resource Manager in ASR</li>
<li>Lean experience for various ASR scenarios</li>
<li>Enhancements to the specific Site Recovery scenarios</li>
</ul>
<h3>Lets take a quick look at some of these.</h3>
<p>If you Browse and search for &quot;Recovery&quot; you get Recovery Services Vaults as Preview feature.
<img src="http://HarvestingClouds.com/images/14617358075720517f78904.png" alt="Browse and Search" title="Browse and Search" /></p>
<p>Clicking on it will open up the blade for &quot;Recovery Services valuts&quot;. Notice that Microsoft has PREVIEW text in this.
<img src="http://HarvestingClouds.com/images/1461735702572051161683f.png" alt="alt text" title="ASR Vault" /></p>
<p>Clicking on the Add button brings up the ASR vault creation blade. Notice the locations available for vault creation here.
<img src="http://HarvestingClouds.com/images/14617359385720520210878.png" alt="Vault Creation" title="Vault Creation" /></p>
<p>After you hit create the Vault gets deployed really quickly. I tested for East US location and it was created in under 10 secs.
Refresh to view your newly created vault. Click on it to open the NEW ASR Vault features. Notice that the Backup feature is also there in the ASR vault now.
<img src="http://HarvestingClouds.com/images/1461735907572051e31549a.png" alt="New Vault" title="New Vault" /></p>
<p>To find the options for replication go to Settings -&gt; Getting Started section -&gt; Site Recovery -&gt; Follow Wizard.
<img src="http://HarvestingClouds.com/images/1461735869572051bd2d6fa.png" alt="New Site Recovery Wizard" title="New Site Recovery Wizard" /></p>
<p>The Scenario Types available are only two. But all the scenarios are covered here:</p>
<ul>
<li>From my site to Azure</li>
<li>From my site to another site</li>
</ul>
<p>Based on the scenario you select you are asked for different options. The options for Virtualization/Management Server type for &quot;From my site to Azure&quot; are:</p>
<ul>
<li>VMM</li>
<li>Stand alone Hyper-V hosts</li>
<li>vCenter</li>
<li>Physical machines (not virtualized)
<img src="http://HarvestingClouds.com/images/14617358385720519e578ba.png" alt="Creation Options" title="Creation Options" /></li>
</ul>
<h3>Backup in ASR vault</h3>
<p>Another feature is creation of Backups from the same vault. Click on the + icon for Backup in the Vault main blade and then follow the wizard for the preview feature.
<img src="http://HarvestingClouds.com/images/14617357575720514d5d1d8.png" alt="Backup In ASR" title="Backup In ASR" />
Notice in the screenshot above that the backup types available are:</p>
<ul>
<li>Azure virtual machine backup</li>
<li>File Folder backup</li>
<li>System Center Data Protection Manager</li>
</ul>
<p>Selecting each option provides you with details for next steps. You can then create a backup policy and configure Items to backup.</p>
<p>Give these features a try and let us know in comments below how you find the new features.
Happy Exploring!</p>]]></description>
<link>http://HarvestingClouds.com/post/getting-started-azure-site-recovery-asr-in-new-azure-portal</link>
<pubDate>Sat, 09 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Coming Soon - Windows 10 Anniversary Update</title>
<description><![CDATA[<p>Windows 10 Anniversary Update is coming this summary. It will be available for free download for the following devices (which is almost every device):</p>
<ul>
<li>PCs</li>
<li>Tablets</li>
<li>Phones</li>
<li>Xbox One</li>
<li>Microsoft HoloLens</li>
<li>IoT</li>
</ul>
<h2>What this means to you:</h2>
<ul>
<li>Improved Biometric Security</li>
<li>Microsoft Edge browser</li>
<li>Windows Ink (where just one click of pen will bring up all the gamut available for use with your Pen device)</li>
<li>Universal Windows Platform or UWP apps are coming to XBox through a Unified Windows Store. Also if you own a XBox you will be able to turn it into a dev box and do development with it</li>
<li>Various improvements to Cortana</li>
</ul>
<p><a href="https://www.microsoft.com/en-us/windows/upcoming-features" target="_blank">Check out more details here</a></p>]]></description>
<link>http://HarvestingClouds.com/post/coming-soon-windows-10-anniversary-update</link>
<pubDate>Fri, 08 Apr 2016 00:00:00 +0500</pubDate>
</item>
<item>
<title>Introducing Harvesting Clouds</title>
<description><![CDATA[<p>Harvesting Clouds is a blog about all things Cloud. Be it Private Cloud or Public Cloud, I will try to cover various aspects of both.</p>
<h3>Private Cloud</h3>
<p>My key areas of interest in Private Cloud include the following:</p>
<ul>
<li>PowerShell Scripting</li>
<li>Windows Azure Pack or WAP</li>
<li>Service Management Automation or SMA</li>
<li>Azure Stack</li>
<li>System Center Orchestrator</li>
<li>System Center VMM and other products like Service Manager, Ops Mgr, etc.</li>
</ul>
<h3>Public Cloud</h3>
<p>In addition to the Private Cloud the areas of interest in Public Cloud are:</p>
<ul>
<li>Microsoft Azure and Amazon Web Services - both IaaS and PaaS</li>
<li>Azure Automation</li>
<li>Desired State Configurations</li>
<li>Application Insights</li>
<li>Azure Web Apps</li>
<li>Web APIs</li>
<li>Azure Site Recovery and Backup</li>
<li>Migrations from Private to Public Clouds</li>
</ul>
<h3>Common Areas &amp; Best of both worlds</h3>
<p>I have also been involved in creating Hybrid clouds leveraging the best of both worlds. I will try to share my knowledge on this with you. The key aspects in this area are:</p>
<ul>
<li>Building Hybrid Solutions</li>
<li>Developing Web or Desktop Applications targetting either or both the clouds (using MVC, Dot Net)</li>
<li>Using TFS Online, Visual Studio, GitHub to better collaborate and work in an automated fashion</li>
<li>Release Manager to automate your release workflows</li>
</ul>
<h3>Primary Focus</h3>
<p>As you must have guessed by now, the primary focus for this blog will be Microsoft Technologies. We will also explore beyond this and will be talking about various emerging open source technologies and the new Better Together world with the amalgamation of various technologies in one solution.</p>
<p>I invite to take this journey with me!
Keep learning!</p>]]></description>
<link>http://HarvestingClouds.com/post/introducing-harvesting-clouds</link>
<pubDate>Fri, 01 Apr 2016 00:00:00 +0500</pubDate>
</item>
</channel>
</rss>
