{
	"settings": {
		"url": "http:\/\/HarvestingClouds.com",
		"title": "Harvesting Clouds",
		"tagline": "Blog about all things regarding private and public clouds",
		"author": "@20aman",
		"layout": "default",
		"theme": "cerulean.min.css",
		"disqus": "harvestingclouds",
		"analytics": "UA-75855204-1",
		"only_titles": ""
	},
	"customValues": [

	],
	"pages": [
		{
			"title": "About Me",
			"body": "<p><img src=\"http:\/\/HarvestingClouds.com\/images\/14617319815720428d47326.png\" alt=\"This was taken during fall 2015.\" \/><\/p>\n<p>I am Senior Technical Consultant for Private and Public cloud. I am passionate about technology and how it can change the way we experience life. <\/p>\n<h3>My Moto<\/h3>\n<blockquote>\n<p>Do it with Passion or Not at all!<\/p>\n<\/blockquote>\n<h3>Technologies I focus on<\/h3>\n<p>Various technologies which I focus on, but not limited to, are:<\/p>\n<ul>\n<li>Microsoft Azure &amp; AWS Cloud Platforms<\/li>\n<li>Azure Automation<\/li>\n<li>PowerShell Scripting<\/li>\n<li>System Center Products - esp. Orchestrator, Virtual Machine Manager, Service Manager, etc.<\/li>\n<li>Application Insights<\/li>\n<li>Visual Studio, Git, GitHub, TFS &amp; Release Management<\/li>\n<li>Dot Net Application development (esp. Web using MVC)<\/li>\n<li>Windows Azure Pack (WAP)<\/li>\n<li>Service Management Automation (SMA)<\/li>\n<\/ul>\n<h3>What I have been doing<\/h3>\n<p>I have been working with great companies like Infosys (2.5 yrs), <a href=\"http:\/\/www.microsoft.com\" target=\"_blank\">Microsoft (5 yrs)<\/a> &amp; <a href=\"http:\/\/www.infrontconsulting.com\/\" target=\"_blank\">Infront Consulting Group (current)<\/a>. I have been working on various Microsoft products from within or outside Microsoft, working closely with their product teams. I have been busy building enterprise solutions around:<\/p>\n<ul>\n<li>Azure Billing &amp; Chargeback<\/li>\n<li>Enterprise Datacenter Management solutions<\/li>\n<li>System Center customization solutions<\/li>\n<li>Windows Azure Pack customizations and resource providers<\/li>\n<\/ul>\n<p>Have questions or suggestions? Feel free to contact me on social media or on my email id at <a href=\"mailto:20aman@gmail.com?subject=HarvestingClouds\">20aman@gmail.com<\/a>. You can connect with me on Twitter <a href=\"https:\/\/twitter.com\/20aman\" target=\"_blank\">@20aman<\/a>. You can also find me on <a href=\"https:\/\/www.linkedin.com\/in\/20aman\" target=\"_blank\">Linked In<\/a>.<\/p>\n<p>Thanks for reading!<\/p>",
			"slug": "about-me"
		}
	],
	"follow": {
		"twitter": "https:\/\/twitter.com\/20aman",
		"linkedin": "https:\/\/ca.linkedin.com\/in\/20aman",
		"google": "",
		"facebook": "",
		"github": "https:\/\/github.com\/HarvestingClouds"
	},
	"posts": [
		{
			"author": "@20aman",
			"title": "Book published on Amazon - Quick and Practical Guide to ARM Templates",
			"postDate": "23-03-2018",
			"tags": [
				"arm",
				"azure",
				"microsoft",
				"microsoftazure",
				"ebook",
				"book",
				"templates",
				"armtemplates"
			],
			"category": "Azure",
			"body": "<p><strong>Quick and Practical Guide to ARM Templates<\/strong> is a very non-conventional book. The objective of the book is to help you &quot;Become Experts in Developing ARM Templates for Microsoft Azure without any prior knowledge&quot;. This book is for both a beginner and intermediate users. <\/p>\n<p>This is a quick and practical approach to learning ARM Templates for Azure. It covers only the most essential topics that you will need 95% of the time while working with ARM Templates. The goal is to have you working faster and quicker on ARM Templates without compromising any of the best practices. <\/p>\n<p>The book assumes that you do not have prior knowledge of ARM Templates. If you have no development background then this book is for you. It starts by building the fundamentals on which ARM Templates are built.  The more practical approach means less theory and more focus on the practical aspects that can help you start working and delivering on ARM Templates.<\/p>\n<p>You can view the book on Amazon.com at this link: <a href=\"https:\/\/www.amazon.com\/dp\/B07C8LSBSN\" target=\"_blank\"><a href=\"https:\/\/www.amazon.com\/dp\/B07C8LSBSN\">https:\/\/www.amazon.com\/dp\/B07C8LSBSN<\/a><\/a><\/p>\n<p>You can also search for the book in your local Amazon marketplace.<\/p>\n<img src=\"\/images\/15217860175ab49ca149064.png\" alt=\"Quick and Practical Guide to ARM Templates\">",
			"addpost": "addpost",
			"dated": "Mar 23, 2018",
			"slug": "book-published-on-amazon-quick-and-practical-guide-to-arm-templates",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Quick and Practical Guide to ARM Templates<\/strong> is a very non-conventional book. The objective of the book is to help you \"Become Experts in Developing ARM Templates for Microsoft Azure without any prior knowledge\". This book is for both a beginner and intermediate users. <\/p>\n",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Site Recovery (ASR) - Series Index",
			"postDate": "19-02-2018",
			"tags": [
				"asr",
				"azure",
				"azuresiterecovery",
				"microsoft",
				"microsoftazure"
			],
			"category": "Azure",
			"body": "<p>Outages can happen anytime. There can be different reasons that you may encounter disruptions in the service. It is always good to be prepared. Azure Site Recovery (ASR) ensure business continuity by providing you with a backup plan in case of an outage or a disaster level event. <\/p>\n<p>This series talks about various aspects of working with <strong>Azure Site Recovery<\/strong> or <strong>ASR<\/strong>. <\/p>\n<p>This blog is an <strong>Index<\/strong> of various blogs in the series:<\/p>\n<ul>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/troubleshooting-azure-site-recovery-asr-data-replication-not-working\/\" target=\"_blank\">Troubleshooting Azure Site Recovery (ASR) - Data Replication Not Working<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/troubleshooting-azure-site-recovery-asr-data-replication-initiation-issues-part-2\/\" target=\"_blank\">Troubleshooting Azure Site Recovery (ASR) - Data Replication Initiation Issues<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/azure-site-recovery-asr-new-feature-added-to-target-resource-groups\/\" target=\"_blank\">Azure Site Recovery (ASR) - New feature added to target Resource Groups<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/suspending-and-resuming-azure-site-recovery-asr-replication-on-a-single-or-multiple-servers\/\" target=\"_blank\">Suspending and Resuming Azure Site Recovery (ASR) Replication on a single or multiple servers<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/asr-setup-for-vms-running-in-vmware-without-vmware-level-user-access\/\" target=\"_blank\">ASR Setup for VMs running in VMWare without VMware level User Access<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/getting-started-azure-site-recovery-asr-in-new-azure-portal\/\" target=\"_blank\">Getting Started - Azure Site Recovery (ASR) In New Azure Portal<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Mar 19, 2018",
			"slug": "azure-site-recovery-asr-series-index",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Outages can happen anytime. There can be different reasons that you may encounter disruptions in the service. It is always good to be prepared. Azure Site Recovery (ASR) ensure business continuity by providing you with a backup plan in case of an outage or a disaster level event. <\/p>\n<p>This ser...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Series Index",
			"postDate": "11-03-2018",
			"tags": [
				"azure",
				"azuresecurity",
				"microsoft",
				"microsoftazure",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>Understanding the security is of utmost importance in designing any application architecture. When bringing your applications or infrastructure to Azure or even designing new applications in Azure, you need to be aware of all the ways you can make your application\/design more secure by leveraging various features Azure has to offer.<\/p>\n<p>This series talks about various aspects of <strong>security<\/strong> as related to different aspects of Azure.<\/p>\n<p>This blog is an <strong>Index<\/strong> of various blogs in the series &quot;Demystifying Azure Security&quot;:<\/p>\n<ul>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-rbac-roles\/\" target=\"_blank\">Understanding RBAC Roles<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-custom-rbac-roles\/\" target=\"_blank\">Custom RBAC Roles<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-just-in-time-vm-access\/\" target=\"_blank\">Just In Time VM access<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-azure-policies-1-basics\/\" target=\"_blank\">Azure Policies - 1 - Basics<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-azure-policies-2-assigning-a-policy\/\" target=\"_blank\">Azure Policies - 2 - Assigning a Policy<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Mar 11, 2018",
			"slug": "demystifying-azure-security-series-index",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>Understanding the security is of utmost importance in designing any application architecture. When bringing your applications or infrastructure to Azure or even designing new applications in Azure, you need to be aware of all the ways you can make your application\/design more secure by leveraging...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Resources - New Azure Log Analytics Language Cheat Sheets",
			"postDate": "19-02-2018",
			"tags": [
				"analytics",
				"azue",
				"language",
				"log",
				"loganalytics",
				"microsoft",
				"microsoftazure",
				"oms",
				"query",
				"querylanguage"
			],
			"category": "Azure",
			"body": "<p>Azure Log Analytics (part of the OMS suite) has a very versatile query language. To investigate and report on the data you need to know the query language at least at the basic level. Recently the language had a complete overhaul with new syntax coming in and various new features being incorporated into the new language. This blog post talks about the resources to quickly learn the new syntax. Specifically, if you know the older syntax or you know T-SQL syntax then how to translate that knowledge.<\/p>\n<h3>Older to new Query Language syntax<\/h3>\n<p>If you have been working with the older Log Analytics query syntax, then you have two options to convert that knowledge to newer query language syntax:<\/p>\n<ol>\n<li>Use the in portal legacy syntax converter and learn as you convert<\/li>\n<li>Use the Microsoft provided Cheat Sheet<\/li>\n<\/ol>\n<p>When you navigate to OMS log analytics portal and go to the Log search section, there you will see a link above the query text window for &quot;<strong>Show legacy language converter<\/strong>&quot;. When you click on this link a new text box will appear above the query text box. Type your legacy query and then click on &quot;<strong>Convert<\/strong>&quot; button. The query will be converted into the new language syntax. Click Run to execute the query. If there will be any errors in the query you will be notified of the same. <\/p>\n<img src=\"\/images\/15212342425aac314289ed9.png\" alt=\"OMS Language Converter\">\n<p>In the above example, &quot;Event&quot; type is being fetched and then only Source, EventLog, EventID properties are selected. In the older format the query syntax used to be:<\/p>\n<pre><code>Type=Event | select Source, EventLog, EventID<\/code><\/pre>\n<p>In the newer format the same query looks as below:<\/p>\n<pre><code>Event | project Source, EventLog, EventID<\/code><\/pre>\n<p>Pointers for key query syntax can be found in the complete cheat sheet which can be found here: <a href=\"https:\/\/docs.loganalytics.io\/docs\/Learn\/References\/Legacy-to-new-to-Azure-Log-Analytics-Language\" target=\"_blank\">Legacy to new Azure Log Analytics Query Language cheat sheet<\/a><\/p>\n<h3>T-SQL to new Query Language syntax<\/h3>\n<p>If you are well versed in the T-SQL query syntax and are new to OMS Azure Log Analytics, then you can easily translate that to the Log Analytics query language with the help of the cheat sheet provided by Microsoft for the key syntax.<\/p>\n<p>E.g. if we want to select records for only columns name and resultCode from a table named dependencies then the query syntax in T-SQL will look like:<\/p>\n<pre><code>SELECT name, resultCode FROM dependencies<\/code><\/pre>\n<p>Syntax for the same query in newer Log Analytics language will look like:<\/p>\n<pre><code>dependencies \n| project name, resultCode<\/code><\/pre>\n<p>As you might have guessed already, &quot;project&quot; is a key word in newer language to select specific columns. Selecting a table is as simple as typing the name of the table.<\/p>\n<p>The complete cheat sheet can be found here: <a href=\"https:\/\/docs.loganalytics.io\/docs\/Learn\/References\/SQL-to-Azure-Log-Analytics\" target=\"_blank\">SQL to Azure Log Analytics query language cheat sheet<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Feb 19, 2018",
			"slug": "resources-new-azure-log-analytics-language-cheat-sheets",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Azure Log Analytics (part of the OMS suite) has a very versatile query language. To investigate and report on the data you need to know the query language at least at the basic level. Recently the language had a complete overhaul with new syntax coming in and various new features being incorporat...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Custom RBAC Roles",
			"postDate": "04-02-2018",
			"tags": [
				"azure",
				"azureresourcemanager",
				"azuresecurity",
				"custom",
				"customroles",
				"microsoft",
				"microsoftazure",
				"roles",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>Before going through this blog, please ensure that you have visited the basics of RBAC Roles in general, explained in a primer here: <a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-rbac-roles\/\" target=\"_blank\">Demystifying Azure Security - RBAC Roles<\/a>.<\/p>\n<p>This blog explains an easy approach to understand and create your own Custom RBAC Roles in Azure (ARM model). We will inspect an existing simple role and will reverse engineer the way to create Custom RBAC Roles. <\/p>\n<h3>Inspecting Existing Role's Definition<\/h3>\n<p>Start by inspecting any existing Role's Definition. To do this run the cmdlet <strong>Get-AzureRMRoleDefinition<\/strong> and provide the name of any built-in RBAC Role. For this blog, run the below script to inspect the &quot;Reader&quot; and &quot;Virtual Machine Contributor&quot; roles.<\/p>\n<pre><code>Login-AzureRMAccount\n\nGet-AzureRMRoleDefinition -Name \"Reader\" | ConvertTo-Json | Out-File C:\\rbacrole-reader.json\n\nGet-AzureRMRoleDefinition -Name \"Virtual Machine Contributor\" | ConvertTo-Json | Out-File C:\\rbacrole-VMContributor.json<\/code><\/pre>\n<p>If you open and inspect the &quot;rbacrole-reader.json&quot; file you will see the JSON similar to below:<\/p>\n<pre><code>{\n    \"Name\":  \"Reader\",\n    \"Id\":  \"aaaa11a1-3333-48ef-bd42-f606fba81ae7\",\n    \"IsCustom\":  false,\n    \"Description\":  \"Lets you view everything, but not make any changes.\",\n    \"Actions\":  [\n                    \"*\/read\"\n                ],\n    \"NotActions\":  [\n\n                   ],\n    \"AssignableScopes\":  [\n                             \"\/\"\n                         ]\n}<\/code><\/pre>\n<p>Notice above that there are below sections in the definition:<\/p>\n<ol>\n<li><strong>Name<\/strong> - Name of the role<\/li>\n<li><strong>Id<\/strong> - unique guid for the role<\/li>\n<li><strong>IsCustom<\/strong> - boolean value. &quot;true&quot; for the Custom Roles and &quot;false&quot; for the built-in roles<\/li>\n<li><strong>Description<\/strong> - description of the role<\/li>\n<li><strong>Actions<\/strong> - Allowed list of actions for the Role<\/li>\n<li><strong>NotActions<\/strong> - Not Allowed list of actions for the Role<\/li>\n<li><strong>AssignableScopes<\/strong> - Scope at which this role can be assigned. E.g. all the subscription Ids. It's mandatory that the RBAC role contains the explicit subscription IDs where it is used otherwise you will not be able to use the role.<\/li>\n<\/ol>\n<h3>Understanding Actions and NotActions<\/h3>\n<p>As mentioned before, Actions describe the allowed list of action for the Role whereas the NotActions describe the not allowed actions for the Role. You can use wildcard * and special syntax to define the Actions and NotActions, as per the Microsoft documentation here: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/role-based-access-control-custom-roles\" target=\"_blank\">Create custom roles for Azure Role-Based Access Control<\/a>:<\/p>\n<p>Operation strings that contain wildcards (*) grant access to all operations that match the operation string. For instance:<\/p>\n<ul>\n<li><code>*\/read<\/code> grants access to read operations for all resource types of all Azure resource providers.<\/li>\n<li><code>Microsoft.Compute\/*<\/code> grants access to all operations for all resource types in the Microsoft.Compute resource provider.<\/li>\n<li><code>Microsoft.Network\/*\/read<\/code> grants access to read operations for all resource types in the Microsoft.Network resource provider of Azure.<\/li>\n<li><code>Microsoft.Compute\/virtualMachines\/*<\/code> grants access to all operations of virtual machines and its child resource types.<\/li>\n<li><code>Microsoft.Web\/sites\/restart\/Action<\/code> grants access to restart websites.<\/li>\n<\/ul>\n<p>Use <code>Get-AzureRmProviderOperation<\/code> (in PowerShell) or <code>azure provider operations show<\/code> (in Azure CLI) to list operations of Azure resource providers. You may also use these commands to verify that an operation string is valid and to expand wildcard operation strings.<\/p>\n<pre><code>Get-AzureRMProviderOperation Microsoft.Compute\/virtualMachines\/*\/action | FT Operation, OperationName\n\nGet-AzureRMProviderOperation Microsoft.Network\/*<\/code><\/pre>\n<h3>Defining a Custom role<\/h3>\n<p>Let's define a custom role, who can start or restart a VM in Azure but can't open a support ticket.<\/p>\n<p>Save the following code as &quot;yourCustomRole01.json&quot; file on your C drive (or any other location).<\/p>\n<pre><code>{\n  \"Name\": \"Virtual Machine Start and Restart\",\n  \"Id\": \"7ed03a9f-b372-4341-ba8d-38ef8e614038\",\n  \"IsCustom\": true,\n  \"Description\": \"Can restart virtual machines but can't open support tickets.\",\n  \"Actions\": [\n    \"Microsoft.Compute\/virtualMachines\/start\/action\",\n    \"Microsoft.Compute\/virtualMachines\/restart\/action\"\n  ],\n  \"NotActions\": [\n    \"Microsoft.Support\/*\"\n  ],\n  \"AssignableScopes\": [\n    \"\/subscriptions\/aaaaaaaa-1111-1111-1111-111111111111\",\n    \"\/subscriptions\/aaaaaaaa-2222-2222-2222-222222222222\",\n    \"\/subscriptions\/aaaaaaaa-3333-3333-3333-333333333333\/resourceGroups\/RG-Prod-USE2\"\n  ]\n}<\/code><\/pre>\n<p>Notice the Action and NotAction area are set as per the requirements.<\/p>\n<p>Also, note that under Assignable Scope the role is available for assignment to all Resources and Resource Groups in the first two subscriptions but only in Resource Group named &quot;RG-Prod-USE2&quot; for the third subscription in the list.<\/p>\n<h3>Creating New Custom role<\/h3>\n<p>Once you have the definition ready in a JSON file, you can use the &quot;<strong>New-AzureRMRoleDefinition<\/strong>&quot; cmdlet to create the Custom Role Definition, as shown below. Make sure to alter the path to the json file as per your environment.<\/p>\n<pre><code>New-AzureRMRoleDefinition -InputFile \"C:\\yourCustomRole01.json\"<\/code><\/pre>\n<p>Now you will be able to use this new Custom Role while assigning access to someone. You will be able to tweak the access and provide only the access that you need to your internal and external resources.<\/p>",
			"addpost": "addpost",
			"dated": "Feb 04, 2018",
			"slug": "demystifying-azure-security-custom-rbac-roles",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>Before going through this blog, please ensure that you have visited the basics of RBAC Roles in general, explained in a primer here: <a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-rbac-roles\/\" target=\"_blank\">Demystifying Azure Security - RBAC Roles<\/a>.<\/p>\n<p>This blog ex...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Fixing the error - The subscription is not registered to use provider",
			"postDate": "22-01-2018",
			"tags": [
				"azure",
				"azureresourcemanager",
				"microsoft",
				"microsoftazure"
			],
			"category": "Azure",
			"body": "<p>This blog shows you simple step to resolve the provider registration error, that you can come across while working programmatically with Azure (in Azure Resource Manager model).<\/p>\n<p>You can come across this error while running a PowerShell cmdlet or anywhere else: <strong>The subscription 'xxxxxx-xxxx-xxx-xxxx-xxxxxxxx' is not registered to use providername<\/strong>. E.g. in the below screenshot I got the error <em>The subscription '8c665920-2c37-419f-81fb-99d737cc4697' is not registered to use microsoft.insights<\/em>. <\/p>\n<img src=\"\/images\/15212142425aabe322e6b05.png\" alt=\"Provider Error\">\n<p>To resolve this error you will need to navigate to the Azure Portal (i.e. <a href=\"https:\/\/portal.azure.com\">https:\/\/portal.azure.com<\/a> ). Authenticate to the portal with your credentials. Navigate to Subscriptions section. If you don't see this section then click on &quot;All Services&quot; and then search for Subscription. Once in the subscriptions blade, select the subscription for which you have been getting the error. If there was only one subscription then click on that. In the selected subscription's blade follow the below steps:<\/p>\n<ol>\n<li>Click on the Resource Providers<\/li>\n<li>In the list of providers, find the one for which you have been getting error and then click on &quot;Register&quot; link in front of it<\/li>\n<li>The provider will go into &quot;Registering&quot; state<\/li>\n<li>Once completed, the provider will then go into &quot;Registered&quot; state<\/li>\n<\/ol>\n<img src=\"\/images\/15212142785aabe346ede90.png\" alt=\"Subscription Settings\">\n<p>Now retry the cmdlet or API you were trying before. It will not generate the provider error now. <\/p>",
			"addpost": "addpost",
			"dated": "Jan 22, 2018",
			"slug": "fixing-the-error-the-subscription-is-not-registered-to-use-provider",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>This blog shows you simple step to resolve the provider registration error, that you can come across while working programmatically with Azure (in Azure Resource Manager model).<\/p>\n<p>You can come across this error while running a PowerShell cmdlet or anywhere else: <strong>The subscription 'xxx...<\/strong><\/p>\n",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Creating a Custom Policy - Part 3 - Defining your Custom Policy",
			"postDate": "06-01-2018",
			"tags": [
				"azue",
				"azuresecurity",
				"custompolicy",
				"microsoft",
				"microsoftazure",
				"policies",
				"policy",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>As discussed earlier, the policies provide a way to control what is allowed and what is not allowed in your environment. Earlier we looked at how to view the definition of existing policies and discussed the structure of the policies in detail. Now it's time to put the knowledge together and define a policy.<\/p>\n<h3>Getting the JSON ready for the Policy Definition<\/h3>\n<p>Have the JSON ready for the Policy Definition. If you are going to deploy the policy via Portal then all you need is the Policy Rule portion of the definition. For this post, let's use the sample policy definition for &quot;<em>Only allow a certain VM platform image<\/em>&quot; located here: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/azure-policy\/scripts\/allow-certain-vm-image\">https:\/\/docs.microsoft.com\/en-us\/azure\/azure-policy\/scripts\/allow-certain-vm-image<\/a><\/p>\n<p>Various other samples are provided by Microsoft at this link: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/azure-policy\/json-samples\" target=\"_blank\">Templates for Azure Policy<\/a><\/p>\n<p>This sample policy, enforces the end users to use only a certain version of the Ubuntu only. <\/p>\n<p>The policy definition looks as below:<\/p>\n<pre><code>{\n    \"type\": \"Microsoft.Authorization\/policyDefinitions\",\n    \"name\": \"platform-image-policy\",\n    \"properties\": {\n        \"displayName\": \"Only allow a certain VM platform image\",\n        \"description\": \"This policy ensures that only UbuntuServer, Canonical is allowed from the image repository\",\n        \"parameters\": {},\n        \"policyRule\": {\n            \"if\": {\n                \"allOf\": [\n                    {\n                        \"field\": \"type\",\n                        \"in\": [\n                            \"Microsoft.Compute\/disks\",\n                            \"Microsoft.Compute\/virtualMachines\",\n                            \"Microsoft.Compute\/VirtualMachineScaleSets\"\n                        ]\n                    },\n                    {\n                        \"not\": {\n                            \"allOf\": [\n                                {\n                                    \"field\": \"Microsoft.Compute\/imagePublisher\",\n                                    \"in\": [\n                                        \"Canonical\"\n                                    ]\n                                },\n                                {\n                                    \"field\": \"Microsoft.Compute\/imageOffer\",\n                                    \"in\": [\n                                        \"UbuntuServer\"\n                                    ]\n                                },\n                                {\n                                    \"field\": \"Microsoft.Compute\/imageSku\",\n                                    \"in\": [\n                                        \"14.04.2-LTS\"\n                                    ]\n                                },\n                                {\n                                    \"field\": \"Microsoft.Compute\/imageVersion\",\n                                    \"in\": [\n                                        \"latest\"\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"then\": {\n                \"effect\": \"deny\"\n            }\n        }\n    }\n}<\/code><\/pre>\n<p>Look at the policy rule section. Let's look at various sections more closely.<\/p>\n<ol>\n<li><strong><em>if<\/em><\/strong> condition defines the policy condition<\/li>\n<li><strong><em>allOf<\/em><\/strong> ensures that all the conditions must be true<\/li>\n<li><strong><em>field type<\/em><\/strong> is specified as Disks, Virtual Machines and VM scale sets under Microsoft.Compute<\/li>\n<li>Next section defines a nested condition, which evaluates true if actual VM image used is not equal to combination of all of the conditions specified. <\/li>\n<li><strong><em>then<\/em><\/strong> section defines what should happen. In this case it says to <strong><em>deny<\/em><\/strong> the operation, i.e. the VM provisioning will fail with validation error for not conforming to the policy.<\/li>\n<\/ol>\n<p>Note that there are no parameters used in this policy definition.<\/p>\n<h3>Defining Policy using Portal<\/h3>\n<p>For defining the policies via Azure Portal, navigate to the Policies under settings of your Subscription. Click on the Definitions and then click on &quot;<strong>+Policy Definition<\/strong>&quot; at the top.<\/p>\n<img src=\"\/images\/15218358115ab55f2336e11.png\" alt=\"Defining New Policy\">\n<p>A new blade will open where you can define the policy. Provide the details as follows:<\/p>\n<ol>\n<li>Provide the policy definition's location. This will be your subscription in which you want the definition to exist.<\/li>\n<li>Provide a Display Name and Description of the policy. Try to be as descriptive as possible<\/li>\n<li>Either create a new Category for the policy or use one of the existing ones<\/li>\n<li>\n<p>Copy and paste your policy definition. In the portal, only provide the &quot;policyRule&quot; section. The section will look something similar to:<\/p>\n<p>{\n&quot;policyRule&quot;: {\n&lt;<all content here>&gt;\n}\n}<\/p>\n<\/li>\n<\/ol>\n<img src=\"\/images\/15218358165ab55f28ad5a4.png\" alt=\"New Policy Definition Blade\">\n<p>Hit <strong>Save<\/strong> to create the Policy Definition. You can now start assigning this policy in your environment.<\/p>\n<h3>Defining Policy using PowerShell<\/h3>\n<p>Ensure that you have latest version of Azure PowerShell installed. Then using PowerShell to deploy the policy is as easy as executing below two cmdlets:<\/p>\n<ol>\n<li><strong><em>New-AzureRmPolicyDefinition<\/em><\/strong> - to create the policy definition <\/li>\n<li><strong><em>New-AzureRMPolicyAssignment<\/em><\/strong> - to use the policy and assign the policy at a scope defined<\/li>\n<\/ol>\n<p>Store the policy in a json file on your computer. Ensure that you only save the &quot;if-then&quot; condition in curly parenthesis. This will be used as an input to the cmdlet. The file should look similar to below:<\/p>\n<pre><code>{\n            \"if\": { &lt;&lt;content here&gt;&gt;},\n            \"then\":{ &lt;&lt;content here&gt;&gt;}\n}<\/code><\/pre>\n<p>To create the policy definition use a code similar to below. Ensure to update the file name and path as per your environment.<\/p>\n<pre><code>$definition = $definition = New-AzureRmPolicyDefinition -Name \"RestrictingUbuntuVMVersion\" -DisplayName \"Restrict Ubuntu version for VM Deployment\" -Description \"Detailed Description here\" -Policy \"C:\\temp\\CustomPolicyDefinition.json\"<\/code><\/pre>\n<p>To use the policy, do the assignment using a code similar to below:<\/p>\n<pre><code>$assignment = New-AzureRMPolicyAssignment -Name &lt;customAssignmentName&gt; -Scope &lt;SubscriptionId&gt;  -PolicyDefinition $definition<\/code><\/pre>\n<p>That is all there is to defining and using your custom policy.<\/p>",
			"addpost": "addpost",
			"dated": "Jan 14, 2018",
			"slug": "demystifying-azure-security-creating-a-custom-policy-part-3-defining-your-custom-policy",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>As discussed earlier, the policies provide a way to control what is allowed and what is not allowed in your environment. Earlier we looked at how to view the definition of existing policies and discussed the structure of the policies in detail. Now it's time to put the knowledge together and defi...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Just In Time VM access",
			"postDate": "10-01-2018",
			"tags": [
				"azure",
				"azuresecurity",
				"microsoft",
				"microsoftazure",
				"security",
				"vm"
			],
			"category": "Azure Security",
			"body": "<p><strong>Just in time VM access<\/strong> is a feature under <strong>Azure Security Center<\/strong>. In simple terms it allows you to control access to a VM. When you enable JIT, all access is locked down on the VM on all ports. This is done via Network Security Group (NSG) rules. The access is granted only for the duration allowed and also only on the ports requested. And then everything is locked down again at the end of the duration.<\/p>\n<p>The attackers are leveraging various ways to get into your environment. One such way is using Bots to automate and Brute Force method to attempt entering in your environment. If you need to access a VM, in your environment, from Internet without VPN (e.g. to change some files on a Web app VM) then you are potentially opening up 3389 port on the VM and that can become a target for the attackers. Locking down the VM except when you need it and only for the duration of the requirement, reduces these risks significantly. <\/p>\n<h3>Pre-requisites<\/h3>\n<p>The key pre-requisites to be able to use this feature are:<\/p>\n<ol>\n<li>The Azure Security Center needs to be upgraded to Advanced Security as shown below<\/li>\n<li>The VM on which you want to configure JIT access should have a Network Security Group (NSG) linked to it. If it doesn't have any then you can create one and associate it with the network interface of the VM.<\/li>\n<\/ol>\n<p>The first pre-requisite requires you to upgrade the Security Center to Advanced Security that comes with <strong>Standard Tier<\/strong>. You can upgrade from any of the advanced features. The portal will automatically prompt you to upgrade as shown below:<\/p>\n<img src=\"\/images\/15212356695aac36d55f4be.png\" alt=\"Advanced Security in Security Center\">\n<h3>How to Access and Configure it<\/h3>\n<p>To configure this go to Azure <strong>Security Center<\/strong>. Within Security Center go to the &quot;Advanced Cloud Defense&quot; category and then click on &quot;Just in time VM access&quot; link as shown below:<\/p>\n<img src=\"\/images\/15212354315aac35e7b2c2d.png\" alt=\"JIT in Security Center\">\n<p>Next follow the below steps to enable JIT on a VM:<\/p>\n<ol>\n<li>Ensure that you are in the JIT section of Security Center<\/li>\n<li>Go to the &quot;Recommended&quot; tab. This will show you all the VMs in your environment. <\/li>\n<li>Click on the VM for which you want to enable Just in Time access. You can select multiple VMs here.<\/li>\n<li>Click on the &quot;Enable JIT on x VMs&quot; button<\/li>\n<\/ol>\n<img src=\"\/images\/15212369445aac3bd0c8b26.png\" alt=\"Enabling JIT\">\n<p>You will be presented with various settings for enabling JIT. These settings can be configured as:<\/p>\n<ol>\n<li>By default, various common ports are configured for JIT access with 3 hours time range. E.g. 3389 for RDP. Click on any of the default ports to tweak the settings.<\/li>\n<li>You can add more ports and protocols by clicking on the &quot;Add&quot; button at the top.<\/li>\n<li>Tweak the settings on the new blade that opens up.<\/li>\n<li>Click on &quot;Save&quot; to save your settings.<\/li>\n<\/ol>\n<img src=\"\/images\/15212369535aac3bd974b55.png\" alt=\"Settings while enabling JIT\">\n<p>That's all there is to it. Once JIT is configured you can view the VM in the &quot;Configured&quot; tab.<\/p>\n<h3>Requesting access and activity log in JIT<\/h3>\n<p>You can request access and perform various other management operations by following below steps:<\/p>\n<ol>\n<li>Once the JIT is configured, the VM will show up in the &quot;Configured&quot; tab as shown below. <\/li>\n<li>Click on the VM that you want to manage or request access to. <\/li>\n<li>As soon as you click, &quot;Request access&quot; button will start showing. You can click the button and it will ask for the number of hours that you need the access and the corresponding ports on which you need the access. Please note that only ports configured earlier can be granted access.<\/li>\n<li>Click on the ellipse i.e. 3 dots in front of the VM record and you will see various options. Using these options you can view Properties. You can view the Activity log for previous requests and any attempts on attack. You can also Edit or Remove the access.<\/li>\n<\/ol>\n<img src=\"\/images\/15212369585aac3bde79755.png\" alt=\"Requesting access and activity log in JIT\">\n<h3>Adding non-Azure computers<\/h3>\n<p>You can add non-Azure computers for an extra fee per Node. Cost is calculated based on 15 USD\/Node\/Month. Resources that count as a node are VMs and computers. The selected security tier will be applied to current and new resources. For more information, visit <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/security-center\/security-center-pricing\" target=\"_blank\">Microsoft Security Center's Standard tier for enhanced security<\/a> information page.<\/p>\n<p>Ensure that you have onboarded the non-Azure computers to a linked Azure Log Analytics workspace. This is required in order to onboard non-Azure computers to Security Center.<\/p>",
			"addpost": "addpost",
			"dated": "Jan 10, 2018",
			"slug": "demystifying-azure-security-just-in-time-vm-access",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p><strong>Just in time VM access<\/strong> is a feature under <strong>Azure Security Center<\/strong>. In simple terms it allows you to control access to a VM. When you enable JIT, all access is locked down on the VM on all ports. This is done via Network Security Group (NSG) rules. The access is gra...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Troubleshooting Azure Site Recovery (ASR) - Data Replication Initiation Issues - Part 2",
			"postDate": "04-01-2018",
			"tags": [
				"azure",
				"azuresiterecovery",
				"microsoft",
				"microsoftazure",
				"troubleshooting"
			],
			"category": "Azure",
			"body": "<p>This is the second part of troubleshooting Azure Site Recovery (ASR) Data replication issues. Part 1 is located here:  <a href=\"http:\/\/harvestingclouds.com\/post\/troubleshooting-azure-site-recovery-asr-data-replication-not-working\/\" target=\"_blank\">Troubleshooting Azure Site Recovery (ASR) - Data Replication Not Working<\/a><\/p>\n<p>Go through the part 1 before this blog as that talks about the location of logs and various preliminary steps. This blog talks about the issue where you are not even able to enable Data Replication for a server. <\/p>\n<h3>Preliminary Checks<\/h3>\n<p>Perform the following basic checks related to connectivity:<\/p>\n<ul>\n<li>Ensure that the ASR management server has connectivity with Azure.<\/li>\n<li>Ensure connectivity between the management server (process server) and the source machine which you are trying to replicate. Ensure that the source machine is accessible from the process server.\n<ul>\n<li>You will also need to enable and allow \u201cFile and Printer Sharing\u201d on the source machine in the Windows Firewall. <\/li>\n<\/ul><\/li>\n<li>Ensure that the account that you use for enabling the protection has administrator rights on the source machine. This is needed for installation of the Mobility services agent on the source machine.<\/li>\n<li>Also allow Windows Management Instrumentation (WMI) in the Windows Firewall, if not already.<\/li>\n<li>Disable remote User Account Control (UAC) if you are using local administrator account to install the mobility service.<\/li>\n<\/ul>\n<h3>Checking Services<\/h3>\n<p>Also, check whether the following services are running and configured correctly on the source machine:<\/p>\n<ol>\n<li>If <strong>Volume Shadow Copy(VSS)<\/strong> service Startup Type is set to Disabled, change it to Automatic.<\/li>\n<li>If <strong>COM+ System Application(COMSysApp)<\/strong> service Startup Type is to Disabled, change it to Automatic.<\/li>\n<li>If the Microsoft <strong>Distributed Transaction Coordinator Service (MSDTC)<\/strong> Startup Type is set to Disabled, change it to Automatic.<\/li>\n<li>If the service Startup Types were already set to Automatic, check if COM+ enumeration succeeds. a) You check COM+ enumeration by Component Services (comexp.msc) b) Browse to Component Service -&gt; Computers -&gt; My Computer -&gt; COM+ Application. You should be able to expand the System Application node and see the contents under that node. c) Ensure that Volume Shadow Copy Service is listed under Component Service -&gt; Computers -&gt; My Computer -&gt; DCOM config<\/li>\n<\/ol>\n<h3>Alternate Option<\/h3>\n<p>If for any reason you can't enable any of the above steps, e.g. if you can't provide admin access to the service account on the source machine or disable remote UAC, then you have an alternative option. You can install the Mobility services agent on the source machine prior to enabling the protection. You will still need the services to be configured appropriately but will not need admin access while enabling the protection. To install the mobility services agent, you have various options:<\/p>\n<ul>\n<li><a href=\"vmware-azure-mobility-install-configuration-mgr.md\">Install using software deployment tools like System Center Configuration Manager<\/a><\/li>\n<li><a href=\"vmware-azure-mobility-deploy-automation-dsc.md\">Install with Azure Automation and Desired State Configuration (Automation DSC)<\/a><\/li>\n<li><a href=\"vmware-azure-install-mobility-service.md#install-mobility-service-manually-by-using-the-gui\">Install manually from the UI<\/a><\/li>\n<li><a href=\"vmware-azure-install-mobility-service.md#install-mobility-service-manually-at-a-command-prompt\">Install manually from a command prompt<\/a><\/li>\n<li><a href=\"vmware-azure-install-mobility-service.md#install-mobility-service-by-push-installation-from-azure-site-recovery\">Install using the Site Recovery push installation<\/a><\/li>\n<\/ul>\n<p>All these options are described in details here: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/site-recovery\/vmware-azure-install-mobility-service\" target=\"_blank\">Install the Mobility service<\/a><\/p>\n<h3>Next Steps<\/h3>\n<p>Restart the job after ensuring all the pre-requisites as described in previous sections. If you are still facing issues, revisit the Part 1 of the troubleshooting series as mentioned at the beginning of this blog. Let us know in comments below if the issue persists. <\/p>",
			"addpost": "addpost",
			"dated": "Jan 08, 2018",
			"slug": "troubleshooting-azure-site-recovery-asr-data-replication-initiation-issues-part-2",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>This is the second part of troubleshooting Azure Site Recovery (ASR) Data replication issues. Part 1 is located here:  <a href=\"http:\/\/harvestingclouds.com\/post\/troubleshooting-azure-site-recovery-asr-data-replication-not-working\/\" target=\"_blank\">Troubleshooting Azure Site Recovery (ASR) - Data ...<\/a><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Creating a Custom Policy - Part 2 - Understanding the Policy Structure",
			"postDate": "08-01-2018",
			"tags": [
				"azue",
				"azuresecurity",
				"custom",
				"custompolicy",
				"microsoft",
				"microsoftazure",
				"policy",
				"security"
			],
			"category": "Azure Security",
			"body": "<h3>Structure of a Policy JSON Definition<\/h3>\n<p>Policy definitions are written in JSON. The policy definition contains elements for:<\/p>\n<ul>\n<li>mode<\/li>\n<li>parameters<\/li>\n<li>display name<\/li>\n<li>description<\/li>\n<li>policy rule\n<ul>\n<li>logical evaluation<\/li>\n<li>effect<\/li>\n<\/ul><\/li>\n<\/ul>\n<p>Let's understand these components with the help of an example. Earlier we saw how to find the definition of existing policies. One such policy is: &quot;Allowed locations&quot;. This policy restricts the location in Azure where resources can be deployed. The definition for the policy looks like below:<\/p>\n<pre><code>{\n  \"properties\": {\n    \"mode\": \"all\",\n    \"parameters\": {\n      \"allowedLocations\": {\n        \"type\": \"array\",\n        \"metadata\": {\n          \"description\": \"The list of locations that can be specified when deploying resources\",\n          \"strongType\": \"location\",\n          \"displayName\": \"Allowed locations\"\n        }\n      }\n    },\n    \"displayName\": \"Allowed locations\",\n    \"description\": \"This policy enables you to restrict the locations your organization can specify when deploying resources.\",\n    \"policyRule\": {\n      \"if\": {\n        \"not\": {\n          \"field\": \"location\",\n          \"in\": \"[parameters('allowedLocations')]\"\n        }\n      },\n      \"then\": {\n        \"effect\": \"deny\"\n      }\n    }\n  }\n}<\/code><\/pre>\n<ol>\n<li><strong>Mode<\/strong> tells you the type of resources for which the policy will be applied. Allowed values are &quot;All&quot; (where all Resource Groups and Resources are evaluated) and &quot;indexed&quot; (where policy is evaluated only for resources which support tags and location)<\/li>\n<li><strong>Parameters<\/strong> are used for providing inputs to the policy. They can be reused at multiple locations within the policy. You can refer to a parameter as: &quot;<strong><em>[parameters('allowedLocations')]<\/em><\/strong>&quot;<\/li>\n<li><strong>Display Name<\/strong> is used to show the policy in the portal or programmatically.<\/li>\n<li>A <strong>description<\/strong> is used to provide details for the policy.<\/li>\n<li><strong>Policy Rule<\/strong> is which defines the policies. This is the section where the restrictions are defined in a Poicy Definition. To understand a policy you need to focus most of your efforts on this section. Every Policy rule has two key sections defined under &quot;if-then&quot; blocks. \n<ol>\n<li><strong>Logical Evaluation<\/strong> is defined under the &quot;if&quot; block. It defines the condition which is evaluated to determine the policy should be applied or not.<\/li>\n<li><strong>Effect<\/strong> is defined in the &quot;then&quot; block. This defines what will happen if the condition is met. <\/li>\n<\/ol><\/li>\n<\/ol>\n<h3>Policy Rules<\/h3>\n<p>Let's look at the policy rules in more details. The general syntax of the &quot;if-then&quot; block is as shown below:<\/p>\n<pre><code>{\n  \"if\": {\n    &lt;condition&gt; | &lt;logical operator&gt;\n  },\n  \"then\": {\n    \"effect\": \"deny | audit | append\"\n  }\n}<\/code><\/pre>\n<p>Supported logical operators are:<\/p>\n<ul>\n<li><code>\"not\": {condition  or operator}<\/code><\/li>\n<li><code>\"allOf\": [{condition or operator},{condition or operator}]<\/code><\/li>\n<li><code>\"anyOf\": [{condition or operator},{condition or operator}]<\/code><\/li>\n<\/ul>\n<p><strong>Not<\/strong> operator means that the opposit of the condition should be true for the policy to be applied. <strong>AllOf<\/strong> requires all the conditions defined to be true at the same time. <strong>AnyOf<\/strong> requires any one of the conditions to be true for the policy to be applied.<\/p>\n<p>In the previous example, the policy rule section is as shown below:<\/p>\n<pre><code>    \"policyRule\": {\n      \"if\": {\n        \"not\": {\n          \"field\": \"location\",\n          \"in\": \"[parameters('allowedLocations')]\"\n        }\n      },\n      \"then\": {\n        \"effect\": \"deny\"\n      }\n    }<\/code><\/pre>\n<p>In simple terms, the rule above says that if the location is not in the list of allowed locations, defined by the parameter <strong><em>allowedLocations<\/em><\/strong>, then the effect will be <strong><em>deny<\/em><\/strong> i.e. the resource creation will not be allowed.<\/p>\n<p>You can find the complete list of operators and conditional constructs here: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/azure-policy\/policy-definition\" target=\"_blank\">Azure Policy definition structure\n<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Dec 30, 2017",
			"slug": "demystifying-azure-security-creating-a-custom-policy-part-2-understanding-the-policy-structure",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<h3>Structure of a Policy JSON Definition<\/h3>\n<p>Policy definitions are written in JSON. The policy definition contains elements for:<\/p>\n<ul><li>mode<\/li>\n<li>parameters<\/li>\n<li>display name<\/li>\n<li>description<\/li>\n<li>policy rule\n<ul><li>logical evaluation<\/li>\n<li>effect<\/li>\n<\/ul><\/li>\n<\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Creating a Custom Policy - Part 1 - Viewing Definition of an existing Policy",
			"postDate": "07-01-2018",
			"tags": [
				"azure",
				"azuresecurity",
				"custom",
				"custompolicy",
				"microsoft",
				"microsoftazure",
				"policies",
				"policy",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>Creating a custom policy to enforce your custom requirements in the Azure environment is very easy. This provides you with granular control over what a policy should perform and what should be allowed and what should be denied.<\/p>\n<p>Policies are writing in JSON format. It is always good to base your custom policy definition on one of the built-in policies if one exists which is closer to what you are trying to do. <\/p>\n<h3>Viewing Definition of Existing Policies<\/h3>\n<p>You have two options to view the definition of an existing policy.<\/p>\n<ol>\n<li>Using PowerShell<\/li>\n<li>Using Azure Portal<\/li>\n<\/ol>\n<h3>Using PowerShell<\/h3>\n<p><strong>Using PowerShell<\/strong> run the below cmdlet to view all the policies in your environment.<\/p>\n<pre><code>Get-AzureRmPolicyDefinition<\/code><\/pre>\n<p>Then go through the list and find the policy that you want to use. Find the ResourceId of that policy and then run the below cmdlet to fetch the details of that policy.<\/p>\n<pre><code>Get-AzureRmPolicyDefinition -Id \"\/providers\/Microsoft.Authorization\/policyDefinitions\/e56962a6-4747-49cd-b67b-bf8b01975c4c\"<\/code><\/pre>\n<h3>Using Azure Portal<\/h3>\n<p><strong>Using Azure Portal<\/strong> to view the Definition is also very easy. Simply navigate to:<\/p>\n<ul>\n<li>the Subscription section in the Azure Portal<\/li>\n<li>Select your subscription<\/li>\n<li>Click on &quot;Policies&quot; under settings. <\/li>\n<li>Within the Policies blade, click on &quot;Definitions&quot;<\/li>\n<\/ul>\n<p>Within the Policy Definitions, select the Policy from the list for which you want to view the definition. Click on the 3 dots to the right. From the context menu select &quot;View definition&quot;.<\/p>\n<img src=\"\/images\/15218187805ab51c9c095ce.png\" alt=\"Policy Definitions\">\n<p>This will open up another blade. Click on the &quot;Json&quot; tab at the top and this will show you the rule part of the definition of the policy. the rule is the most important part of the policy. We will look at other components of the policies later as well.<\/p>\n<img src=\"\/images\/15218187845ab51ca0c313d.png\" alt=\"Policy Definition Details\">\n<p>E.g. The JSON for &quot;Allowed storage account SKUs&quot; built-in policy looks as shown below.<\/p>\n<pre><code>{\n  \"if\": {\n    \"allOf\": [\n      {\n        \"field\": \"type\",\n        \"equals\": \"Microsoft.Storage\/storageAccounts\"\n      },\n      {\n        \"not\": {\n          \"field\": \"Microsoft.Storage\/storageAccounts\/sku.name\",\n          \"in\": \"[parameters('listOfAllowedSKUs')]\"\n        }\n      }\n    ]\n  },\n  \"then\": {\n    \"effect\": \"Deny\"\n  }\n}<\/code><\/pre>\n<p>Next, we will dissect and understand the Policy structure in details.<\/p>",
			"addpost": "addpost",
			"dated": "Dec 29, 2017",
			"slug": "demystifying-azure-security-creating-a-custom-policy-part-1-viewing-definition-of-an-existing-policy",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>Creating a custom policy to enforce your custom requirements in the Azure environment is very easy. This provides you with granular control over what a policy should perform and what should be allowed and what should be denied.<\/p>\n<p>Policies are writing in JSON format. It is always good to base...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Azure Policies - 2 - Assigning a Policy",
			"postDate": "27-12-2017",
			"tags": [
				"azure",
				"azurepolicies",
				"azuresecurity",
				"microsoft",
				"microsoftazure",
				"policies",
				"policy",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>In this post, we will view the policies in action. Policy assignment is very easy on the Azure Portal. We will be assigning a built-in policy at a subscription scope.<\/p>\n<h3>Accessing the Policies in the Azure portal<\/h3>\n<p>Begin by accessing the Policies in the Azure Portal. To do this follow the below steps:<\/p>\n<ol>\n<li>Navigate to <strong>Subscriptions<\/strong> (via All Services or the navigation sidebar)<\/li>\n<li>Select the subscription for which you want to view the Policies<\/li>\n<li>Scroll down to the &quot;Settings&quot; category in the menu of the subscription<\/li>\n<li>Click on &quot;<strong>Policies<\/strong>&quot; to access the policies in Azure<\/li>\n<\/ol>\n<h3>Assigning the Built-in Policies<\/h3>\n<p>To perform the assignment, click on &quot;Assign Policy&quot; from either Compliance or the Assignment tabs.<\/p>\n<img src=\"\/images\/15217866825ab49f3a81d6a.png\" alt=\"Assign Policy\">\n<p>In the new blade, provide the value for the:<\/p>\n<ol>\n<li>Policy to be applied<\/li>\n<li>Name and Description of the Policy. The name will be the name of the policy selected by default. As a best practice ensure to provide the detailed description.<\/li>\n<li>Assigned by will be your name by default<\/li>\n<li>You can select the pricing tier between Free and Standard. You will get the compliance evaluation of the resources in your environment against the policy with the Standard pricing tier<\/li>\n<li>Scope for the Policy<\/li>\n<li>Exclusions from the Policy<\/li>\n<li>Any additional parameters related to the policy<\/li>\n<\/ol>\n<p>To select from the policies, click on the blue button with an ellipse (i.e. 3 dots) in front of the Policy box. This will popup another blade for all the Policy definitions.<\/p>\n<img src=\"\/images\/15217894075ab4a9df6a23e.png\" alt=\"Assign Policy Blade details\">\n<p>Scroll through various Built-in policies. Once we define any custom user-defined policies, they will also be displayed here. Select the policy &quot;Allowed locations&quot; from the list of the policies as an example. Click on &quot;Select&quot; once done.<\/p>\n<img src=\"\/images\/15217894445ab4aa0494a0d.png\" alt=\"Selecting Policy\">\n<p>Select the Scope for applying the policy. You can leave the default to the Subscription level. Or you can click on the blue button in front of scope text box and select the Resource Groups under the subscription on which you want to apply the policy.<\/p>\n<p>You can also select the Exclusions if you require. These Resource Group or resources will not be evaluated against the policy.<\/p>\n<img src=\"\/images\/15217894615ab4aa15470ec.png\" alt=\"Selecting Scope\">\n<p>Lastly, you will have additional parameters for the policy related values. These parameters will vary and will depend on the policy you have selected. E.g. For &quot;Allowed locations&quot; policy, you will see the parameter for allowed locations. Select &quot;East US&quot; and &quot;East US 2&quot; for the locations as an example.<\/p>\n<img src=\"\/images\/15217894765ab4aa248f15f.png\" alt=\"Providing value for Policy related Parameters\">\n<p>Once you complete the configurations, click on the &quot;<strong>Assign<\/strong>&quot; button to apply the policy<\/p>\n<h3>Validating the Policy<\/h3>\n<p>To validate the policy for &quot;Allowed locations&quot; follow these steps:<\/p>\n<ol>\n<li>Try to deploy a Storage Account or a VM or any other resource in a location that is NOT allowed. E.g. try deploying a storage account in the &quot;West US&quot; location. This should fail with the validation error stating the policy id.<\/li>\n<li>Perform the same deployment but to one of the allowed location. E.g. try deploying a storage account in the &quot;East US&quot; location. This should succeed without any erros. <\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "Dec 27, 2017",
			"slug": "demystifying-azure-security-azure-policies-2-assigning-a-policy",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>In this post, we will view the policies in action. Policy assignment is very easy on the Azure Portal. We will be assigning a built-in policy at a subscription scope.<\/p>\n<h3>Accessing the Policies in the Azure portal<\/h3>\n<p>Begin by accessing the Policies in the Azure Portal. To do this follow ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - RBAC Roles",
			"postDate": "25-01-2018",
			"tags": [
				"azure",
				"azuresecurity",
				"microsoft",
				"microsoftazure",
				"roles",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>Azure <strong>RBAC Roles<\/strong> are a great way to securely provide access to users with limited actions in Azure. The focus is to provide only the access necessary so that an account in your organization doesn't have more access than needed. In case the account gets compromised, this will ensure that does not leave your environment too much vulnerable. This means that if you grant an employee access to manage Virtual Machines in your environment, that employee can't alter the virtual networks by mistake or have any access to delete the storage accounts in the environment. <\/p>\n<h3>Roles Hierarchy<\/h3>\n<p>The RBAC Roles can be assigned at the following three levels in the order of hierarchy:<\/p>\n<ol>\n<li><strong>Subscription<\/strong><\/li>\n<li><strong>Resource Group<\/strong><\/li>\n<li><strong>Resource<\/strong><\/li>\n<\/ol>\n<p>Any Resource in Azure, must belong to a Resource Group (under the ARM model). And every Resource Group in Azure must belong to a single subscription.<\/p>\n<p>If a person is assigned scope at Subscription level then he\/she will get access to all Resource Groups and to all resources within those resource groups. Next, if a person is assigned access at a Resource Group level then they will automatically get access to all the Resources within that Resource Group. Finally, if a person is provided access only to an individual Resource then they will get access only to that Resource.<\/p>\n<h3>Built-in Roles<\/h3>\n<p>There are various inbuilt roles for this purpose like:<\/p>\n<ol>\n<li>Contributor - create and manage but can't grant access to others<\/li>\n<li>Reader - can only view<\/li>\n<li>Owner - full access<\/li>\n<\/ol>\n<p>The complete list of Built-in roles can be viewed here: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/role-based-access-built-in-roles\" target=\"_blank\">Built-in roles for Azure role-based access control<\/a><\/p>\n<h3>Viewing and Adding Access<\/h3>\n<p>To view or Add access, first decide the scope where you want to provide the access. Select the scope, e.g. a Resource Group on which you want to view existing access and grant the access to someone. Then follow these steps (as per the image below):<\/p>\n<ol>\n<li>Click on &quot;Access Control (IAM)&quot; to access the RBAC access control<\/li>\n<li>View the access in the center area. Scroll down to view all type of roles and Users, Groups or Apps with the access<\/li>\n<li>Click on &quot;+Add&quot; button, as shown below, to add access to a new user, group or application<\/li>\n<li>In the new popup blade, select the Role (e.g. Contributor), Assignment scope and name\/email address of the user or app to whom you want to grant the access. You can select multiple users\/apps as well.<\/li>\n<\/ol>\n<img src=\"\/images\/15216952115ab339eba24e0.png\" alt=\"Viewing and Adding RBAC Access\">\n<p>Within each subscription, you can grant up to 2000 role assignments.<\/p>\n<p>Learn about creating Custom RBAC Roles here: <a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-custom-rbac-roles\/\" target=\"_blank\">Demystifying Azure Security - Custom RBAC Roles<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Dec 20, 2017",
			"slug": "demystifying-azure-security-rbac-roles",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>Azure <strong>RBAC Roles<\/strong> are a great way to securely provide access to users with limited actions in Azure. The focus is to provide only the access necessary so that an account in your organization doesn't have more access than needed. In case the account gets compromised, this will ensu...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Azure Policies - 1 - Basics",
			"postDate": "10-12-2017",
			"tags": [
				"azure",
				"azurepolicies",
				"azuresecurity",
				"microsoft",
				"microsoftazure",
				"policies",
				"policy",
				"security"
			],
			"category": "Azure Security",
			"body": "<p><strong>Azure Policies<\/strong> are a great tool to make access to Azure more secure by prohibiting certain operations and enforcing various rules in your environment. The policies make your environment compliant and ensure that you adhere to the service level agreements and standards set within your organization. If the end user tries to deploy a resource violating the policies then the deployment fails at the validation step ensuring that your environment remains compliant. If you already have resources which are not compliant then you will be able to review those and take necessary actions.<\/p>\n<h3>Examples of Azure Policies<\/h3>\n<p>Here are a few of most commonly used policies:<\/p>\n<ol>\n<li><strong>Restricting the Allowed locations<\/strong> where a resource can be deployed. You can restrict the allowed locations where resources can be deployed to the ones that are closer to your geographic location. This also ensures that the users within your organization can't deploy resources to noncompliant locations. <\/li>\n<li><strong>Enforcing a Tag<\/strong> and it's Value. E.g. You have a Resource Group for the Finance department. You want to ensure that any resource deployed in that Resource Group should be tagged with a &quot;CostCenter&quot; and a specific value for that cost center. You can enforce this using a Policy.<\/li>\n<li><strong>Not Allowed Resource Types<\/strong>. Using this policy you can prohibit the deployment of certain resource types in your environment. <\/li>\n<\/ol>\n<p>There are various other built-in Policies. You can also create your own policies which we will discuss in more detail later.<\/p>\n<h3>Scope where a Policy is Assigned<\/h3>\n<p>A Policy can be assigned at the below levels:<\/p>\n<ol>\n<li><strong>Subscription<\/strong> level - Applied to all Resource Groups and Resources within the subscription<\/li>\n<li><strong>Resource Group<\/strong> level - Applied only to the Resources within the selected Resource Groups<\/li>\n<\/ol>\n<p><strong>Exclusions<\/strong>: In addition to the assignment scope, you can exclude certain Resource Groups or individual Resources from the Policy assignments. The Policy will be applied to all the Resources in the scope except the ones excluded by defining the Exclusions. <\/p>\n<h3>How are Policies different from Role-Based Access Control (RBAC)<\/h3>\n<p>Through <strong>Role-Based Access Control (RBAC)<\/strong>, you focus on the role and scope of access that a user can have in Azure. You provide the access control (IAM) within Azure for Subscription, Resource Group or an individual Resource. You define a role for the user\/app\/group like Contributor, Reader etc.  You can use the built-in roles or can define custom roles.<\/p>\n<p>With <strong>Policies<\/strong>, you focus on the properties of the resources with which the user can work at the defined scope. You define what properties are allowed and what is restricted. You can use the built-in policies or can define your own.<\/p>\n<p>E.g. Through RBAC you define that a particular user has Reader role at the subscription and Contributor role at a particular Resource Group. This will mean that the user can view all the resources in the subscription but can only modify or create resources in the Resource Group where he has Contributor access.<\/p>\n<p>Now if you define a policy which restricts the type of resources deployed ( as discussed in the examples above), the user will not be able to deploy the restricted resource types, even though he has contributor access to a Resource Group.<\/p>\n<h3>Accessing Policies in the Azure portal<\/h3>\n<p>To access the Policies in the Azure portal:<\/p>\n<ol>\n<li>Navigate to <strong>Subscriptions<\/strong> (via All Services or the navigation sidebar)<\/li>\n<li>Select the subscription for which you want to view the Policies<\/li>\n<li>Scroll down to the &quot;Settings&quot; category in the menu of the subscription<\/li>\n<li>Click on &quot;<strong>Policies<\/strong>&quot; to access the policies in Azure<\/li>\n<\/ol>\n<img src=\"\/images\/15217849365ab4986888c88.png\" alt=\"Policies in Azure Portal\">\n<p>We will be discussing more about the Azure Policies in later blogs.<\/p>",
			"addpost": "addpost",
			"dated": "Dec 10, 2017",
			"slug": "demystifying-azure-security-azure-policies-1-basics",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p><strong>Azure Policies<\/strong> are a great tool to make access to Azure more secure by prohibiting certain operations and enforcing various rules in your environment. The policies make your environment compliant and ensure that you adhere to the service level agreements and standards set within ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Great Way to learn - 2018 Microsoft Azure Community Study Groups",
			"postDate": "05-12-2017",
			"tags": [
				"azure",
				"azureresourcemanager",
				"certifications",
				"mcsa",
				"mcsd",
				"mcse",
				"microsoft",
				"microsoftazure"
			],
			"category": "Azure",
			"body": "<p>How many times have you started preparation for any Azure certification and have left it midway because of any reason? We all need a little extra nudge. Microsoft Azure Community Study Groups is just the thing you need to create and fulfill your next year resolutions. <\/p>\n<p>Here are the registration links, provided &quot;as is&quot;:<\/p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>Exam<\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><b>Registration Link<\/b><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p><b>Dates<\/b><\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>70-532: Developing Microsoft Azure Solutions<\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><a href=\"https:\/\/aka.ms\/532asg\">https:\/\/aka.ms\/532asg<\/a><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p>March 23 \u2013 May 24, 2018<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>70-533: Implementing Microsoft Azure Infrastructure Solutions<\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><a href=\"https:\/\/aka.ms\/533asg\">https:\/\/aka.ms\/533asg<\/a><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p>January 12 \u2013 April 13, 2018<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>70-535: Architecting Microsoft Azure Solutions <\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><a href=\"https:\/\/aka.ms\/535asg\">https:\/\/aka.ms\/535asg<\/a><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p>January 12 \u2013 May 24, 2018<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>70-483: Programing in C#<\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><a href=\"https:\/\/aka.ms\/483asg\">https:\/\/aka.ms\/483asg<\/a><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p>January 12 \u2013 March 2, 2018<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>70-486: Developing ASP.NET MVC Web Applications<\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><a href=\"https:\/\/aka.ms\/486asg\">https:\/\/aka.ms\/486asg<\/a><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p>January 12 \u2013 March 23, 2018<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"461\" valign=\"top\">\n<p><b>70-487: Developing Microsoft Azure and Web Services<\/b><\/p>\n<\/td>\n<td width=\"158\" valign=\"top\">\n<p><a href=\"https:\/\/aka.ms\/487asg\">https:\/\/aka.ms\/487asg<\/a><\/p>\n<\/td>\n<td width=\"208\" valign=\"top\">\n<p>March 9 \u2013 May 11, 2018<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>You can access the main blog from here:\n<a href=\"https:\/\/blogs.technet.microsoft.com\/uspartner_ts2team\/2017\/12\/04\/2018-microsoft-azure-community-study-groups\/\" target=\"_blank\">2018 Microsoft Azure Community Study Groups<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Dec 05, 2017",
			"slug": "great-way-to-learn-2018-microsoft-azure-community-study-groups",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>How many times have you started preparation for any Azure certification and have left it midway because of any reason? We all need a little extra nudge. Microsoft Azure Community Study Groups is just the thing you need to create and fulfill your next year resolutions. <\/p>\n<p>Here are the registr...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Introducing the Harvesting Clouds YouTube channel",
			"postDate": "29-11-2017",
			"tags": [
				"azure",
				"azureautomation",
				"azureresourcemanager",
				"microsoft",
				"microsoftazure"
			],
			"category": "Azure",
			"body": "<p>I am happy to introduce the YouTube channel for Harvesting Clouds. The channel can be accessed here: <a href=\"https:\/\/www.youtube.com\/channel\/UCIfsXMJ8HMJkx1lMP-lngzw\" target=\"_blank\">Harvesting Clouds YouTube Channel<\/a><\/p>\n<p>Do <strong>Subscribe<\/strong> to the channel to get notified of any new content on the channel. <strong>Like<\/strong> the content if you learned something new or got new perspective on the things you knew.<\/p>\n<p>Check out the author introduction video below:<\/p>\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/HxudnbeFofk?rel=0\" frameborder=\"0\" allowfullscreen><\/iframe>\n<p>The managed and ordered content via <strong>playlists<\/strong> can be found here: <a href=\"https:\/\/www.youtube.com\/channel\/UCIfsXMJ8HMJkx1lMP-lngzw\/playlists\" target=\"_blank\">Playlists - Harvesting Clouds<\/a><\/p>\n<p><strong>All videos<\/strong> on the channel can be found here: <a href=\"https:\/\/www.youtube.com\/channel\/UCIfsXMJ8HMJkx1lMP-lngzw\/videos\" target=\"_blank\">All Videos - Harvesting Clouds<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Nov 29, 2017",
			"slug": "introducing-the-harvesting-clouds-youtube-channel",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>I am happy to introduce the YouTube channel for Harvesting Clouds. The channel can be accessed here: <a href=\"https:\/\/www.youtube.com\/channel\/UCIfsXMJ8HMJkx1lMP-lngzw\" target=\"_blank\">Harvesting Clouds YouTube Channel<\/a><\/p>\n<p>Do <strong>Subscribe<\/strong> to the channel to get notified of any ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Video - Azure Automation - Introduction",
			"postDate": "29-11-2017",
			"tags": [
				"automation",
				"azure",
				"azureautomation",
				"microsoft",
				"microsoftazure",
				"powershell"
			],
			"category": "Azure",
			"body": "<p>This is the first video in the series of Azure Automation. This video provides the introduction and talks about the various theoretical concepts about Azure Automation<\/p>\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/8tLdzsg6YVk?rel=0\" frameborder=\"0\" allowfullscreen><\/iframe>\n<p>You can view and subscribe to the YouTube channel here: <a href=\"https:\/\/www.youtube.com\/channel\/UCIfsXMJ8HMJkx1lMP-lngzw\" target=\"_blank\">HarvestingClouds on YouTube<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Nov 29, 2017",
			"slug": "video-azure-automation-introduction",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>This is the first video in the series of Azure Automation. This video provides the introduction and talks about the various theoretical concepts about Azure Automation<\/p>\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/8tLdzsg6YVk?rel=0\" frameborder=\"0\" allowfullscreen><\/iframe>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Introducing Azure Reserved VM Instances (RIs)",
			"postDate": "15-11-2017",
			"tags": [
				"azure",
				"azureresourcemanager",
				"reservedinstances",
				"virtualmachine"
			],
			"category": "Azure",
			"body": "<p>Azure Reserved VM Instances provides an easy option to save cost for predictive workloads. You commit to either one or three year options and pay the complete cost with discounts upfront. <\/p>\n<h2>When should you use this<\/h2>\n<p>If you know that your workload will be up and running then Azure Reserved VM instances are for you.\nThe savings can be up to 72% with the use of Reserved VM instances. If your VM is not going to be up and running for most time and you have the option to automate and shut down the Virtual Machine then you don't need Reserved VM Instances.<\/p>\n<h2>How does the cost savings look like<\/h2>\n<p>The cost savings can be very significant especially when clubbed with Azure Hybrid Use Benefit. The below graphic is based on a Dv2 three-year RI with Azure Hybrid Benefit.<\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/15120755665a20712ed8b1b.png\" alt=\"Potential Savings with Azure Reserved VM Instances\" \/><\/p>\n<h2>Other aspects<\/h2>\n<p>Other aspects of Azure Reserved VM Instances that you need to know are:<\/p>\n<ul>\n<li>You can assign RI benefit at either the enrollment level or at the subscription level<\/li>\n<li>The assignment is as easy as providing the Region, VM Series\/size and providing the term. The two terms offered today are 1 year and 3 years<\/li>\n<li>You can exchange to a new instance and location as you need in the future<\/li>\n<li>You also have the option to cancel anytime directly with Microsoft for a pro-rated refund<\/li>\n<\/ul>\n<p>Reference: <a href=\"https:\/\/azure.microsoft.com\/en-ca\/pricing\/reserved-vm-instances\/\" target=\"_blank\">Azure Reserved VM Instances<\/a><\/p>",
			"savedraft": "savedraft",
			"dated": "Nov 12, 2017",
			"slug": "introducing-azure-reserved-vm-instances-ris",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Azure Reserved VM Instances provides an easy option to save cost for predictive workloads. You commit to either one or three year options and pay the complete cost with discounts upfront. <\/p>\n<h2>When should you use this<\/h2>\n<p>If you know that your workload will be up and running then Azure Re...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Why you should be using Azure Managed Disks now?",
			"postDate": "05-11-2017",
			"tags": [
				"azure",
				"azureresourcemanager",
				"manageddisks",
				"storage",
				"virtualmachine",
				"vm"
			],
			"category": "Azure",
			"body": "<p>Azure Managed Disks bring lots of advantages and benefits to the table when compared to Azure Storage Account based VM disks. The first thing to note is that these are only related to VM disks and not general blob storage. In this post, lets take a look at what all benefits you get when you create your virtual machine with a managed disk instead of a storage account based disks.<\/p>\n<h3>More Controlled Access Management<\/h3>\n<p>Let's assume a scenario where all the disks for the virtual machines in your environment belonged to a particular storage account. Let us say that there are VMs belonging to Finance as well as HR departments. Now if you want to give access to a VHD file of a VM belonging to HR department, you will provide the access to the storage account. This was the lowest level where you could provide the access. This inadvertently opened the access to the Finance VM's VHD files as well.<\/p>\n<p>Managed Disks are individual resources in Azure. If a VM has 1 OS disk and 2 data disks, all implemented as a managed disk, then you can even provide the access to one of the data disk and not provide access to any of the other disks.<\/p>\n<h3>No Storage account service limits<\/h3>\n<p>Earlier with storage accounts there were Service Limits related to IOPS at the storage account level. When the infrastructure grew and there comes a time the number of disks grew to a point that this service limit will be hit and this can affect your architecture. With managed disks, you are no longer limited by the storage account limits.<\/p>\n<h3>Ability to take Snapshot<\/h3>\n<p>Now with managed disks you have the capability to take snapshots on the fly. You can later restore from these snapshots as required. You can take these snapshots onto a different storage account.<\/p>\n<h3>Ability to Capture better images<\/h3>\n<p>The images that you capture on the Vms, which are created using managed disks, will not just include the OS disk, but will also include all the data disk.<\/p>\n<h3>Ability to convert a Standard disk to Premium disk and vice versa<\/h3>\n<p>Earlier if you wanted to convert a standard disk to a premium disk (or vice versa) you needed to create a new storage account and copy over the disk. Now with managed disks, this is as easy as shutting down the virtual machine and just changing a value in a drop down.<\/p>\n<h3>Other benefits<\/h3>\n<p>Other benefits include:<\/p>\n<ul>\n<li>Better reliability for Availability Sets<\/li>\n<li>Highly durable and available with design for 99.999% availability<\/li>\n<li>Better Azure Backup service support with the ability to create a backup job with time-based backups, easy VM restoration, and backup retention policies<\/li>\n<\/ul>\n<p>Reference: <\/p>\n<ul>\n<li><a href=\"https:\/\/azure.microsoft.com\/en-ca\/services\/managed-disks\/\" target=\"_blank\">Managed Disks product page<\/a><\/li>\n<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/virtual-machines\/windows\/managed-disks-overview\" target=\"_blank\">Managed Disks overview<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Nov 05, 2017",
			"slug": "why-you-should-be-using-azure-managed-disks-now",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Azure Managed Disks bring lots of advantages and benefits to the table when compared to Azure Storage Account based VM disks. The first thing to note is that these are only related to VM disks and not general blob storage. In this post, lets take a look at what all benefits you get when you creat...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Cloud Shell - Embedding Cloud Shell in your Websites",
			"postDate": "16-10-1985",
			"tags": [
				"azure",
				"bash",
				"cloud",
				"powershell",
				"shell"
			],
			"category": "Azure",
			"body": "<p>Embedding Azure Cloud Shell in your websites gives your visitors an option to directly interact with Azure, without even leaving your website. Your website may be talking about a code sample that your visitor may want to try in Azure. Instead of opening a new instance of Azure Portal, the visitors can try the command right from your site if you have embedded the cloud shell in your website.<\/p>\n<p>All you need is the embed code and you are all set. Just add this code to your site and then you will be able to launch the cloud shell right from there with just a click of a button.Behind the scene, this is nothing but hyperlinking to the URL: <a href=\"https:\/\/shell.azure.com\">https:\/\/shell.azure.com<\/a><\/p>\n<h3>Embed Code<\/h3>\n<p>The embed code is as follows if you are using Markdown<\/p>\n<pre><code>[![Launch Cloud Shell](https:\/\/shell.azure.com\/images\/launchcloudshell.png \"Launch Cloud Shell\")](https:\/\/shell.azure.com)<\/code><\/pre>\n<p>If you are building a website in HTML then the embed code will look like:<\/p>\n<pre><code>&lt;a style=\"cursor:pointer\" onclick='javascript:window.open(\"https:\/\/shell.azure.com\", \"_blank\", \"toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no\")'&gt;&lt;image src=\"https:\/\/shell.azure.com\/images\/launchcloudshell.png\" \/&gt;&lt;\/a&gt;<\/code><\/pre>\n<h3>Code in Action<\/h3>\n<p>Clicking on below image will open a popup. It will navigate you to the <a href=\"https:\/\/shell.azure.com\">https:\/\/shell.azure.com<\/a> URL within the popup. You can login to Azure and try any commands. I encourage to inspect the link below and compare with the above embed code.<\/p>\n<p><a style=\"cursor:pointer\" onclick='javascript:window.open(\"https:\/\/shell.azure.com\", \"_blank\", \"toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no\")'><image src=\"https:\/\/shell.azure.com\/images\/launchcloudshell.png\" \/><\/a><\/p>\n<h3>Choosing Shell Type<\/h3>\n<p>The above examples will open the most recently used cloud shell. If you want to encourage visitors to experience a specific cloud shell, then update the URL section above embed code. Update as below by adding the last part to the URLs:<\/p>\n<ul>\n<li>Bash Shell - <a href=\"https:\/\/shell.azure.com\/bash\">https:\/\/shell.azure.com\/bash<\/a><\/li>\n<li>PowerShell Shell - <a href=\"https:\/\/shell.azure.com\/powershell\">https:\/\/shell.azure.com\/powershell<\/a><\/li>\n<\/ul>\n<h3>Reference:<\/h3>\n<ul>\n<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/cloud-shell\/embed-cloud-shell\" target=\"_blank\">Embed Azure Cloud Shell<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Oct 16, 2017",
			"slug": "azure-cloud-shell-embedding-cloud-shell-in-your-websites",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Embedding Azure Cloud Shell in your websites gives your visitors an option to directly interact with Azure, without even leaving your website. Your website may be talking about a code sample that your visitor may want to try in Azure. Instead of opening a new instance of Azure Portal, the visitor...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Cloud Shell - Introduction",
			"postDate": "08-10-2017",
			"tags": [
				"automation",
				"azure",
				"azureautomation",
				"microsoft",
				"powershell",
				"shell"
			],
			"category": "Azure",
			"body": "<p><strong>Azure Cloud Shell<\/strong> is a very convenient option to run your automation scripts against your subscriptions. <\/p>\n<p>The shell is provided in two flavors:<\/p>\n<ul>\n<li>Bash based shell<\/li>\n<li>PowerShell in Cloud Shell (currently in Preview)<\/li>\n<\/ul>\n<p>The Cloud Shell is a Browser based experience. What this means is that you do not need to install any dependencies for the Azure commands to run. Also, there is no dependency on your machine's hardware. You can work irrespective of your local machine's configurations.<\/p>\n<h3>Support for various tools<\/h3>\n<p>Azure Cloud Shell comes preloaded with various tools depending upon the shell type selected. It comes loaded with Linux tools like bash, sh, tmux and dig. The Azure tools which are preloaded are Azure CLI 2.0 and 1.0, AzCopy,etc.Text editors include vim and nano. Git source control tools are also included. Various other Build, Containers, Databases, etc. tools are also included. It also comes with language support for .net version 2.0.0, Java version 1.8, Node.js 6.9.4, PowerShell 6.0(beta) and Python 2.7 and 3.5 etc. Check the References section for the full list and up to date version of Tools and Language support.<\/p>\n<h3>Key Concepts<\/h3>\n<p>Below are some of the key concepts (in nutshell) about the cloud shell.<\/p>\n<ol>\n<li>You can opt for any one of the two shell options available, as per your preferences. You can choose to have a <strong>Bash shell<\/strong> or <strong>PowerShell in Cloud shell<\/strong><\/li>\n<li>You can easily switch between the two shells at any time<\/li>\n<li>If you are logged into Azure portal then you are also automatically authenticated into the Azure Cloud Shell<\/li>\n<\/ol>\n<p>Other important concepts as per Microsoft documentation are:<\/p>\n<ol>\n<li>Cloud Shell runs on a temporary host provided on a per-session,\nper-user basis <\/li>\n<li>Cloud Shell times out after 20 minutes without\ninteractive activity <\/li>\n<li>Cloud Shell requires an Azure file share to be\nmounted <\/li>\n<li>Cloud Shell uses the same Azure file share for both Bash and\nPowerShell <\/li>\n<li>Cloud Shell is assigned one machine per user account <\/li>\n<li>Bash persists $Home using a 5-GB image held in your file share<\/li>\n<li>Permissions are set as a regular Linux user in Bash<\/li>\n<\/ol>\n<h3>Pricing<\/h3>\n<p>Cloud Shell does not have any direct cost linked to it. The charge for Cloud Shell is only for the usage of the underlying Azure Storage. The exact charge depends on the amount you store on that storage and the type of the storage. By default, Locally Redundant Storage is created. <\/p>\n<p><strong>References<\/strong>:<\/p>\n<ul>\n<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/cloud-shell\/overview\" target=\"_blank\">Azure Cloud Shell Overview<\/a><\/li>\n<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/cloud-shell\/features\" target=\"_blank\">Azure Cloud Shell Features and Tools<\/a><\/li>\n<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/cloud-shell\/features-powershell\" target=\"_blank\">Features &amp; tools for PowerShell in Azure Cloud Shell<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Oct 08, 2017",
			"slug": "azure-cloud-shell-introduction",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Azure Cloud Shell<\/strong> is a very convenient option to run your automation scripts against your subscriptions. <\/p>\n<p>The shell is provided in two flavors:<\/p>\n<ul><li>Bash based shell<\/li>\n<li>PowerShell in Cloud Shell (currently in Preview)<\/li>\n<\/ul><p>The Cloud Shell is a Browse...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Script Sample - Generate Azure Resources Report by Tags",
			"postDate": "07-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Sample",
				"Script",
				"Tags"
			],
			"category": "Azure",
			"body": "<p>&lt;&lt;<strong>Update<\/strong>: This post and the sample script is now updated to support latest Azure PowerShell cmdlets&gt;&gt;<\/p>\n<p>When managing resources in Azure, Tags are there to help you. They add very valuable metadata to the Azure resources.\nIn nutshell, tags are Key-Value pairs. E.g. &quot;Business Unit = Finance&quot;, &quot;Site = Central US&quot; are two such tags.<\/p>\n<p>These <strong>tags help you to<\/strong>:<\/p>\n<ul>\n<li>Organize your resources and manage the same<\/li>\n<li>Get insights into Chargeback categorically<\/li>\n<\/ul>\n<p>Tags go beyond the boundaries of deployments. You can have few resources deployed in one resource group and few other resources into the second resource group. If for these resources in both the resource groups you apply the same tag (i.e. same Key and value combination) then you can view and manage these resources in a single click.<\/p>\n<p>Now once in a while, you want to take a health check of your Azure environment. You want to see what all resources are there and what are the tags applied to these resources. You want to extract this data to a CSV file so that you can apply filters and perform other business intellegence (BI) operations on it. The script below provides exactly that. <\/p>\n<p>The <strong>script gives you<\/strong> a CSV output report with:<\/p>\n<ul>\n<li>All the resources in your Azure Subscription<\/li>\n<li>Type of each resource, so that you can filter on various types<\/li>\n<li>Tags for each of the resource in Azure<\/li>\n<\/ul>\n<p><strong>The Columns<\/strong> in the Output CSV file (generated by the script) are:<\/p>\n<ol>\n<li>Semi-colon separated list of tags<\/li>\n<li>Resource Name<\/li>\n<li>Resource Group Name<\/li>\n<li>Location<\/li>\n<li>Resource Type<\/li>\n<li>Resource Id<\/li>\n<li>Name<\/li>\n<li>Subscription Id<\/li>\n<\/ol>\n<p>You can find this script on GitHub here: <a href=\"https:\/\/github.com\/HarvestingClouds\/PowerShellSamples\/blob\/a4eb910aa8eb2cdd340c2866cde150282b47067e\/Scripts\/Azure%20Resources%20Report%20by%20Tags.ps1\">Azure Resources Report by Tags<\/a><\/p>\n<p><a href=\"https:\/\/raw.githubusercontent.com\/HarvestingClouds\/PowerShellSamples\/master\/Scripts\/Get-AzureRmTagsReport.ps1\">Direct Link to the Script here. Right click and choose Save As<\/a><\/p>\n<p>You are welcome to make changes and submit Pull Requests to this script or even fork and make your modifications. <\/p>",
			"addpost": "addpost",
			"dated": "Jan 26, 2017",
			"slug": "script-sample-generate-azure-resources-report-by-tags",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>&lt;&lt;<strong>Update<\/strong>: This post and the sample script is now updated to support latest Azure PowerShell cmdlets&gt;&gt;<\/p>\n<p>When managing resources in Azure, Tags are there to help you. They add very valuable metadata to the Azure resources.\nIn nutshell, tags are Key-Value pairs. E....<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Application Insights is now generally available",
			"postDate": "29-11-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"ApplicationInsights"
			],
			"category": "Azure",
			"body": "<p>After a long time in Preview, Azure Application Insights is now generally available from Microsoft.<\/p>",
			"addpost": "addpost",
			"dated": "Nov 29, 2016",
			"slug": "azure-application-insights-is-now-generally-available",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>After a long time in Preview, Azure Application Insights is now generally available from Microsoft.<\/p>...\n",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Site Recovery (ASR) - New feature added to target Resource Groups",
			"postDate": "17-11-2016",
			"tags": [
				"ASR",
				"Azure",
				"AzureSiteRecovery",
				"ResourceGroups"
			],
			"category": "Azure",
			"body": "<p>A new feature is now added to Azure Site Recovery (ASR) which enables you to target the Resource Groups for failover. You can target a separate Resource Group for each Server\/VM being protected. Now post failover, this target Resource Group will be used. Earlier,  during a failover, a new resource group was created with the same name as the server being failed over.<\/p>\n<p>You can configure this setting in two ways:<\/p>\n<ol>\n\n<li>\nWhen you are <b>Enabling Replication of new servers<\/b> then at the settings for \"Target\" you will have two new options. \n\n<ul><li>The first option is \"Post-failover resource group\" along with a drop down. This is where you select the target Resource Group. You can select one of the existing Resource group here. If you haven't created the one you want to use as a target then please create before enabling replication. <\/li> \n\n<li>The second new option is to select \"Post-failover deployment model\" which has only two options. These options are \"Classic\" and \"Resource Manager\". The later will be selected by default and should be the one you should be using to leverage all the new features which Azure has to offer.<\/li>\n<\/ul>\n\n<br\/>\n<img src=\"\/images\/1479510199582f88b742692.png\" alt=\"Enable Replication\">\n<\/li>\n\n<li>\nIf you have servers which were protected before this feature was introduced or if you configured wrong Resource Group during enabling of replication and now want to change the Resource Group then you can do so using this alternate way. Go to your ASR Vault and then go to Settings. Then go to the \"Replicated Items\" and click on the server for which you want to change the resource group. Click on \"Compute and Network\" in the server properties as shown below. You will see a new option here to select or change the target Resource Group. Click \"Save\" at the top of the blade after selecting or changing the value.\n\n<br\/>\n\n<img src=\"\/images\/1479493236582f4674a80d3.png\" alt=\"Compute and Network settings\">\n<\/li>\n<\/ol>\n<p>This new option makes the failover process in Azure Site Recovery (ASR) much more manageable and overall a better experience.<\/p>",
			"addpost": "addpost",
			"dated": "Nov 17, 2016",
			"slug": "azure-site-recovery-asr-new-feature-added-to-target-resource-groups",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>A new feature is now added to Azure Site Recovery (ASR) which enables you to target the Resource Groups for failover. You can target a separate Resource Group for each Server\/VM being protected. Now post failover, this target Resource Group will be used. Earlier,  during a failover, a new resourc...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Troubleshooting Azure Site Recovery (ASR) - Data Replication Not Working",
			"postDate": "14-11-2016",
			"tags": [
				"ASR",
				"Azure",
				"AzureSiteRecovery"
			],
			"category": "Azure",
			"body": "<p>If you have the Azure Site Recovery (ASR) setup in your environment and are facing the issue where the data replication is stuck, then follow this blog to troubleshoot. The data replication can be stuck either during the initial replication or during the delta changes. This can occur for various reasons. We will inspect various components involved in ASR. Major of the troubleshooting is done on the Management Server i.e. the on-premise Configuration\/Master target server.<\/p>\n<h3>1. Check Alerts Details<\/h3>\n<p>Go to the Azure Site Recovery Vault and navigate to the settings. Click on the <strong><em>Alerts and Events<\/em><\/strong>. Check the alerts for the data replication being blocked etc. Verify that the problem is related to data replication and not something else. <\/p>\n<p>You can also navigate to the &quot;<strong><em>Replicated Items<\/em><\/strong>&quot; in the ASR Vault settings. On the blade for replicated items, click on the server for which the data is not being replicated. A new blade will open for this server's properties Then click on the Error Details on the server properties blade's context menu (which you can access by clicking on the top right ellipse i.e. 3 dots).<\/p>\n<p>After verifying the issue, proceed to next sections to troubleshoot.<\/p>\n<h3>2. Check Resource Monitor<\/h3>\n<p>Check if you see any activity in the Resource Monitor. This is also to validate if the issue is there or not. Sometimes the <strong>Low Bandwidth<\/strong> and <strong>multiple servers<\/strong> configured against one Management server can cause this issue. Ensure that this is not the scenario in your case.<\/p>\n<p>From the Task manager, go to performance view and check for the bandwidth consumption. Then click on the &quot;Open Resource Monitor&quot; button to launch the Resource Monitor. From the CPU section in the Overview tab, select the below two services:<\/p>\n<ul>\n<li>cxps.exe<\/li>\n<li>cbengine.exe<\/li>\n<\/ul>\n<p>Then click on the Network tab and see if there is any traffic going out to Azure. If the data transfer is going on without issues then you should be able to view entries against cbengine going out to a URL which will look something like &quot;blob.aaa1aaa1aa.core.windows.net&quot; and entries against the csps service .<\/p>\n<p><img src=\"\/images\/1479242042582b713a13d26.png\" alt=\"Resource Monitor\" \/><\/p>\n<h3>3. Check ASR Infrastructure Setup<\/h3>\n<p>First of all, check if the ASR infrastructure setup is correct and nothing is wrong there. To view this, navigate to the ASR Vault. Go to the settings and click on the &quot;Site Recovery Infrastructure&quot;. In the next blade, click on the kind of infrastructure you have setup. E.g. If you are replicating from VMWare or Physical Machines from on-premise to Azure then click on the &quot;Configuration Servers&quot; under the &quot;For VMWare &amp; Physical Machines&quot; section.<\/p>\n<p><img src=\"\/images\/1479235374582b572e7bd28.png\" alt=\"Site Recovery Infrastructure\" \/><\/p>\n<p>Here check if the Config Server is showing as &quot;Connected&quot;. If not then the problem is in the communication between Configuration Server and the Azure. Ensure that you are able to connect to the Azure portal from the config server. Also, ensure that all the public URLs for Azure are accessible. Check this link for exact URLs: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/site-recovery\/site-recovery-best-practices#verify-url-access\">Verify URL Access<\/a>.<\/p>\n<p>Next, click on the configuration server. This will open another blade with details for the configuration server. Expand the section for &quot;Associated Servers&quot; as marked no. 2 in the screenshot below. Check if all the associated servers, i.e. Process Server, vCenter Server and Master Target servers are connected and showing green tick mark.<\/p>\n<p>Next, check the configuration server health as shown at no. 3 below. Check if all the services are running and showing healthy. Ensure that you have sufficient free space on the configuration server to send the replication data. If you see any services not running then go to the next section to check and start the services on the Management Server on-premise. <\/p>\n<p>You can try refreshing the server after making any configuration changes on it, e.g. increasing memory or freeing up disk space. Click on the &quot;Refresh Server&quot; button as shown at no. 4, at the top of the blade for the configuration server.<\/p>\n<p><img src=\"\/images\/1479235804582b58dc26f55.png\" alt=\"Config Server Settings\" \/><\/p>\n<h3>4. Checking Services on the Management Server<\/h3>\n<p>Check if the services on the Management Server are up and running. You need to check for the below services:<\/p>\n<ul>\n<li>InMage PushInstall<\/li>\n<li>InMage Scout Application Service<\/li>\n<li>InMage Scout VX Agent - Sentinel\/Outpost<\/li>\n<li>INMAGE-AppScheduler<\/li>\n<li>Microsoft Azure Recovery Services Agent<\/li>\n<li>Microsoft Azure Site Recovery Service<\/li>\n<li>cxprocessserver (This is important service. It is the service for the InMage CX Process Server)<\/li>\n<li>tmansvc (This is the service for the InMage Volsync Thread Manager Service)<\/li>\n<\/ul>\n<p>Start any service which is not running and check if the problem still exists. 90% of the time the problem is going to be because of something related to these services (e.g. a restart or patch stopped one of these services).<\/p>\n<h3>5. Checking Services on the Server being replicated<\/h3>\n<p>Check if the services on the Server being replicated are up and running. You need to check for the below services:<\/p>\n<ul>\n<li>Azure Site Recovery VSS Provider<\/li>\n<li>InMage Scout Application Service<\/li>\n<li>InMage Scout VX Agent - Sentinel\/Outpost<\/li>\n<\/ul>\n<p>Start any service which is not running and check if the problem still exists.<\/p>\n<h3>6. Verify Service Account credentials are correct and have required access<\/h3>\n<p>The replication can stop if the service account is not correct or it doesn't have required access. Check if the service account's password expired or changed. <\/p>\n<p>You can use the Configuration Server config tool to check and update the service accounts. This tool can be accessed from this directory path: &quot;<em>D:\\Program Files (x86)\\Microsoft Azure Site Recovery\\home\\svsystems\\bin<\/em>&quot; where D is your install directory for ASR setup. The tool name under this directory is &quot;<strong>cspsconfigtool.exe<\/strong>&quot;.<\/p>\n<p><img src=\"\/images\/1479238579582b63b3688bd.png\" alt=\"CSPS Config Tool\" \/><\/p>\n<h3>7. Check Logs<\/h3>\n<p>There are various ASR logs that gets generated in the Management server. Two key logs that you should check are as shown below. This assumes that D is the directory where ASR is installed.<\/p>\n<ul>\n<li><strong>Monitoring Logs<\/strong> - These logs are located at &quot;<em>D:\\Program Files (x86)\\Microsoft Azure Site Recovery\\home\\svsystems\\var<\/em>&quot;. Name of the file you should check is &quot;<strong>monitor_ps<\/strong>&quot;.<\/li>\n<li><strong>VM-Specific ASR Logs<\/strong> - These logs are located at &quot;<em>D:\\Program Files (x86)\\Microsoft Azure Site Recovery\\home\\svsystems<\/em>&quot;. Then there will be a folder with the name as a GUID for each VM. Navigate to the folder with the Guid and try to find the folder for your VM's GUID. One indication will be the number of disks and the disk sizes. Once you have located the folder for one of the VM having replication problems. Then navigate to internal folders and locate the perf.log file for your VM's disks. Check to see if there are any errors here.<\/li>\n<\/ul>\n<p>These logs should give you an idea as to what may have been causing the issues.<\/p>\n<h3>In Conclusion<\/h3>\n<p>After all these steps and any changes you should Refresh the Configuration Server as shown in the point 3 above. <\/p>\n<p>Let me know if this blog helped in your scenario. <\/p>",
			"addpost": "addpost",
			"dated": "Nov 14, 2016",
			"slug": "troubleshooting-azure-site-recovery-asr-data-replication-not-working",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>If you have the Azure Site Recovery (ASR) setup in your environment and are facing the issue where the data replication is stuck, then follow this blog to troubleshoot. The data replication can be stuck either during the initial replication or during the delta changes. This can occur for various ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "General Availability - Azure Active Directory (AD) Domain Services",
			"postDate": "27-10-2016",
			"tags": [
				"AD",
				"ActiveDirectory",
				"Azure"
			],
			"category": "Azure",
			"body": "<p><strong>Azure Active Directory Domain Services<\/strong> are here to revolutionize the way Domain Services are used. They are here to reduce even further the infrastructure management for IT Administrators. <\/p>\n<h3>What is this service<\/h3>\n<p>Using this service you can now setup domains without having to setup the domain controllers. You can set up your Domain in Azure using Domain Services and then you can have virtual machines joining to that domain. At no point, you need to set up any domain controllers. You can also use Group Policy with this service to securely administer your domain joined infrastructure.<\/p>\n<p>This service benefits all customers. For <strong>enterprise customers<\/strong>, they get the familiar enterprise grade service. For <strong>medium to small business customers<\/strong>, the service makes even more sense as they get enterprise level service for a smaller price due to small infrastructure and thus a small number of objects in AD.<\/p>\n<p>This service is out of the box a highly available service. It is hosted in globally distributed datacenters.<\/p>\n<h3>When is this service available<\/h3>\n<p>This service is now <strong>Generally Available<\/strong>. The pricing for this service will start from 1st December 2016.<\/p>\n<p>The payment model is Pay-As-You-Go. The usage will be charged per hour. The chargeback will be based on the total number of AD Objects in your AD Tenant. These objects include users, groups, and domain-joined computers. Directory size and hours are calculated and emitted daily. Usage is prorated to the minute.<\/p>\n<p>Currently, there are 3 tiers. <\/p>\n<ul>\n<li>Less than 25,000 directory objects<\/li>\n<li>25,001 to 100,000 directory objects<\/li>\n<li>more than 100,000 directory objects<\/li>\n<\/ul>\n<h3>Is this service available in my region<\/h3>\n<p>At the time of writing of this blog post, this service is available in the following regions:<\/p>\n<ul>\n<li>East US<\/li>\n<li>East US 2<\/li>\n<li>Central US<\/li>\n<li>South Central US<\/li>\n<li>West US<\/li>\n<\/ul>\n<p>Check this link for most updated availability: <a href=\"https:\/\/azure.microsoft.com\/en-us\/regions\/services\/\">Azure Products by Region<\/a><\/p>\n<p>Also, check the official ADDS page here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/active-directory-ds\/\">Azure Active Directory Domain Services<\/a>\nAnd, check the upto date pricing here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/pricing\/details\/active-directory-ds\/\">Pricing<\/a><\/p>\n<p>Now it is time for you to go and try this new service for yourself and enjoy it's benefits!<\/p>",
			"addpost": "addpost",
			"dated": "Oct 27, 2016",
			"slug": "general-availability-azure-active-directory-ad-domain-services",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Azure Active Directory Domain Services<\/strong> are here to revolutionize the way Domain Services are used. They are here to reduce even further the infrastructure management for IT Administrators. <\/p>\n<h3>What is this service<\/h3>\n<p>Using this service you can now setup domains without ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Suspending and Resuming Azure Site Recovery (ASR) Replication on a single or multiple servers",
			"postDate": "25-10-2016",
			"tags": [
				"ASR",
				"Azure",
				"AzureSiteRecovery"
			],
			"category": "Azure",
			"body": "<p>Let us assume that you have enabled the Azure Site Recovery (ASR) replication on various servers. These servers can be:<\/p>\n<ul>\n<li>On Premise VMWare VMs<\/li>\n<li>On Premise Physical Servers<\/li>\n<li>Azure ASM (older portal) VMs<\/li>\n<\/ul>\n<p>The purpose could be anything from setting up Disaster Recovery for your infrastructure or using ASR for Migrating workloads from on-premise to Azure. For any reason, you may need to suspend and resume ASR replication on one or more target servers.<\/p>\n<p>Currently, ASR does not have the feature to allow you to suspend and resume the ASR replication. But you can do this manually as easily. <\/p>\n<p>To <strong>Suspend<\/strong> the ASR replication on a particular server, all you need to do is:<\/p>\n<ol>\n<li>Log into the server on which ASR replication is currently going on and you want to suspend the replication.<\/li>\n<li>Open the Services (Run -&gt; services.msc)<\/li>\n<li>Locate the following services and Stop these services.\n<ul>\n<li>Azure Site Recovery VSS Provider<\/li>\n<li>InMage Scout Application Service<\/li>\n<li>InMage Scout VX Agent - Sentinel\/Outpost<\/li>\n<\/ul><\/li>\n<\/ol>\n<p>Checkout these servers below:<\/p>\n<p><img src=\"\/images\/1477354219580ea2eb7f4e6.png\" alt=\"Services 1\" \/><\/p>\n<p><img src=\"\/images\/1477354229580ea2f52b728.png\" alt=\"Services 2\" \/><\/p>\n<p>To <strong>Resume<\/strong> the ASR replication, just do the opposite, i.e. Log into the server and Start these services. <\/p>\n<p>Until Azure adds this feature directly in the portal, this easy manual step is the workaround for suspending and resuming the replication on servers.<\/p>",
			"addpost": "addpost",
			"dated": "Oct 25, 2016",
			"slug": "suspending-and-resuming-azure-site-recovery-asr-replication-on-a-single-or-multiple-servers",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Let us assume that you have enabled the Azure Site Recovery (ASR) replication on various servers. These servers can be:<\/p>\n<ul><li>On Premise VMWare VMs<\/li>\n<li>On Premise Physical Servers<\/li>\n<li>Azure ASM (older portal) VMs<\/li>\n<\/ul><p>The purpose could be anything from setting up Disaste...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Creating ASR Template from an existing Azure Infrastructure and Modifying It",
			"postDate": "19-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>This blog post is for you if:<\/p>\n<ul>\n<li>You want to backup an Infrastructure configuration\/setup in Azure and want to redeploy it to another environment then this blog is for you. <\/li>\n<li>You want to create similar infrastructure as one of existing deployments in Azure<\/li>\n<li>You want to modify the configurations of existing Azure IaaS infrastructure and redeploy various elements<\/li>\n<\/ul>\n<p>This <strong>Power Tip<\/strong> is really easy if you know just the option. <\/p>\n<ol>\n<li>If you want to make the template for all the resources in a Resource Group in Azure, then go to the properties of the Resource Group and find the option for &quot;<strong>Automation Script<\/strong>&quot;.<\/li>\n<li>If you want to get the template only for a particular resource, then navigate to that resource in the Azure Portal and then open it's settings. You will find the same &quot;<strong>Automation Script<\/strong>&quot; option. <\/li>\n<\/ol>\n<p>You can check this option in the below screenshot.<\/p>\n<p><img src=\"\/images\/1477349409580e902123ab1.png\" alt=\"Automation Script\" \/><\/p>\n<p>Once you click on the Automation Script option in the settings (of a resource group or a resource) then you will be presented with the complete JSON template along with the JSON outline on the right side (marked 2 above in the image).<\/p>\n<p>You have various options for the actions to take on the template (marked 3 in the image above):<\/p>\n<ul>\n<li>You can download the template<\/li>\n<li>Add to Library to deploy the same resources again and again in your subscription<\/li>\n<li>To directly deploy the resources again with the modifications you make. <\/li>\n<\/ul>\n<p>Normally, you would download the template to make edits to the same. After downloading, you should start cleaning up the template. There are only 4 major tasks that you need to perform as part of the cleanup:<\/p>\n<ol>\n<li>Remove any <strong>hard-coded values<\/strong> for various dependent resources e.g. NIC for a VM, VHD for a VM etc.<\/li>\n<li>Remove any resources and dependent parameters that you don't need.<\/li>\n<li>Create <strong>Parameters<\/strong> for the values you want to change for each deployment and want the end user to provide during the deployment.<\/li>\n<li>Create <strong>Variables<\/strong> for the values which can have fixed values but are being used at multiple locations in your template.<\/li>\n<\/ol>\n<p>That's all there is to it. Using this tip you can spearhead your ARM Template developments. You don't need to start from scratch and can base your templates on the existing deployments.<\/p>",
			"addpost": "addpost",
			"dated": "Oct 24, 2016",
			"slug": "step-by-step-arm-templates-creating-asr-template-from-an-existing-azure-infrastructure-and-modifying-it",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>This blog post is for you if:<\/p>\n<ul><l...><\/l...><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step Azure Resource Manager (ARM) Templates - Index",
			"postDate": "15-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Azure Resource Manager (ARM) Template<\/strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources. The template can be used to deploy the resources consistently and repeatedly.<\/p>\n<p>ARM Templates can be used for the deployment of resources on both Azure and Azure Stack. Using these templates for all deployments provides you with various <strong>benefits<\/strong> including:<\/p>\n<ul>\n<li><strong>Declarative Deployment<\/strong> \u2013 All you need to do is declare what you need to deploy. You don't need to create any complex rules or write lengthy scripts.<\/li>\n<li><strong>Idempotency<\/strong> \u2013 You can deploy the same template over and over again without affecting the current resources.<\/li>\n<li><strong>Predictability<\/strong> - Using Templates you can have accurate predictability when performing large deployments. You reduce any manual errors.<\/li>\n<li><strong>Repitition without Errors<\/strong> - You can deploy the same infrastructure over and over again (e.g. in Dev-test environments and then in production).<\/li>\n<\/ul>\n<p>This series of posts try to decode and understand the ARM Templates &quot;Step By Step&quot;.<\/p>\n<p>This post is an index of all the posts, in sequence, for understanding the Azure Resource Manager (ARM) Templates. This post will be updated regularly as more posts on this topic are added.<\/p>\n<ol>\n<li><a href=\"#\">Index<\/a> <\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-json-101-for-it-administrators\/\">JSON 101 for IT Administrators<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">What is in an ARM Template - Understanding All Components<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/\">What is in an ARM Template - Understanding Components 2 - Parameters<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/\">What is in an ARM Template - Understanding Components 3 - Variables<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/\">What is in an ARM Template - Understanding Components 4 - Resources<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/\">What is in an ARM Template - Understanding Components 5 - Outputs<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-helper-functions\/\">Helper Functions in ARM Templates<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-building-your-first-arm-template\/\">Building your first ARM Template<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-deploying-template-using-azure-portal\/\">Deploying Template Using Azure Portal<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-deploying-template-using-azure-powershell\/\">Deploying Template Using Azure PowerShell<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-creating-parameters-file-for-an-arm-template\/\">Creating Parameters file for an ARM Template<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-authoring-arm-templates-using-visual-studio\/\">Authoring ARM Templates using Visual Studio<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-deploying-arm-templates-using-visual-studio\/\">Deploying ARM Templates using Visual Studio<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-iterating-and-creating-multiple-instances-of-a-resource\/\">Iterating and creating multiple instances of a resource<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-visualizing-arm-templates-and-generating-diagrams\/\">Visualizing ARM Templates and Generating Diagrams<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-using-key-vault-to-securely-provide-information-in-arm-templates\/\">Using Key Vault to Securely Provide Information in ARM Templates<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-providing-powershell-scripts-to-run-after-vm-deployment-via-arm-template\/\">Providing PowerShell Scripts to Run after VM deployment via ARM Template<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-deploying-a-windows-vm-with-oms-integration\/\">Deploying a Windows VM with OMS integration<\/a><\/li>\n<li><a href=\"\/post\/step-by-step-arm-templates-creating-asr-template-from-an-existing-azure-infrastructure-and-modifying-it\/\">Creating ASR Template from an existing Azure Infrastructure and Modifying It<\/a><\/li>\n<\/ol>",
			"savedraft": "savedraft",
			"dated": "Oct 21, 2016",
			"slug": "step-by-step-azure-resource-manager-arm-templates-index",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Azure Resource Manager (ARM) Template<\/strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources. The template can be used to deploy the resources consistently and r...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Providing PowerShell Scripts to Run after VM deployment via ARM Template",
			"postDate": "19-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"PowerShell",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>By providing PowerShell Scripts to Run after VM deployment via ARM Template, you can accomplish various activities. <\/p>\n<ul>\n<li>You can setup different features and roles on the VM. <\/li>\n<li>You can setup web server. <\/li>\n<li>You can setup SQL Database and configure it.<\/li>\n<li>You can configure custom policies<\/li>\n<li>And so on...<\/li>\n<\/ul>\n<p>You first need to have PowerShell script files uploaded to a storage account.\nTo do this you add an <strong>Extension resource<\/strong> (<em>Microsoft.Compute\/virtualMachines\/extensions<\/em>) nested inside a VM. This extension resource should be of type &quot;<strong>CustomScriptExtension<\/strong>&quot;. You provide the URLs to the PowerShell scripts inside this custom script extension.<\/p>\n<h3>Preparation<\/h3>\n<p>As part of the preparation process you need to:<\/p>\n<ul>\n<li>Ensure that the PowerShell scripts are uploaded to the Storage Account and that you have the complete URL to the blob. <\/li>\n<li>Or you can upload the scripts to the GitHub and get the Raw file URL<\/li>\n<li>If there are more than one scripts then there should be one master script amongst all ps1 files which will internally invoke other files. This master file will be triggered via the template. Information of all file URLs will also be provided via the Template<\/li>\n<\/ul>\n<h3>Providing and configuring Scripts to Run After VM Deployment<\/h3>\n<p>Define the below resource to provide PowerShell scripts to be run after VM deployment:<\/p>\n<pre><code>{\n   \"type\": \"Microsoft.Compute\/virtualMachines\/extensions\",\n   \"name\": \"MyCustomScriptExtension\",\n   \"apiVersion\": \"2015-05-01-preview\",\n   \"location\": \"[parameters('location')]\",\n   \"dependsOn\": [\n       \"[concat('Microsoft.Compute\/virtualMachines\/',parameters('vmName'))]\"\n   ],\n   \"properties\": {\n       \"publisher\": \"Microsoft.Compute\",\n       \"type\": \"CustomScriptExtension\",\n       \"typeHandlerVersion\": \"1.7\",\n       \"autoUpgradeMinorVersion\":true,\n       \"settings\": {\n           \"fileUris\": [\n           \"http:\/\/Yourstorageaccount.blob.core.windows.net\/customscriptfiles\/start.ps1\",\n           \"http:\/\/Yourstorageaccount.blob.core.windows.net\/customscriptfiles\/secondaryScript.ps1\",\n\n       ],\n       \"commandToExecute\": \"powershell.exe -ExecutionPolicy Unrestricted -File start.ps1\"\n     }\n   }\n }<\/code><\/pre>\n<p><strong>How it works:<\/strong><\/p>\n<ul>\n<li>Both the files i.e. start.ps1 and secondaryScript.ps1 are picked up from the storage account after VM deployment. Ensure to replace the URLs with your actual storage account blob URLs. You can add more files if needed.<\/li>\n<li>The &quot;start.ps1&quot; is the main powerShell script which should be invoking the secondaryScript.ps1 internally<\/li>\n<li>CommandToExecutre property is used to invoke the start.ps1 powerShell script on the deployed VM<\/li>\n<\/ul>\n<h3>Passing Parameters to the PowerShell Script dynamically<\/h3>\n<p>To pass the parameters to the PowerShell script use commandToExecute property. <\/p>\n<p>One such example to pass the parameters is shown below:<\/p>\n<pre><code>\"commandToExecute\": \"[concat('powershell.exe -ExecutionPolicy Unrestricted -File start.ps1', ' -domainName ', parameters('domainNameParameter')]\"<\/code><\/pre>\n<p>Note the use of &quot;concat&quot; helper function to create the value of the &quot;commandToExecute&quot;. Also note that there is starting and trailing space in the second argument of the concat i.e. &quot; -domainName &quot;.<\/p>\n<p>The parameter &quot;domainNameParameter&quot; should already be defined in the template in the parameters section. If the value of parameter &quot;domainNameParameter&quot; is &quot;testdomain.com&quot; then the dynamically generated command will become:<\/p>\n<pre><code>powershell.exe -ExecutionPolicy Unrestricted -File start.ps1 -domainName testdomain.com<\/code><\/pre>\n<h3>Securing the Access to the PowerShell Script File in Storage account<\/h3>\n<p>Let us assume you want to deploy Windows VM with Protected settings. Then use the below sample to provide the PowerShell files.<\/p>\n<pre><code>{\n    \"publisher\": \"Microsoft.Compute\",\n    \"type\": \"CustomScriptExtension\",\n    \"typeHandlerVersion\": \"1.7\",\n    \"settings\": {\n        \"fileUris\": [\n            \"http: \/\/Yourstorageaccount.blob.core.windows.net\/customscriptfiles\/start.ps1\"\n        ]\n    },\n    \"protectedSettings\": {\n        \"commandToExecute\": \"powershell.exe -ExecutionPolicy Unrestricted -start.ps1\",\n        \"storageAccountName\": \"yourStorageAccountName\",\n        \"storageAccountKey\": \"yourStorageAccountKey\"\n    }\n}<\/code><\/pre>\n<p>Note the use of &quot;protectedSettings&quot; above. This time you also specify the Storage Account Name and the Storage Account Key.<\/p>\n<p>You can also refer the official documentation here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/virtual-machines-windows-extensions-customscript\/\">Windows VM Custom Script extensions with Azure Resource Manager templates<\/a>.<\/p>",
			"addpost": "addpost",
			"dated": "Oct 19, 2016",
			"slug": "step-by-step-arm-templates-providing-powershell-scripts-to-run-after-vm-deployment-via-arm-template",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>By providing PowerShell Scripts to Run af...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Using Key Vault to Securely Provide Information in ARM Templates",
			"postDate": "18-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"KeyVault",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>When providing passwords and other secure and confidential information in ARM Templates, you need to ensure that you don't hard code these values anywhere. You don't need to compromise the security of the system while trying to automate deployments. Your end goal is to try to automate as much as possible and reduce manual involvement. <\/p>\n<p><strong>Key Vaults<\/strong> are there to solve this problem without compromising any security. In fact, they make the whole solution more secure with least manual intervention.<\/p>\n<h3>Setting up the Key Vault<\/h3>\n<p>We first need to setup the Key Vault in Azure to be able to use it via ARM Template parameters.<\/p>\n<ol>\n    <li>\n<b>Create a Key Vault in Azure<\/b> by going to <i>New -> Security + Identity -> Key Vault<\/i>. Provide a name, subscription, resource group etc. and provision the Key Vault. Once it is created navigate to it by clicking on \"More Services\" and searching for Key Vault. Click on the name of the vault you created. E.g. In this example we have named the key vault to \"TestKeyVault101\".\n\n<br \/>\n<b>Note<\/b> that this feature is in Preview  at the time of writing of this blog.\n\n    <\/li>\n\n    <li>\n        Next, we need to <b>Add a Secret<\/b> in the key vault. Click on the Secrets and then the + Add button at the top, as shown below:\n<br \/><br \/>\n<img alt=\"Adding Secret\" src=\"\/images\/1476818644580676d447b16.png\" \/>\n<br \/><br \/>\nNext, in the \"Create a secret\" blade, set the Upload Options to Manual. Provide a name and value to the secret. Value is the password you want to securely save.\nEnsure that the Enabled is set to Yes. Optionally you can set the activation and expiration dates. In this example, we are setting the Secret Name to \"DefaultAdminPasswordSecret\".\n<br \/><br \/>\n<img alt=\"Creating Secret\" src=\"\/images\/1476818650580676da89fee.png\" \/>\n    <\/li>\n\n    <li>\n        Next, we will set the <b>Access Policies <\/b> to provide access to the user under the context of which the template will be deployed. This is the user which will be accessing the Key Vault. Go to Key Vault settings and select Access Policies. Add the new user as shown below:\n<br \/><br \/>\n<img alt=\"Access Policies\" src=\"\/images\/14768190995806789bad0c4.png\" \/>\n<br \/><br \/>\n\n    <\/li>\n\n    <li>\n        Next, we will set the <b>Advanced Access Policies <\/b> to indicate that this key vault can be accessed via ARM Templates. Go to Key Vault settings and select Advanced Access Policies. Ensure that the checkbox for \"<i>Enable access to Azure Resource Manager for template deployment<\/i>\" is checked as shown below:\n<br \/><br \/>\n<img alt=\"Access Policies\" src=\"\/images\/1476819105580678a1cfc9f.png\" \/>\n<br \/> <br \/>\n\n    <\/li>\n\n<\/ol>\n<p>We are now all set with our Key Vault. Next, we will be using the secret we created to set the local Administrator user's password.<\/p>\n<h3>Using the Key Vault Secret in ARM Template<\/h3>\n<p>Let us assume that you have a JSON ARM Template which deploys a VM. One of the parameters in this template is AdminPassword. You want to use the Key Vault Secret to provide the value for this parameter. <\/p>\n<p><strong>First<\/strong>, ensure that the parameter is declared as <i>securestring<\/i> as shown below:<\/p>\n<pre><code>\"adminPassword\": {\n    \"type\": \"securestring\",\n    \"metadata\": {\n        \"description\": \"Password for local admin account.\"\n    }\n}<\/code><\/pre>\n<p><strong>Next<\/strong>, we need to use the parameters file for this template. If you don't have one already create a new one. We can provide the reference to the Key Vault Secret as the value of admin user's password parameter in this file. General Syntax of providing reference is as shown follow:<\/p>\n<pre><code>\"adminPassword\": {\n  \"reference\": {\n    \"keyVault\": {\n      \"id\": \"Key Vault Id Here\"\n    },\n    \"secretName\": \"Name of the secret in Azure Key Vault\"\n  }\n}<\/code><\/pre>\n<p>Now the ID in the above Syntax can be provided as:<\/p>\n<p><em>\/subscriptions\/{guid}\/resourceGroups\/{group-name}\/providers\/Microsoft.KeyVault\/vaults\/{vault-name}<\/em>. <\/p>\n<p>Note to replace the <em>{guid}<\/em> with actual GUID for the subscription (without the curly braces), replace <em>{group-name}<\/em> with the actual name of the resource group and <em>{vault-name}<\/em> with the actual name of the Key Vault.<\/p>\n<p>You can also find the Resource ID for the Key Vault by navigating to it in the Azure Portal and then checking it's properties as shown below:<\/p>\n<p><img src=\"\/images\/147682308858068830f2f8e.png\" alt=\"Key Vault Resource ID\" \/><\/p>\n<p>The complete parameter file looks like below:<\/p>\n<pre><code>{\n  \"$schema\": \"http:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentParameters.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"OtherParameter\": {\n      \"value\": \"otherValue\"\n    },\n    \"adminPassword\": {\n      \"reference\": {\n        \"keyVault\": {\n          \"id\": \"\/subscriptions\/11111aaa-1a11-1a11-a1aa-1a1111a111a1\/resourceGroups\/TestRG101\/providers\/Microsoft.KeyVault\/vaults\/TestKeyVault101\"\n        },\n        \"secretName\": \"DefaultAdminPasswordSecret\"\n      }\n    }\n  }\n}<\/code><\/pre>\n<p>Next, deploy the template using PowerShell and pass this parameters file as explained here: <a href=\"\/post\/step-by-step-arm-templates-deploying-template-using-azure-powershell\/\">Deploying Template Using Azure PowerShell<\/a>. <\/p>\n<p>Example PowerShell cmdlet to deploy will look like:<\/p>\n<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile .\\TemplateFile.json -TemplateParameterFile .\\ParametersFile.json<\/code><\/pre>\n<p>Now that you know how to use values from Key Vaults, you can make the automated deployment of resources more secure in your environment.<\/p>",
			"addpost": "addpost",
			"dated": "Oct 18, 2016",
			"slug": "step-by-step-arm-templates-using-key-vault-to-securely-provide-information-in-arm-templates",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>When providing passwords and other secure...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Visualizing ARM Templates and Generating Diagrams",
			"postDate": "17-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>When developing ARM Templates, from time to time you will need to:<\/p>\n<ul>\n<li>Visualize your ARM Templates<\/li>\n<li>Generate Diagrams for your ARM Templates<\/li>\n<\/ul>\n<p>Microsoft has provided an Open Source tool for this named &quot;ARMVIZ&quot; (short for ARM Visualizer). This tool can be accessed by navigating to the below URL:<\/p>\n<p><a href=\"http:\/\/armviz.io\/\"><a href=\"http:\/\/armviz.io\/\">http:\/\/armviz.io\/<\/a><\/a><\/p>\n<h3>Navigating ARMVIZ<\/h3>\n<p>ARMVIZ is a nice in-browser application to visualize all the components in a template. It also shows the dependencies between various components. Using this web application you can:<\/p>\n<ul>\n<li>Either visualize your own developed template,<\/li>\n<li>Or inspect existing templates on GitHub<\/li>\n<\/ul>\n<p>Let's take a quick tour of the interface:<\/p>\n<p><img src=\"\/images\/14768067785806487ad77dd.png\" alt=\"ARMVIZ Interface\" \/><\/p>\n<p>I have numbered various elements of the interface in the above diagram. Let's quickly review these elements:<\/p>\n<ol>\n\n    <li>\n              <b>Designer<\/b> - This is represented by an \"eye\" icon on the left bar. This should be selected by default. If you are in the editor mode then you can click this and the diagram will be shown in the middle portion of the screen.\n    <\/li>\n\n    <li>\n              <b>Editor<\/b> - This is represented by \"<\/>\" text for code on the left bar. Clicking on this will take you to the editor portion of the ARMVIZ tool. In this area, you can edit your template while still in the tool. You can add or remove components. You can even edit the components or add dependencies.\n    <\/li>\n\n     <li>\n              <b>Canvas area<\/b> - This is the main screen (the middle area) where the template is displayed.\n    <\/li>\n\n    <li>\n              <b>File Menu<\/b> - This is the main and simple menu in the whole web application in the top bar. It has two options:\n              <ol type=\"a\">\n                       <li>\n                             <b>Open Local Template<\/b> - You can open an ARM Template JSON from your local computer to visualize using this menu option.\n                       <\/li>\n                       <li>\n                             <b>Download Template<\/b> - You can download the current template by using this menu option.\n                       <\/li>\n              <\/ol>\n    <\/li>\n\n    <li>\n              <b>Quickstart ARM Templates<\/b> - This is the link to external library of Quickstart ARM Templates on GitHub. These starter templates can help you save a lot of time. Instead of starting from scratch you can use these templates to fasten the ARM Templates Development.\n    <\/li>\n\n<\/ol>\n<p>This is how the Editor portion of the tool looks like. Use this area to edit or update your template.\n<strong>Note:<\/strong> If there will be mistakes, such as missing parenthesis in your template, the designer will not show any diagram. <\/p>\n<p><img src=\"\/images\/147680732358064a9ba1310.png\" alt=\"Editor Area\" \/><\/p>\n<p>You can zoom into and zoom out of your template diagram by rolling the mouse wheel. You can also drag and reposition various elements.\nTake a screenshot once you have repositioned the elements as per your requirements and have zoomed into an appropriate level.<\/p>\n<p>Below screenshot is taken from a much more complex template.<\/p>\n<p><img src=\"\/images\/1476806791580648877fed3.png\" alt=\"Complex ARM Template Diagram\" \/><\/p>\n<p>In conclusion, ARMVIZ can enable you to easily visualize your ARM Templates. It can empower you to generate diagrams for your documentation and to present to your team.<\/p>",
			"addpost": "addpost",
			"dated": "Oct 17, 2016",
			"slug": "step-by-step-arm-templates-visualizing-arm-templates-and-generating-diagrams",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>When developing ARM Templates, from time ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Deploying a Windows VM with OMS integration",
			"postDate": "16-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>You can deploy a Windows VM with OMS integration. You can have the OMS extension installed. And then you can onboard the VM to a specified workspace. <\/p>\n<h3>Prerequisites<\/h3>\n<p>You need already have an OMS workspace setup in your subscription. You need to have the following information about this OMS Workspace:<\/p>\n<ol>\n<li>OMS workspace ID<\/li>\n<li>OMS workspace Key<\/li>\n<\/ol>\n<p>You may obtain the workspace ID and key by going to the Connected Sources tab in the Settings page in the OMS Portal or to the Direct Agent blade in the Azure portal.<\/p>\n<p>In the Azure Portal go to the Log Analytics -&gt; Click on the OMS Workspace you want to use. Click on the &quot;OMS Portal&quot; to navigate to the OMS Portal.<\/p>\n<p><img src=\"\/images\/14768464545806e3762d97c.png\" alt=\"Link to OMS Portal\" \/><\/p>\n<p>In the OMS portal, navigate to the Settings.<\/p>\n<p><img src=\"\/images\/14768422705806d31e60125.png\" alt=\"OMS Portal Settings\" \/><\/p>\n<p>In Settings, go to the Connected Sources -&gt; Windows Servers. Note the Workspace ID and the Primary Key as shown below:<\/p>\n<p><img src=\"\/images\/14768422755806d323b2caa.png\" alt=\"OMS Portal ID and Key\" \/><\/p>\n<h3>ARM Template Sections for OMS integration<\/h3>\n<p>Within the VM resource, you need to define the OMS extension as shown below:<\/p>\n<pre><code>  \"resources\": [\n    {\n      \"type\": \"extensions\",\n      \"name\": \"Microsoft.EnterpriseCloud.Monitoring\",\n      \"apiVersion\": \"[variables('apiVersion')]\",\n      \"location\": \"[resourceGroup().location]\",\n      \"dependsOn\": [\n        \"[concat('Microsoft.Compute\/virtualMachines\/', variables('vmName'))]\"\n      ],\n      \"properties\": {\n        \"publisher\": \"Microsoft.EnterpriseCloud.Monitoring\",\n        \"type\": \"MicrosoftMonitoringAgent\",\n        \"typeHandlerVersion\": \"1.0\",\n        \"autoUpgradeMinorVersion\": true,\n        \"settings\": {\n          \"workspaceId\": \"Your Workspace ID Here\"\n        },\n        \"protectedSettings\": {\n          \"workspaceKey\": \"Your Workspace Key Here\"\n        }\n      }\n    }\n  ]<\/code><\/pre>\n<p>The above configures the OMS on the VM. Note that you need the nested extension resource of type &quot;Microsoft.EnterpriseCloud.Monitoring&quot;. <\/p>\n<p>Also, note the Workspace Id and Key in the template section above. Enter the values as per your environment which we found in the Prerequisites section above. <\/p>\n<h3>Providing the Workspace ID and Workspace Key Dynamically<\/h3>\n<p>You can also provide the Workspace Id and the Workspace Key dynamically by only using the OMS Workspace name. Follow the below sample. Note the use of reference, listKeys, and resourceId helper functions.<\/p>\n<pre><code>\"settings\": {\n          \"workspaceId\": \"[reference(resourceId('Microsoft.OperationalInsights\/workspaces\/', parameters('workspaceName')), '2015-03-20').customerId]\"\n        },\n        \"protectedSettings\": {\n          \"workspaceKey\": \"[listKeys(resourceId('Microsoft.OperationalInsights\/workspaces\/', parameters('workspaceName')), '2015-03-20').primarySharedKey]\"\n        }<\/code><\/pre>\n<p><strong>Reference:<\/strong> You can check the complete quick starter template for OMS integration here: <a href=\"https:\/\/github.com\/Azure\/azure-quickstart-templates\/tree\/master\/201-oms-extension-windows-vm\">GitHub Sample - Deployment of a Windows VM with OMS Extension<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Oct 16, 2016",
			"slug": "step-by-step-arm-templates-deploying-a-windows-vm-with-oms-integration",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>You can deploy a Windows VM with OMS inte...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Automation Preview Solution - Start\/Stop VMs during off-hours ",
			"postDate": "11-10-2016",
			"tags": [
				"Automation",
				"Azure",
				"AzureResourceManager",
				"Runbooks"
			],
			"category": "Azure",
			"body": "<p>Starting and Stopping VMs during off-hours can mean lots of cost optimizations for you. We have been implementing this via custom Runbooks and schedules for various customers. Now there is out of the box support for this within Azure. The feature is currently in Preview but you can build on this.<\/p>\n<h3>What do I need - Prerequisites<\/h3>\n<p>Before beginning check that your region has this feature available. Just like with any other automation solution, you will need to have:<\/p>\n<ol>\n<li>OMS Workspace (or you can create new while adding the solution)<\/li>\n<li>Automation Account (or you can create new)<\/li>\n<li>Azure Run As account (and not the Microsoft Account)<\/li>\n<li>For email support, Office 365 business-class subscription is required<\/li>\n<\/ol>\n<p>Note: The VMs that you want to manage should be in the same subscription and resource group as where the Automation account resides.<\/p>\n<h3>How to Add<\/h3>\n<p>To Add the solution, click on &quot;+ New&quot; symbol and search for &quot;Start\/Stop VMs during off-hours&quot;. You will find the below solution available to be created:<\/p>\n<p><img src=\"\/images\/1476808753580650317ab68.png\" alt=\"Start and Stop VMs Preview Solution\" \/><\/p>\n<h3>What does it Contain<\/h3>\n<p>The solution is a combination of various automation assets:<\/p>\n<ol>\n<li>Runbooks<\/li>\n<li>Variables<\/li>\n<li>Schedules<\/li>\n<li>Credentials<\/li>\n<\/ol>\n<p>You can change some configurations during and some after the deployment. <\/p>\n<p>Find out more here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/automation-solution-vm-management\/\">Start\/Stop VMs during off-hours [Preview]<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Oct 11, 2016",
			"slug": "azure-automation-preview-solution-start-stop-vms-during-off-hours",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Starting and Stopping VMs during off-hours can mean lots of cost optimizations for you. We have been implementing this via custom Runbooks and schedules for various customers. Now there is out of the box support for this within Azure. The feature is currently in Preview but you can build on this....<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure RemoteApp is going away. New Purchases in portal are now stopped ",
			"postDate": "10-10-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"RemoteApp"
			],
			"category": "Azure",
			"body": "<p>Today I got an email saying &quot;Action recommended: Deleting unnecessary RemoteApp collections can save you money&quot;. This email is also a reminder from Microsoft that the RemoteApp is going away. We need to plan for the migration for the existing RemoteApps to other platforms.<\/p>\n<h3>What this means<\/h3>\n<p>This means various things to you. Most prominently:<\/p>\n<ul>\n<li>Over the next year, the support for Remote App is going away<\/li>\n<li>You need to plan and migrate the existing RemoteApp application to other platforms<\/li>\n<li>New Purchases in the Azure portal for RemoteApp are no longer available<\/li>\n<\/ul>\n<h3>When is the service coming to Stop<\/h3>\n<p>The service will have support through <strong>August 31st, 2017<\/strong>. That's when this service will come to a stop. New service purchase was stopped effective October 1st, 2016.<\/p>\n<h3>What are my Options<\/h3>\n<p>You have various options for migration. The option being <strong>recommended<\/strong> by Microsoft is using &quot;<strong>Citrix XenApp express<\/strong>&quot;. In fact, Microsoft is partnering up with Citrix on this. This service is not yet available and is currently under development. As this will be the native option in Azure this will be your best bet once it is announced. You can learn more about this solution here on Citrix site: <a href=\"https:\/\/www.citrix.com\/global-partners\/microsoft\/remote-app.html\">Citrix and Microsoft<\/a><\/p>\n<p>The second option is to use Remote Desktop Services (RDS) deployed on Azure IaaS. This means to set up the infrastructure yourself and then deploy and host the RDS solution on that infrastructure in Azure. You can know more about the steps here: <a href=\"https:\/\/technet.microsoft.com\/en-us\/windows-server-docs\/compute\/remote-desktop-services\/host-desktops-and-apps-in-remote-desktop-services\">Host desktops and apps in Remote Desktop Services on Azure<\/a><\/p>\n<p>Another option is to use  hosted solutions from various 3rd party vendors. You can find such solution from various partners from the Azure marketplace. You can also read and get to know the complete list of these hosting partners here: <a href=\"https:\/\/technet.microsoft.com\/en-us\/windows-server-docs\/compute\/remote-desktop-services\/rds-hosting-partners\">RDS - Partners for hosting desktops and apps<\/a><\/p>\n<p><strong>In conclusion,<\/strong> I will recommend to wait and look out for Citrix XenApp express solution. If you need new remote application solutions then you need to either deploy your own solution or use one of the hosted solutions by 3rd party vendors. You can read more about the official announcement here: <a href=\"https:\/\/blogs.technet.microsoft.com\/enterprisemobility\/2016\/08\/12\/application-remoting-and-the-cloud\/?WT.mc_id=azurebg_email_Trans_1218_No_Usage_Azure_RemoteApp\">Application Remoting and the Cloud<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Oct 10, 2016",
			"slug": "azure-remoteapp-is-going-away-new-purchases-in-portal-are-now-stopped",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Today I got an email saying \"Action recommended: Deleting unnecessary RemoteApp collections can save you money\". This email is also a reminder from Microsoft that the RemoteApp is going away. We need to plan for the migration for the existing RemoteApps to other platforms.<\/p>\n<h3>What ...<\/h3>\n",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Iterating and creating multiple instances of a resource",
			"postDate": "27-09-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In Azure Resource Manager (ARM) templates, you can define the variable once and then iterate\/loop over that definition and create multiple instances of that resource.\nThere are 3 special constructs in ARM templates to help you with this. <\/p>\n<p>These <strong>constructs<\/strong> are:<\/p>\n<ul>\n<li><strong>copy<\/strong> - This is a property that is defined within the resource. This is the construct which when defined indicates that this resource needs to be looped over and created multiple times. It also specifies the number of times to iterate via &quot;count&quot; property.<\/li>\n<li><strong>copyIndex()<\/strong> - Used to access the current iteration value. Its value for the first iteration is <strong>zero<\/strong>. For the second iteration, its value is 1 and so on... You can pass it an integer (number) as a parameter. Whatever number you pass that will become the value for the first iteration and subsequent iterations. E.g. copyIndex(20) will compute to 20 in the first iteration, 21 in the second iteration and so on.<\/li>\n<li><strong>length<\/strong> - This is the method of arrays. It computes the number of elements in an array. It can be used to set the &quot;count&quot; property of &quot;copy&quot; construct.<\/li>\n<\/ul>\n<p><strong>Note:<\/strong> Arrays are always <strong>zero indexed<\/strong>. What that means is that the first element of the array is indexed at 0, the second element of the array is indexed at 1, and so on...<\/p>\n<h3>1. Simple Example<\/h3>\n<p>Let us understand these constructs using an example.<\/p>\n<pre><code>\"parameters\": { \n  \"count\": { \n    \"type\": \"int\", \n    \"defaultValue\": 3 \n  } \n}, \n\"resources\": [ \n  { \n      \"name\": \"[concat('HarvestingClouds-', copyIndex(100))]\", \n      \"type\": \"Microsoft.Web\/sites\", \n      \"location\": \"Central US\", \n      \"apiVersion\": \"2015-08-01\",\n      \"copy\": { \n         \"name\": \"websitescopy\", \n         \"count\": \"[parameters('count')]\" \n      }, \n      \"properties\": {\n          \"serverFarmId\": \"hostingPlanName\"\n      }\n  } \n]<\/code><\/pre>\n<p>The above example will <strong>result<\/strong> in creation of below 3 web apps in Azure:<\/p>\n<ul>\n<li>HarvestingClouds-100<\/li>\n<li>HarvestingClouds-101<\/li>\n<li>HarvestingClouds-102<\/li>\n<\/ul>\n<p>Note the usage of &quot;copy&quot; property in the above code example:<\/p>\n<pre><code> \"copy\": { \n             \"name\": \"websitescopy\", \n             \"count\": \"[parameters('count')]\" \n          }<\/code><\/pre>\n<p>As you can notice above, the value of this property is another JSON object. This object has further two properties: <\/p>\n<ul>\n<li>First is the name property, which provides the name to the looping construct. This can be any meaningful name. <\/li>\n<li>The second property is the count, which specifies how many times this resource definition should be deployed. Note that the value is set to the parameter named &quot;count&quot;. The name of the parameter can be anything but the value of the parameter has to be a number (i.e. an integer).<\/li>\n<\/ul>\n<p>Next, note how the name of the web application is constructed using the copyIndex() helper function.<\/p>\n<pre><code>\"name\": \"[concat('HarvestingClouds-', copyIndex(100))]\"<\/code><\/pre>\n<p>The above value uses two helper functions. First is the &quot;concat()&quot; which is concatenating (i.e. joining) two values. First value is the prefix string &quot;HarvestingClouds-&quot;. Second parameter and the second helper function is <code>copyIndex(100)<\/code>. This specifies the current iteration value, which is offset with 100. So for the first iteration, the value will be 0+100 = 100, for the second iteration the value will be 1+100 = 101 and so on...<\/p>\n<h3>2. Example with an Array<\/h3>\n<p>Let's assume that you want to deploy multiple web apps for different purposes. You need one web app for Production, one for Staging or testing and one for Development. You want to name the web apps deployed with the purpose concatenated.\nThe below example uses an array to set the values for the web app name:<\/p>\n<pre><code>\"parameters\": { \n  \"purpose\": { \n     \"type\": \"array\", \n         \"defaultValue\": [ \n         \"Production\", \n         \"Staging\", \n         \"Development\" \n      ] \n  }\n}, \n\"resources\": [ \n  { \n      \"name\": \"[concat('HarvestingClouds-', parameters('purpose')[copyIndex()])]\", \n      \"type\": \"Microsoft.Web\/sites\", \n      \"location\": \"Central US\", \n      \"apiVersion\": \"2015-08-01\",\n      \"copy\": { \n         \"name\": \"websitescopy\", \n         \"count\": \"[length(parameters('purpose'))]\" \n      }, \n      \"properties\": {\n          \"serverFarmId\": \"hostingPlanName\"\n      } \n  } \n]<\/code><\/pre>\n<p>The <strong>output<\/strong> of the above sample will be 3 web apps deployed in Azure with following names:<\/p>\n<ul>\n<li>HarvestingClouds-Production<\/li>\n<li>HarvestingClouds-Staging<\/li>\n<li>HarvestingClouds-Development<\/li>\n<\/ul>\n<p>Note in the above code sample that the parameter &quot;purpose&quot; is an array with 3 values i.e. Production, Staging, and Development. Then in the &quot;copy&quot; construct the count property is set using the length of this array as shown below. As there are 3 elements in the array, the value of count will be 3 and the resource will be deployed 3 times.<\/p>\n<pre><code>\"count\": \"[length(parameters('purpose'))]\" <\/code><\/pre>\n<p>Next, the name of the web app is set using the copyIndex() and the array itself as shown below:<\/p>\n<pre><code>\"name\": \"[concat('HarvestingClouds-', parameters('purpose')[copyIndex()])]\"<\/code><\/pre>\n<p>As earlier, it uses concat helper function to add two strings. The first string is simple text i.e. &quot;HarvestingClouds-&quot;, which becomes the prefix for the web app name. Second is finding out the value of the array based on the current iteration. For the first iteration, copyIndex() will compute to zero, therefore the second parameter becomes <code>parameters('purpose')[0]<\/code>. This will fetch the 0th element of the array which is Production. Similarly, for the second iteration, copyIndex() will compute to 1, therefore the second parameter becomes <code>parameters('purpose')[1]<\/code>. This will fetch the second element of the array (or element at index value 1) which is Staging, and so on...<\/p>\n<h3>3. Depending upon resources being deployed by the copy Loop<\/h3>\n<p>Let's assume you want to deploy a storage account. But you want to deploy it only after all the web apps are deployed by the loop. In this scenario, the dependsOn property of a resource is set to the name of the &quot;copy&quot; property of the resource, rather than the resource itself.<\/p>\n<pre><code>    {\n        \"apiVersion\": \"2015-06-15\",\n        \"type\": \"Microsoft.Storage\/storageAccounts\",\n        \"name\": \"teststorage101\",\n        \"location\": \"[resourceGroup().location]\",\n        \"properties\": {\n            \"accountType\": \"Standard_LRS\"\n         }\n       \"dependsOn\": [\"websitescopy\"]\n    }<\/code><\/pre>\n<p>Note above that the dependsOn property is set to the name property of the copy in the earlier web app example. This storage account will not be deployed until all 3 web apps are not deployed.<\/p>\n<h3>4. Limitations<\/h3>\n<p>There are two limitations on the use of the copy to iterate and create multiple resource instances:<\/p>\n<ol>\n<li><strong>Nested Resources<\/strong> - You cannot use a copy loop for a nested resource. If you need to create multiple instances of a resource that you typically define as nested within another resource, you must instead create the resource as a top-level resource and define the relationship with the parent resource through the <strong>type<\/strong> and <strong>name<\/strong> properties.<\/li>\n<li><strong>Looping Properties of a Resource<\/strong> - You can only use copy on resource types, not on properties within a resource type. E.g. Creating multiple data disks within a VM.<\/li>\n<\/ol>\n<p>That is all there is to iterate and creating multiple resources from a single definition. When your templates will start becoming complex then these constructs\/helper functions will help you a lot. E.g. you may need to deploy multiple load balanced resources, then you can use the concepts defined in this post.<\/p>\n<p>You can also refer the official documentation here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/resource-group-create-multiple\/\">copy, copyIndex, and length<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Sep 27, 2016",
			"slug": "step-by-step-arm-templates-iterating-and-creating-multiple-instances-of-a-resource",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In Azure Resource Manager (ARM) templates...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Deploying ARM Templates using Visual Studio",
			"postDate": "20-09-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates",
				"VisualStudio"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In the last blog we saw <a href=\"\/post\/step-by-step-arm-templates-authoring-arm-templates-using-visual-studio\/\">How to use Visual Studio to author ARM templates<\/a>. In this blog we will see how to use Visual Studio (VS) to deploy the template without leaving VS.<\/p>\n<p>Deploying with Visual Studio is very simple, straightforward and very intuitive. Just follow the below steps.<\/p>\n<ol>\n\n    <li>\nEither go to the Solution Explorer -> Right Click on the project and select \"Deploy -> New Deployment\" as shown below:<br \/>\n<img src=\"\/images\/147578624957f6b6090d5eb.png\" alt=\"New Deployment - Solution Explorer\" \/><br \/>\n\nOr you can go to the menu option Project -> Deploy -> New Deployment as shown below:<br \/>\n<img src=\"\/images\/147578624157f6b601b647b.png\" alt=\"New Deployment - Project Menu\" \/>\n\n<br \/>\nOnce you click on the \"New Deployment\", you will be presented with the below Dialog for the deployment.<br \/>\n<img src=\"\/images\/147578742957f6baa5bfb1c.png\" alt=\"New Deployment Dialog\" \/><br \/>\n\nIf you are not logged in then it will ask you to log into your Azure account. <br \/>\n\n    <\/li>\n\n    <li>\nIn the Dialog for \"Deploy to Resource Group\" select the Subscription by clicking on the first drop down.<br \/>\n    <\/li>\n\n    <li>\nNext click on the drop down for the Resource Group. You can either select an existing Resource Group or you can click on \"<Create New...>\" option to create a new resource group for the current deployment.\n<br \/>\n<img src=\"\/images\/147578768757f6bba7dd5ec.png\" alt=\"Resource Group creation\" \/>\n<br \/>\nIf you click on \"<Create New...>\" option to create a new Resource Group then you will be presented with an additional popup.\n<br \/>\n<img src=\"\/images\/147578794457f6bca893e66.png\" alt=\"Resource Group creation additional Popup\" \/><br \/>\nIn this additional popup, type the name for your new resoruce group and the location in Azure where this should be created. Click \"Create\" once done in the additional popup. <br \/><br \/>\n    <\/li>\n\n    <li>\nNext, we are going to provide the value for the parameters. Go ahead and click on the \"Edit Parameters...\" link in the \"Deploy to Resource Group\" dialog. This will open another popup to provide the parameters. <br \/>\nButton to edit parameters is shown below:<br \/>\n<img src=\"\/images\/147578820657f6bdae623f9.png\" alt=\"Edit Parameters\" \/> <br \/>\n\nAdditional dialog to provide parameters is shown below: <br \/>\n<img src=\"\/images\/147578821157f6bdb3ec989.png\" alt=\"Providing Parameters\" \/> <br \/>\n\nNote the following points in the parameters:\n<ol type=\"a\">\n<li>Corresponding to the string parameters, a text box is provided.<\/li>\n<li>For the secure string parameters like password, a secure password text box is provided.<\/li>\n<li>Corresponding to the parameters for which you have defined the \"Allowed Values\" in your template, a combo box (or drop Down) is provided with the \"default Value\" selected by default.<\/li>\n<\/ol>\n Click Ok once done\n   <\/li>\n\n    <li>\nNext, click on the Deploy button to deploy the template to Azure.\n    <\/li>\n\n    <li>\nYou can check the results in the <b>Outputs<\/b> window in the Visual Studio. Along with time stamp, it will show you what steps Visual Studio took to perform the deployment. It uses the values of parameters you provided and uses the PowerShell script to deploy the resources. You will notice the PowerShell window opening and prompt for the Admin Password. \n<br \/>\n<b>Note 1: <\/b>The PowerShell window may not come above as active window. Just search and click on the window in your Taskbar. <br \/>\nProvide the password and hit Enter as shown below:\n<img src=\"\/images\/147578930357f6c1f7c0b65.png\" alt=\"PowerShell window\" \/> <br \/>\n<br \/>\n<b>Note 2: <\/b>It may take some time to complete the deployment after that. Wait and do not close the PowerShell window. It should automatically close once done.\n<br \/>\n<b>Note 3: <\/b>Once the deployment completes the last line in Output window in Visual Studio will be: \"Successfully deployed template...\" as shown below:\n<br \/>\n<img src=\"\/images\/147578931057f6c1fecaa6a.png\" alt=\"Success - Output Window\" \/> <br \/>\n\n    <\/li>\n\n<\/ol>\n<p>This is it! Navigate to the Azure portal and validate the deployed resources in your selected resource group.<\/p>",
			"addpost": "addpost",
			"dated": "Sep 20, 2016",
			"slug": "step-by-step-arm-templates-deploying-arm-templates-using-visual-studio",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In the last blog we saw <a href=\"\/post\/st...\"><\/a><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Authoring ARM Templates using Visual Studio",
			"postDate": "14-09-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates",
				"VisualStudio"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p><strong>Visual Studio<\/strong> is a very powerful tool when it comes to authoring ARM Templates. <\/p>\n<p><strong>Key features<\/strong> which make it a tool of our choice are:<\/p>\n<ul>\n<li>In-house support for ARM Templates<\/li>\n<li>Smart IntelliSense<\/li>\n<li>Pre-populated templates for various Azure resources<\/li>\n<li>JSON Outlining<\/li>\n<li>Easy Deployment options<\/li>\n<\/ul>\n<p>The screenshots in this blog post are from Visual Studio 2013. You can use other newer versions as well.<\/p>\n<h3>Pre-Requisites<\/h3>\n<p>You need to have Azure SDK installed to get true power of Visual Studio with Azure integration. If you don't have it already, you can install the same from here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/downloads\/\">Azure SDK Downloads<\/a><\/p>\n<h3>Authoring First ARM Template in Visual Studio<\/h3>\n<p>Authoring with Visual Studio is very easy. <\/p>\n<ol type=\"1\">\n<li>To get started just launch the Visual Studio from the Start menu.<\/li>\n<li>Next, Create a new Project of type \"Azure Resource Group\" by navigating to Templates -> Visual C# -> Cloud <br \/><br \/>\n\n<img src=\"\/images\/147576108957f653c1768fc.png\" alt=\"New Project\" \/>\n<br \/>\n\n<\/li>\n\n<li>\n    Next, you will be presented with a dialog to \"Select Azure Template\". If you want to author from scratch then choose a Blank Template. Else select one of the starter template. For this blog, we will be using \"Windows Virtual Machine\" Template.<br \/><br \/>\n    <img src=\"\/images\/147576828457f66fdc0f0e6.png\" alt=\"Selecting Azure Template\" \/>\n    <br \/>\n<\/li>\n\n<li>\n    Project is created with various folders and files. You can explore the project in the solution explorer in Visual Studio.<br \/><br \/>\n    <img src=\"\/images\/147576986357f6760758619.png\" alt=\"Solution Explorer\" \/>\n    <br \/>\n\nLet us see what these folders and files are:\n        <ol type=\"a\">\n            <li><b>Scripts<\/b>: The single PS1 file is to create a new Resource Group and deploy the ARM Template. It uses \"New-AzureRmResourceGroupDeployment\" PowerShell cmdlet to deploy the template. <\/li>\n            <li><b>Templates<\/b>: \"<i>WindowsVirtualMachine.json<\/i>\" is the main ARM Template file that we are interested in. Also, \"<i>WindowsVirtualMachine.parameters.json<\/i>\" is the parameters file for the ARM template.<\/li>\n            <li><b>Tools<\/b>: This folder contains the \"AzCopy.exe\" file to help you copy any artifacts to Azure.<\/li>\n        <\/ol>\n<\/li>\n\n<li>\n    Double click and open the \"<i>WindowsVirtualMachine.json<\/i>\" file to open it. You will be presented with a huge JSON file. Collapse the section by clicking the small \"-\" signs to the left of the file. Also notice the <b>JSON Outline<\/b> panel to the left. This is your biggest friend in Visual Studio when authoring ARM Templates.<br \/><br \/>\n    <img src=\"\/images\/147577487757f6899d297b5.png\" alt=\"\" \/>\n    <br \/>\nYou can immediately notice that key sections both in the template in the middle and in the JSON Oultine panel on the left (in the image above) are:\n               <ol type=\"a\">\n                   <li>parameters<\/li>\n                   <li>variables<\/li>\n                   <li>resources<\/li>\n               <\/ol>\nYou can click on any of the elements in the left JSON Outline panel and the same section will be highlighted in the center, in the JSON template file.\n    <br \/>\n\n<\/li>\n\n<li>\n    Next, let us look at JSON Outline panel and check how it can provide us more information and help us in authoring templates.<br \/><br \/>\n    <img src=\"\/images\/147578115457f6a2226c2be.png\" alt=\"JSON Outline Panel\" \/>\n    <br \/>\n    You can see that the panel provides a special icon for each type of the resource. In our current template the various resources listed are:\n    <ol type=\"a\">\n        <li>StorageAccount<\/li>\n        <li>PublicIPAddress<\/li>\n        <li>VirtualNetwork<\/li>\n        <li>NetworkInterface<\/li>\n        <li>VirtualMachine<\/li>\n    <\/ol>\n\nClick on each of the resources and inspect how their JSON structure looks and differs. You will immediately notice that the major difference in each of these resources is in their <b>Type<\/b> and <b>Properties<\/b>.\n\n<h3>Adding New Resource<\/h3> \nLet's assume you want to add a new resource to this template. You have 2 ways to achieve the same:\n    <ol>\n    <li><b>Method 1<\/b> - Create a new resource by modifying and adding the JSON for the new resource in the template.<\/li>\n    <li><b>Method 2<\/b> - Let Visual Studio add the resource for you. Right click anywhere in the resources area of the JSON Outline Panel or the small \"+\" box at the top left of the panel (as shown in the image above) and VS will give you a new popup to add the resource from pre-defined resources as shown below.<\/li>\n    <\/ol>\n    <img src=\"\/images\/147578170157f6a4457bae0.png\" alt=\"Add Resource\" \/>\n<br \/>\nOnce you click Add the JSON for resource will be added to the template and the corresponding new element will appear in the JSON Outline Panel.\n<br \/>\n\n<h3>Deleting a Resource<\/h3> <br \/>\nIf you need to delete a resource, simply right click on that resource in the JSON outline panel on the left and then select \"Delete Resource\".\n<br \/>\n\n<h3>Using Intellisense<\/h3>     \nThe last thing to notice is the use of <b>Intellisense<\/b> in Visual Studio which helps you as you are editing the templates.<br \/><br \/>\n    <img src=\"\/images\/147578465457f6afce4debb.png\" alt=\"Intellisense\" \/>\n    <br \/>\n     When you type quotes the closing quotes are automatically provided. Also, as you can see in the above image the various valid values, that can come there are also shown along with small tooltip about the data type. If the Intellisense doesn't come up automatically, then press Ctrl + Space to get Intellisense.\n<\/li>\n\n<\/ol>\n<p>In the end, the Visual Studio makes authoring ARM templates much more manageable and easy for you.<\/p>\n<p>In the next blog, we will see how to use Visual Studio to Deploy the templates.<\/p>",
			"addpost": "addpost",
			"dated": "Sep 17, 2016",
			"slug": "step-by-step-arm-templates-authoring-arm-templates-using-visual-studio",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p><strong>Visual Studio<\/strong> is a very ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Creating Parameters file for an ARM Template",
			"postDate": "14-09-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"JSON",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>You can pass the input values for the Parameters in your ARM template using an additional JSON file. This additional file is what we will be referring to as <strong>Parameters File<\/strong>.<\/p>\n<p>The only restriction on a parameters file is that the size of the parameter file cannot be more than 64 KB.<\/p>\n<p>Parameters file follows a similar structure to the ARM Template. They are very simple as compared to the ARM template. In all they have 3 sections as explained below:<\/p>\n<ol>\n<li><strong>$schema<\/strong> - Required Object - Location of the JSON schema file that describes the version of the template language.<\/li>\n<li><strong>contentVersion<\/strong> - Required Object - Version of the template (such as 1.2.0.20). When deploying resources using the template, this value can be used to make sure that the right template is being used.<\/li>\n<li><strong>parameters<\/strong> - Required Object - This is a JSON object which contains various objects as it's members. Each object within the &quot;parameters&quot; object represent a value for a parameter corresponding to your ARM template.<\/li>\n<\/ol>\n<p>Let's check how the parameters file will look like for the ARM template we have built earlier for deploying Storage Account and a Virtual Network.<\/p>\n<pre><code>{\n    \"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentParameters.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n        \"vhdStorageName\": {\n            \"value\": \"harvestingstorage101\"\n        },\n        \"virtualNetworkName\": {\n            \"value\": \"testvNet101\"\n        }\n    }\n}<\/code><\/pre>\n<p>Note that the only 2 parameter values are provided. These correspond to the parameters in the ARM template. <\/p>\n<p><strong>Note:<\/strong> The parameter names should match to the parameters defined in the ARM template.<\/p>",
			"addpost": "addpost",
			"dated": "Sep 14, 2016",
			"slug": "step-by-step-arm-templates-creating-parameters-file-for-an-arm-template",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>You can pass the input values for the Par...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Deploying Template Using Azure PowerShell",
			"postDate": "11-09-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"PowerShell",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In the previous blog you learned <a href=\"\/post\/step-by-step-arm-templates-building-your-first-arm-template\/\">How to build your first ARM Template<\/a> . Now that you have a fully functional ARM template we want to deploy this template to Azure.<\/p>\n<p>There are various options to deploy a template to Azure. We already saw in the last blog <a href=\"\/post\/step-by-step-arm-templates-deploying-template-using-azure-portal\/\">How to deploy template using <strong>Azure Portal<\/strong><\/a>. Now we will look at <strong>Azure PowerShell<\/strong> as more programmatic and automated way to deploy the template.<\/p>\n<h2>Pre-requisites<\/h2>\n<p>Things you should know before deployment<\/p>\n<ol>\n<li><strong>Azure PowerShell<\/strong> - This should be installed on the machine from where the Steps will be followed. If you don't have this then use this link to get it: <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/powershell-install-configure\/\">Get Azure PowerShell<\/a><\/li>\n<li><strong>Azure Subscription<\/strong> - where you want to deploy your template<\/li>\n<li><strong>Resource Group<\/strong> - This is the resource group in Azure where you will be deploying your template. You can create a new resource group (for the resources that will be deployed by the template) or use an existing one.<\/li>\n<li><strong>Parameters<\/strong> - Value of the input parameters to the template should be known to you for the deployment. Follow all your naming conventions when defining the parameters for deployments of resources in Azure. <\/li>\n<li><strong>Internet Connectivity<\/strong> - This should be present on the machine from where the Steps will be followed for connectivity to Azure<\/li>\n<\/ol>\n<h2>Steps for Deployment<\/h2>\n<ul>\n<li>First, launch a PowerShell window as an Administrator<\/li>\n<li>Then, log into the Azure account. <\/li>\n<\/ul>\n<p>Run the below cmdlet to log into Azure:<\/p>\n<pre><code>Add-AzureRmAccount<\/code><\/pre>\n<ul>\n<li>Select appropriate Azure Subscription<\/li>\n<\/ul>\n<p>You have two choices here. You can either use below cmdlet to use Subscription ID<\/p>\n<pre><code>Set-AzureRmContext -SubscriptionID &lt;YourSubscriptionId&gt;<\/code><\/pre>\n<p>Or you can use the Subscription name with the below cmdlet:<\/p>\n<pre><code>Select-AzureRmSubscription -SubscriptionName \"&lt;Your Subscription Name&gt;\"<\/code><\/pre>\n<ul>\n<li>Next, if you already have a resource group to which you want to deploy the template then skip this step. Else create a new resource group. A resource in Azure ARM architecture can only exist in a resource group. <\/li>\n<\/ul>\n<p>Use below cmdlet to create a new Resource Group:<\/p>\n<pre><code>New-AzureRmResourceGroup -Name TestResourceGroup01 -Location \"Central US\"<\/code><\/pre>\n<ul>\n<li>Before deploying the Resource Template to Azure, you should Test it. This step is optional but highly recommended.<\/li>\n<\/ul>\n<p>Use the below cmdlet to test and validate your template:<\/p>\n<pre><code>Test-AzureRmResourceGroupDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToJsonTemplate&gt;<\/code><\/pre>\n<ul>\n<li>Now comes the last step i.e. to deploy the template. You have two options when deploying the template. You can either deploy a template without any parameters (if none are required) or you need to specify the parameters. Let's check both these options next.<\/li>\n<\/ul>\n<h3>Deploying Template which doesn't need Parameters<\/h3>\n<p>You can deploy such template using <code>New-AzureRmResourceGroupDeployment<\/code> cmdlet.\nIf the template file is on a local directory then use the below cmdlet:<\/p>\n<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt;<\/code><\/pre>\n<p>If the template file is uploaded to some hosted location and is accessible via a link, then use the below cmdlet to deploy the template:<\/p>\n<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateUri &lt;LinkToTemplate&gt;<\/code><\/pre>\n<h3>Deploying Template with Parameters<\/h3>\n<p>Deploying of the template is exactly similar as the previous section. You use the same cmdlet. To specify the parameter, you have 4 options. Use the below cmdlets for the option you want to use.<\/p>\n<p><strong>Option 1<\/strong> - Using Inline Parameter<\/p>\n<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt; -myParameterName \"parameterValue\" -secondParameterName \"secondParameterValue\"<\/code><\/pre>\n<p><strong>Option 2<\/strong> - Using Parameter Object<\/p>\n<pre><code>$parameters = @{\"&lt;ParameterName&gt;\"=\"&lt;Parameter Value&gt;\"}\nNew-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt; -TemplateParameterObject $parameters<\/code><\/pre>\n<p><strong>Option 3<\/strong> - Using Parameter file which is in local environment<\/p>\n<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateFile &lt;PathToTemplate&gt; -TemplateParameterFile &lt;PathToParameterFile&gt;<\/code><\/pre>\n<p><strong>Option 4<\/strong> - Using Parameter file which is located externally and can be referenced via Link<\/p>\n<pre><code>New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName TestResourceGroup01 -TemplateUri &lt;LinkToTemplate&gt; -TemplateParameterUri &lt;LinkToParameterFile&gt;<\/code><\/pre>\n<h3>Key Gotchas<\/h3>\n<ol>\n<li>If you provide values for a parameter in both the local parameter file and inline, the inline value takes precedence.<\/li>\n<li>You cannot use inline parameters with an external parameter file. All inline parameters are ignored when you specify &quot;TemplateParameterUri&quot; parameter.<\/li>\n<li>As a best practice, do not store sensitive infomation in the parameters file e.g. Local admin password. Instead either provide these dynamically using inline parameters. Or store them using the Azure Key vault and then reference the key vault in your parameters file.<\/li>\n<\/ol>\n<p>You can find more details about these cmdlets here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/resource-group-template-deploy\/#deploy-with-powershell\">Deploy resources with Resource Manager templates and Azure PowerShell<\/a><\/p>\n<p>In the next blog, we will see how to create a Parameters File for providing parameters dynamically to the template.<\/p>",
			"addpost": "addpost",
			"dated": "Sep 11, 2016",
			"slug": "step-by-step-arm-templates-deploying-template-using-azure-powershell",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In the previous blog you learned <a href=\"...\"><\/a><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Deploying Template Using Azure Portal",
			"postDate": "08-09-2016",
			"tags": [
				"ASR",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In the last blog you learned <a href=\"\/post\/step-by-step-arm-templates-building-your-first-arm-template\/\">How to build your first ARM Template<\/a> . Now that you have a fully functional ARM template we want to deploy this template to Azure.<\/p>\n<p>There are various options to deploy a template to Azure. Using Azure portal is by far the easiest and most intuitive option for the deployment. Follow the steps in this blog to deploy your template to Azure.<\/p>\n<h2>Pre-requisites<\/h2>\n<p>Things you should know before deployment<\/p>\n<ol>\n<li><strong>Azure Subscription<\/strong> - where you want to deploy your template<\/li>\n<li><strong>Resource Group<\/strong> - This is the resource group in Azure where you will be deploying your template. You can create a new resource group (for the resources that will be deployed by the template) or use an existing one.<\/li>\n<li><strong>Parameters<\/strong> - Value of the input parameters to the template should be known to you for the deployment. Follow all your naming conventions when defining the parameters for deployments of resources in Azure.<\/li>\n<\/ol>\n<h2>Steps for Deployment<\/h2>\n<ol>\n<li>First, log into the Azure Portal.<\/li>\n<li>\n<p>Next, go to &quot;New&quot; and type &quot;Template deployment&quot; in the search box and hit enter.<\/p>\n<p><img src=\"\/images\/147559616157f3cf81381da.png\" alt=\"New Deployment\" \/><\/p>\n<\/li>\n<li>\n<p>Next, click on the <strong>Template Deployment<\/strong> and then click on &quot;Create&quot;<\/p>\n<p><img src=\"\/images\/147559654057f3d0fc1bf5c.png\" alt=\"Create Deployment\" \/><\/p>\n<\/li>\n<li>\n<p>Now click on the &quot;<strong>Template (Edit Template)<\/strong>&quot;. It will open a panel to paste your template. Delete whatever is auto populated in the template area. Copy your whole json template and paste it here. Note that the left section in the new panel will update to show you what parameters, variables, and resources you have in the template. Click on &quot;Save&quot; once done.<\/p>\n<p><img src=\"\/images\/147559697957f3d2b32ff67.png\" alt=\"Editing Template\" \/><\/p>\n<\/li>\n<li>\n<p>Next, click on the &quot;<strong>Parameters (Edit Parameters)<\/strong>&quot; on the left side. The parameters will be automatically picked from the template. The parameters for which the default value is provided will be automatically populated. Rest you will have to provide the inputs. Click Ok once done.<\/p>\n<p><img src=\"\/images\/147559719657f3d38c652e3.png\" alt=\"Providing Parameters\" \/><\/p>\n<\/li>\n<li>\n<p>Next, you have the option to select the <strong>Resource Group<\/strong>. You can either create a new resource group (for all the resources that will be deployed via the template) or you can use and existing resource group.<\/p>\n<p><img src=\"\/images\/147559727457f3d3da45879.png\" alt=\"Resource Group Selection\" \/><\/p>\n<\/li>\n<li>\n<p>The last option is to click on the &quot;<strong>Legal Terms<\/strong>&quot; and read through the terms. If you agree then click on the &quot;Purchase&quot; button. <\/p>\n<p><img src=\"\/images\/147559762057f3d534eae90.png\" alt=\"Legal Terms\" \/><\/p>\n<\/li>\n<li>Finally, click on the <strong>Create<\/strong> to submit the deployment. <\/li>\n<\/ol>\n<p>You can monitor the job performing the deployments and progress of the same. After some time the deployment will finish successfully and you can view the resources in the resource group you selected.<\/p>",
			"addpost": "addpost",
			"dated": "Sep 08, 2016",
			"slug": "step-by-step-arm-templates-deploying-template-using-azure-portal",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In the last blog you learned <a href=\"\/po...\"><\/a><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Building your first ARM Template",
			"postDate": "04-09-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In this blog post, we will use the knowledge learned in previous blogs and will build a basic ARM template.\nIf you haven't checked previous blog posts then have a quick read of your preferred topics here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>To follow this blog, you can use any text editor which can provide JSON syntax highlighting. We will be looking at using Visual Studio to author ARM templates in a future blog post. Visual Studio can provide JSON outlining and is a very powerful tool for authoring ARM templates.<\/p>\n<p>Let us assume that you want to deploy a storage account and build a virtual network in Azure. You want to automate the process and need to repeat the process in various environments. ARM templates fit the bill for the solution of this problem.<\/p>\n<p>In the next few sections, we will build each section of the template and then at the end will check the complete template.<\/p>\n<h3>1. Template Header<\/h3>\n<p>This section is very basic and contains just the schema and the content version. You can use the content version to manage the development versions of the template as you make changes to your templates in the future.<\/p>\n<pre><code>\"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentTemplate.json#\",\n\"contentVersion\": \"1.0.0.0\",<\/code><\/pre>\n<h3>2. Parameters<\/h3>\n<p>Here we define all the inputs we need from the end users. We provide default values for those parameters for which we know what the most common values will be based on our environment. For the current template we define two parameters:<\/p>\n<ul>\n<li><strong>vhdStorageName<\/strong> - This is the name of the storage account in Azure which will be created by the deployment of this template.<\/li>\n<li><strong>virtualNetworkName<\/strong> - This is the name of the Virtual Network which will be created by the deployment of this template.<\/li>\n<\/ul>\n<p>As a best practice, provide the metadata, describing what each parameter is for. Also, note that we have used pascal casing to name the parameters with very descriptive names.<\/p>\n<pre><code>\"parameters\": {\n    \"vhdStorageName\": {\n        \"type\": \"string\",\n        \"minLength\": 1,\n        \"defaultValue\": \"mystorage101\",\n        \"metadata\": {\n            \"description\": \"Name of the Storage Account.\"\n        }\n    },\n    \"virtualNetworkName\": {\n        \"type\": \"string\",\n        \"metadata\": {\n            \"description\": \"Name of the virtual network.\"\n        }\n    }\n},<\/code><\/pre>\n<h3>3. Variables<\/h3>\n<p>Next, we add some variables for the values which will be reused later in the template in the resources section. We create variables for all those reusable values for which we know what their value at deployment will be. We define 4 variables in this template:<\/p>\n<ul>\n<li><strong>addressPrefix<\/strong> - Address prefix for the Virtual Network <\/li>\n<li><strong>subnetName<\/strong> - Subnet name which will be created under the virtual network<\/li>\n<li><strong>subnetPrefix<\/strong> - Subnet prefix for the subnet, which will be created under the virtual network<\/li>\n<li><strong>vhdStorageType<\/strong> - Type of the storage account. Here we used Standard locally redundant storage (LRS)<\/li>\n<\/ul>\n<p>Variables section look as below:<\/p>\n<pre><code>\"variables\": {\n    \"addressPrefix\": \"10.0.0.0\/16\",\n    \"subnetName\": \"Subnet\",\n    \"subnetPrefix\": \"10.0.0.0\/24\",\n    \"vhdStorageType\": \"Standard_LRS\"\n},<\/code><\/pre>\n<h3>4. Resources<\/h3>\n<p>Now comes the last and main section i.e. Resources. Here we define both the resources for our template:<\/p>\n<ul>\n<li>Storage Account<\/li>\n<li>Virtual Network<\/li>\n<\/ul>\n<p>Let us look at each of these resources one by one.<\/p>\n<p><strong>A. Storage Account Resource<\/strong><\/p>\n<p>This resource has below properties (or key-value pairs):<\/p>\n<ol>\n<li><strong>Type<\/strong> - Type of the resource is set to Microsoft.Storage\/storageAccounts. This is what tells the Azure that the current resource is a Storage Account<\/li>\n<li><strong>Name<\/strong> - This defines the name of the storage account to be deployed based on the parameter to the template<\/li>\n<li><strong>API Version<\/strong> - this is the standard version for the REST API in Azure<\/li>\n<li><strong>Location<\/strong> - This is the Azure location. The location is found dynamically based on the location of the resource group to which this template will be deployed.<\/li>\n<li><strong>tags<\/strong> - only one tag is defined for the display name. You should have more tags in case of a production ready template<\/li>\n<li><strong>properties<\/strong> - This is where you tell Azure what kind of storage account you need. Here the account type is set using the value of the variable vhdStorageType.<\/li>\n<\/ol>\n<p><strong>B. Virtual Network Resource<\/strong><\/p>\n<p>This resource has below properties (or key-value pairs):<\/p>\n<ol>\n<li><strong>Type<\/strong> - Type of the resource is set to Microsoft.Network\/virtualNetworks. This is what tells the Azure that the current resource is a Virtual Network<\/li>\n<li><strong>Name<\/strong> - This defines the name of the virtual network to be deployed based on the parameter to the template<\/li>\n<li><strong>API Version<\/strong> - this is the standard version for the REST API in Azure<\/li>\n<li><strong>Location<\/strong> - This is the Azure location. The location is found dynamically based on the location of the resource group to which this template will be deployed.<\/li>\n<li><strong>tags<\/strong> - only one tag is defined for the display name. You should have more tags in case of a production ready template<\/li>\n<li><strong>properties<\/strong> - This is where you define the address space for the virtual network. You also define the subnet under the virtual network here.<\/li>\n<\/ol>\n<p>The resources section look like below:<\/p>\n<pre><code>\"resources\": [\n    {\n        \"type\": \"Microsoft.Storage\/storageAccounts\",\n        \"name\": \"[parameters('vhdStorageName')]\",\n        \"apiVersion\": \"2015-06-15\",\n        \"location\": \"[resourceGroup().location]\",\n        \"tags\": {\n            \"displayName\": \"StorageAccount\"\n        },\n        \"properties\": {\n            \"accountType\": \"[variables('vhdStorageType')]\"\n        }\n    },\n    {\n        \"apiVersion\": \"2015-06-15\",\n        \"type\": \"Microsoft.Network\/virtualNetworks\",\n        \"name\": \"[parameters('virtualNetworkName')]\",\n        \"location\": \"[resourceGroup().location]\",\n        \"tags\": {\n            \"displayName\": \"VirtualNetwork\"\n        },\n        \"properties\": {\n            \"addressSpace\": {\n                \"addressPrefixes\": [\n                    \"[variables('addressPrefix')]\"\n                ]\n            },\n            \"subnets\": [\n                {\n                    \"name\": \"[variables('subnetName')]\",\n                    \"properties\": {\n                        \"addressPrefix\": \"[variables('subnetPrefix')]\"\n                    }\n                }\n            ]\n        }\n    }\n]<\/code><\/pre>\n<h3>Complete Template<\/h3>\n<p>Here is the complete template build from all the sections discussed above. You can copy and use this template for testing and working along with next deployment posts.<\/p>\n<pre><code>{\n    \"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n        \"vhdStorageName\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"defaultValue\": \"mystorage101\",\n            \"metadata\": {\n                \"description\": \"Name of the Storage Account.\"\n            }\n        },\n        \"virtualNetworkName\": {\n            \"type\": \"string\",\n            \"metadata\": {\n                \"description\": \"Name of the virtual network.\"\n            }\n        }\n    },\n    \"variables\": {\n        \"addressPrefix\": \"10.0.0.0\/16\",\n        \"subnetName\": \"Subnet\",\n        \"subnetPrefix\": \"10.0.0.0\/24\",\n        \"vhdStorageType\": \"Standard_LRS\"\n    },\n    \"resources\": [\n        {\n            \"type\": \"Microsoft.Storage\/storageAccounts\",\n            \"name\": \"[parameters('vhdStorageName')]\",\n            \"apiVersion\": \"2015-06-15\",\n            \"location\": \"[resourceGroup().location]\",\n            \"tags\": {\n                \"displayName\": \"StorageAccount\"\n            },\n            \"properties\": {\n                \"accountType\": \"[variables('vhdStorageType')]\"\n            }\n        },\n        {\n            \"apiVersion\": \"2015-06-15\",\n            \"type\": \"Microsoft.Network\/virtualNetworks\",\n            \"name\": \"[parameters('virtualNetworkName')]\",\n            \"location\": \"[resourceGroup().location]\",\n            \"tags\": {\n                \"displayName\": \"VirtualNetwork\"\n            },\n            \"properties\": {\n                \"addressSpace\": {\n                    \"addressPrefixes\": [\n                        \"[variables('addressPrefix')]\"\n                    ]\n                },\n                \"subnets\": [\n                    {\n                        \"name\": \"[variables('subnetName')]\",\n                        \"properties\": {\n                            \"addressPrefix\": \"[variables('subnetPrefix')]\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}<\/code><\/pre>\n<p>In the next blog, we will learn how to deploy this template.<\/p>",
			"addpost": "addpost",
			"dated": "Sep 04, 2016",
			"slug": "step-by-step-arm-templates-building-your-first-arm-template",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>In this blog post, we will use the knowle...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - Helper Functions",
			"postDate": "31-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>ARM Templates has various dynamic constructs called <strong>Helper Functions<\/strong> which can make your template more generic. These constructs reduce the hard coded values in your templates. You can use the information from this blog to make your existing templates more dynamic and start writing new templates with a much generic approach.<\/p>\n<p>Let's look at the most important helper functions and their practical usage one by one. <\/p>\n<h3>1. Resource Id - Resource Function<\/h3>\n<p>You use this function to determine the ID of a resource. This is only used when the resource (whose ID is needed) is not being deployed in the current template and it already exists in Azure.<\/p>\n<p>The generic syntax to use this is:<\/p>\n<pre><code>resourceId ([subscriptionId], [resourceGroupName], resourceType, resourceName1, [resourceName2]...)<\/code><\/pre>\n<p>Only required parameters of this helper function are resourceType and resourceName1.<\/p>\n<p>These parameters are as follows:<\/p>\n<ul>\n<li>subscription ID - This is only needed if you want to refer a different subscription. Default value is the current subscription<\/li>\n<li>resource Group Name - Name of the resource group where the resource exists. Default is the current resource group, in which you are deploying the template<\/li>\n<li>resource Type - Type of resource including resource provider namespace<\/li>\n<li>resource Name 1  - Name of the resource<\/li>\n<li>resource Name 2  - Next resource name segment if resource is nested. E.g. a VM Extension<\/li>\n<\/ul>\n<p><strong>Example<\/strong><\/p>\n<pre><code>\"vnetId1\": \"[resourceId('AE06-Mgmt-RG','Microsoft.Network\/virtualNetworks', parameters('virtualNetworkName'))]\",\n\"vnetId2\": \"[resourceId('Microsoft.Network\/virtualNetworks', variables('virtualNetworkName'))]\"<\/code><\/pre>\n<p>The above example shows two ways of using the resource ID helper function to determine the Id of a virtual network. First one uses the resource group, resource type and resource name. Second example uses only the resource Type and resource name. Second example assumes the resource group to be same as the template being deployed to.<\/p>\n<h3>2. Resource Group - Resource Function<\/h3>\n<p>This helper function returns an object that represents the current resource group to which the template is being deployed.<\/p>\n<p>The generic syntax to use this is:<\/p>\n<pre><code>resourceGroup()<\/code><\/pre>\n<p>No parameters are needed in this helper function.<\/p>\n<p><strong>Example<\/strong><\/p>\n<pre><code>\"vhdStorageName\": \"[concat('vhdstorage', uniqueString(resourceGroup().id))]\",\n \"storageAccountResourceGroup\": \"[resourcegroup().name]\",\n \"location\": \"[resourceGroup().location]\"<\/code><\/pre>\n<p>The above example shows 3 uses of the resource group helper functions. First one uses the ID of the resource group, second uses the name property and third uses the location for the current resource group.<\/p>\n<h3>3. Subscription - Resource Function<\/h3>\n<p>The generic syntax to use this is:<\/p>\n<pre><code>subscription()<\/code><\/pre>\n<p>No parameters are needed in this helper function.<\/p>\n<p><strong>Example<\/strong><\/p>\n<pre><code>\"subscriptionId\": \"[subscription().subscriptionId]\"<\/code><\/pre>\n<p>The above example is straightforward. It fetches the subscription Id of the current subscription.<\/p>\n<h3>4. Concat - String Function<\/h3>\n<p>This function is used to concatinate (i.e. combine) two or more values.<\/p>\n<p>The generic syntax to use this is:<\/p>\n<pre><code>concat (array1, array2, array3, ...)<\/code><\/pre>\n<p>At least 1 array is needed for concat to work. <\/p>\n<p><strong>Example<\/strong><\/p>\n<pre><code>\"subnetRef\": \"[concat(variables('vNetId'), '\/subnets\/', variables('subnetName'))]\"<\/code><\/pre>\n<p>The above example combines (or concatinates) 3 text values. First value is the value of variable vNetId. Second value is a string &quot;\/subnets\/&quot;. Third value is the value of the variable subnet Name.<\/p>\n<p>These are the most common Helper functions that you will use in 80%-90% of the templates. <\/p>\n<p>To check the complete list of Helper Functions, check this official link: <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/resource-group-template-functions\/#resource-functions\">Azure Resource Manager template functions<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Aug 31, 2016",
			"slug": "step-by-step-arm-templates-helper-functions",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>ARM Templates has various dynamic constru...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 5 - Outputs",
			"postDate": "30-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">Understanding all components<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/\">Parameters<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/\">Variables<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/\">Resources<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/\">Outputs - This blog post<\/a><\/li>\n<\/ol>\n<h2>Outputs<\/h2>\n<p>This section is used to output any values after the deployment of the ARM Template. This can output any Ids or connection strings based on the deployed resources. <\/p>\n<p>This is a single JSON object with various output objects (just like Parameters. The overall JSON structure looks like below:<\/p>\n<pre><code>\"outputs\": { \n    \"output1\" : {\n                     \"type\":\"string\",\n                     \"value\": \"value1\"\n      },\n    \"output2\" : {\n                     \"type\":\"string\",\n                     \"value\": \"value2\"\n      },\n}<\/code><\/pre>\n<p>Each output object has 2 properties:<\/p>\n<ol>\n<li>Type - Data type of the output<\/li>\n<li>Value - value of the output<\/li>\n<\/ol>\n<p>A real life example with look like below:<\/p>\n<pre><code>\"outputs\": {\n    \"adminUsername\": {\n        \"type\": \"string\",\n        \"value\": \"[parameters('adminUsername')]\"\n    }\n}<\/code><\/pre>\n<p>The above example will output the administrator Username using the parameter from the template.<\/p>\n<p>That's all there is to Outputs in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.<\/p>",
			"addpost": "addpost",
			"dated": "Aug 30, 2016",
			"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 4 - Resources",
			"postDate": "29-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">Understanding all components<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/\">Parameters<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/\">Variables<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/\">Resources  - This blog post<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/\">Outputs<\/a><\/li>\n<\/ol>\n<h2>Resources<\/h2>\n<p>This is the major section of the whole ARM template. This is where you define what resources should be deployed in Azure. You also define dependencies between resources in this section. <\/p>\n<p>The resources section consist of an array of JSON Objects as shown below:<\/p>\n<pre><code>\"resources\": [\n        { },\n        { },\n]<\/code><\/pre>\n<p>Each object in the array (represented via curly braces) is an Azure resource. You can deploy multiple resources in a single ARM template. E.g. You can deploy a new Storage Account, new Virtual Network and three Virtual Machines in that virtual network within a single template.\nWithin the object, various properties (and nested properties) are used to provide the configurations of each resource. <\/p>\n<h3>Elements<\/h3>\n<p>Different elements in a single resource object can be one of the following:<\/p>\n<ol>\n<li><strong>apiVersion<\/strong> - <strong><em>Required<\/em><\/strong> - Version of the API. e.g. &quot;2015-06-15&quot;<\/li>\n<li><strong>type<\/strong> - <strong><em>Required<\/em><\/strong> - Type of the resource. This value is a combination of the namespace of the resource provider and the resource type that the resource provider supports. e.g. Azure Storage Account will have type as &quot;Microsoft.Storage\/storageAccounts&quot;.<\/li>\n<li><strong>name<\/strong> - <strong><em>Required<\/em><\/strong> - Name of the resource. The name must follow URI component restrictions and also the Azure naming restrictions if any. E.g. Storage account name can only be in small letters and has to be unique.<\/li>\n<li><strong>location<\/strong> - Optional - Use supported geo-locations of the provided resource without any spaces. Or use the resource group's location dynamically.<\/li>\n<li><strong>tags<\/strong> - Optional - Tags that are associated with the resource.<\/li>\n<li><strong>dependsOn<\/strong> - Optional - Other resources in the same template, that the current resource being defined depends on. The dependencies between resources are evaluated and resources are deployed in their dependent order. When resources are not dependent on each other, they are attempted to be deployed in parallel. The value can be a comma-separated list of resource names or resource unique identifiers.<\/li>\n<li><strong>properties<\/strong> - Optional - Resource specific configuration settings. E.g. Account type property for a storage account name.<\/li>\n<li><strong>resources<\/strong> - Optional - Child resources that depend on the resource being defined. E.g. Extension resources for a Virtual Machine resource.<\/li>\n<\/ol>\n<h3>Examples<\/h3>\n<p>Let's look at two examples. First, we will take a simple resource example to deploy a storage account in Azure:<\/p>\n<pre><code>{\n            \"type\": \"Microsoft.Storage\/storageAccounts\",\n            \"name\": \"[variables('vhdStorageName')]\",\n            \"apiVersion\": \"2015-06-15\",\n            \"location\": \"[resourceGroup().location]\",\n            \"tags\": {\n                \"displayName\": \"StorageAccount\",\n                \"department\" : \"Finance\",\n                \"application\" : \"database\"\n            },\n            \"properties\": {\n                \"accountType\": \"[variables('vhdStorageType')]\"\n            }\n        }<\/code><\/pre>\n<p>Above example will deploy a storage account with the name from &quot;vhdStorageName&quot; variable. It will apply 3 tags to the resource after deployment. It will use the account type (i.e. standard or premium) based on the value of the &quot;vhdStorageType&quot; variable. If you want to deploy 2 or more similar storage accounts, then just copy and paste the json for the resource, separated by comma. It will become another object in the Resources array.<\/p>\n<p>Now let's look at a complex and larger example of deploying a single virtual machine with one extension for Diagnostics.<\/p>\n<pre><code>    {\n        \"apiVersion\": \"2015-06-15\",\n        \"type\": \"Microsoft.Compute\/virtualMachines\",\n        \"name\": \"[variables('vmName')]\",\n        \"location\": \"[resourceGroup().location]\",\n        \"tags\": {\n            \"displayName\": \"VirtualMachine\"\n        },\n        \"dependsOn\": [\n            \"[concat('Microsoft.Storage\/storageAccounts\/', variables('vhdStorageName'))]\",\n            \"[concat('Microsoft.Network\/networkInterfaces\/', variables('nicName'))]\"\n        ],\n        \"properties\": {\n            \"hardwareProfile\": {\n                \"vmSize\": \"[variables('vmSize')]\"\n            },\n            \"osProfile\": {\n                \"computerName\": \"[variables('vmName')]\",\n                \"adminUsername\": \"[parameters('adminUsername')]\",\n                \"adminPassword\": \"[parameters('adminPassword')]\"\n            },\n            \"storageProfile\": {\n                \"imageReference\": {\n                    \"publisher\": \"[variables('imagePublisher')]\",\n                    \"offer\": \"[variables('imageOffer')]\",\n                    \"sku\": \"[parameters('windowsOSVersion')]\",\n                    \"version\": \"latest\"\n                },\n                \"osDisk\": {\n                    \"name\": \"osdisk\",\n                    \"vhd\": {\n                        \"uri\": \"[concat('http:\/\/', variables('vhdStorageName'), '.blob.core.windows.net\/', variables('vhdStorageContainerName'), '\/', variables('OSDiskName'), '.vhd')]\"\n                    },\n                    \"caching\": \"ReadWrite\",\n                    \"createOption\": \"FromImage\"\n                }\n            },\n            \"networkProfile\": {\n                \"networkInterfaces\": [\n                    {\n                        \"id\": \"[resourceId('Microsoft.Network\/networkInterfaces', variables('nicName'))]\"\n                    }\n                ]\n            },\n            \"diagnosticsProfile\": {\n                \"bootDiagnostics\": {\n                    \"enabled\": true,\n                    \"storageUri\": \"[concat('http:\/\/', variables('diagnosticsStorageAccountName'), '.blob.core.windows.net')]\"\n                }\n            }\n        },\n        \"resources\": [\n            {\n                \"type\": \"extensions\",\n                \"name\": \"Microsoft.Insights.VMDiagnosticsSettings\",\n                \"apiVersion\": \"2015-06-15\",\n                \"location\": \"[resourceGroup().location]\",\n                \"tags\": {\n                    \"displayName\": \"AzureDiagnostics\"\n                },\n                \"dependsOn\": [\n                    \"[concat('Microsoft.Compute\/virtualMachines\/', variables('vmName'))]\"\n                ],\n                \"properties\": {\n                    \"publisher\": \"Microsoft.Azure.Diagnostics\",\n                    \"type\": \"IaaSDiagnostics\",\n                    \"typeHandlerVersion\": \"1.5\",\n                    \"autoUpgradeMinorVersion\": true,\n                    \"settings\": {\n                        \"xmlCfg\": \"[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), variables('wadcfgxend')))]\",\n                        \"storageAccount\": \"[variables('diagnosticsStorageAccountName')]\"\n                    },\n                    \"protectedSettings\": {\n                        \"storageAccountName\": \"[variables('diagnosticsStorageAccountName')]\",\n                        \"storageAccountKey\": \"[listkeys(variables('accountid'), '2015-06-15').key1]\",\n                        \"storageAccountEndPoint\": \"https:\/\/core.windows.net\"\n                    }\n                }\n            }\n        ]\n    }<\/code><\/pre>\n<p>Note that the above code snippet defines a single virtual machine. Let us decode various sections of this complex resource:<\/p>\n<ul>\n<li>It begins with simple properties like apiVersion, type, name, location and tags as discussed in the previous example. These are straightforward and thus values are provided to these attributes.<\/li>\n<li>Next is the <strong>dependsOn<\/strong> section. This defines the dependency between resources. In the above example, the virtual machine resource is dependent on the storage account and a network interface, which are also defined in the template. These 2 resources will be created before the virtual machine creation\/deployment. If these resources are not created in the template then it will check for the presence of these resources in the current subscription. If they are not present the template will not get deployed and will error out.<\/li>\n<li>Next are various <strong>properties<\/strong> to configure the Virtual machine, like hardware profile, os profile, storage profile, os disk, network profile, diagnostics profile etc.<\/li>\n<li>Next, we have additional <strong>sub-resources<\/strong>. These are Azure resources which will be created and linked to the current resource. Only one sub-resource is created in the above example which is an extension for VM diagnostics settings.<\/li>\n<\/ul>\n<p>That's all there is to Resources in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.<\/p>",
			"addpost": "addpost",
			"dated": "Aug 29, 2016",
			"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 3 - Variables",
			"postDate": "28-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">Understanding all components<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/\">Parameters<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/\">Variables - This blog post<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/\">Resources<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/\">Outputs<\/a><\/li>\n<\/ol>\n<h2>Variables<\/h2>\n<p>Variables are values that you either know beforehand or you can construct from the input parameters. These variables can then be reused at multiple locations in the resources section. If you later want to change the value of a variable then it automatically gets updated at all other locations. They can be used to define a resource property.<\/p>\n<h3>Defining Variables<\/h3>\n<p>Variable is a one huge JSON object. Each property can be one of the simple data type (like integer, bool, string etc.) or can be another complex JSON object. The general structure is as shown below:<\/p>\n<pre><code>\"variables\": {\n      \"variable 1\" : \"value 1\",\n      \"variable 2\" : \"value 2\",\n      \"variable 3\" : 1024,\n      \"variable 4\" : {}\n}<\/code><\/pre>\n<p>Note that in the above example, the first 3 variables are of simple value type. The 4rth variable is however of a complex JSON object type.<\/p>\n<p>Let's now check a real variables section from an actual ARM template:<\/p>\n<pre><code>\"variables\": {\n        \"vmSize\": \"Standard_A2\",\n        \"virtualNetworkName\": \"MyVNETName\",\n        \"vnetId1\": \"[resourceId('Microsoft.Network\/virtualNetworks', variables('virtualNetworkName'))]\",\n        \"vnetId2\": \"[resourceId(parameters('vNetRG'),'Microsoft.Network\/virtualNetworks',parameters('virtualNetworkName'))]\",\n        \"subnetRef\": \"[concat(variables('vnetId'), '\/subnets\/', variables('subnetName'))]\",\n        \"vhdStorageName\": \"[concat('vhdstorage', uniqueString(resourceGroup().id))]\",\n        \"storageAccountResourceGroup\": \"[resourcegroup().name]\",\n        \"location\": \"[resourceGroup().location]\",\n        \"subscriptionId\": \"[subscription().subscriptionId]\"\n    }<\/code><\/pre>\n<p>There are lots of key constructs in the above code snippet. I have tried to capture as many different constructs in this snippets as I could. Let us decode each variable one by one.<\/p>\n<ol>\n<li>vmSize - Simple String<\/li>\n<li>virtualNetworkName - Simple string name<\/li>\n<li>vnetId1 - This uses a special function named &quot;<strong>resourceId<\/strong>&quot; to find out the resource ID of the virtual network. This function is invoked by using the syntax <code>\"[resourceId(Input)]\"<\/code> .  This gets the resource ID of a resource which is defined by the Input to this. Also, note the use of another variable as an input to this.<\/li>\n<li>vnetId2 - This also fetches the resource Id of a virtual network using &quot;resourceId&quot; method. Note the use of the value of a parameter in this to find out Resource Group of the existing Virtual network (parameter &quot;vNetRG&quot;).<\/li>\n<li>subnetRef - This variable uses another function &quot;<strong>concat<\/strong>&quot; in ARM template i.e. <code>\"[concat(input1,input2,...)]\"<\/code>. This function can take many inputs and will concatinate (i.e. club together) the value of all the inputs provided. You can use parameters or another variable.<\/li>\n<li>vhdStorageName - This also uses concat function to dynamically generate a storage name. However it uses &quot;<strong>resourcegroup<\/strong>&quot; function as <code>\"[resourcegroup()]\"<\/code>. This function always returns the resource group to which you are deploying the current ARM template. Then the variable uses the id property of the resource group returned.<\/li>\n<li>storageAccountResourceGroup - This uses the &quot;name&quot; property of the current resource group<\/li>\n<li>location - This uses the &quot;location&quot; property of the current resource group.<\/li>\n<li>subscriptionId - This uses the &quot;<strong>subscription<\/strong>&quot; function as <code>\"[subscription()]\"<\/code> to find out the current subscription to which the current ARM template is being deployed.  Then it uses the subscription Id property of the subscription to get the required Id.<\/li>\n<\/ol>\n<p>Note that these constructs are very powerfull and can be used to dynamically construct your ARM template. These constructs are also known as Helper Functions and are explained in detail here: <a href=\"..\/step-by-step-arm-templates-helper-functions\/\">Step by Step ARM Templates - Helper Functions<\/a><\/p>\n<h3>Using Variables<\/h3>\n<p>Using variables is very easy and is similar to using parameters. In fact, you already saw the usage of variables above, while defining other variables.<\/p>\n<p>You use the square parenthesis to indicate to the ARM engine to evaluate whatever is inside the parenthesis. You use the &quot;variable&quot; keyword and then you pass the name of the variable as input. Check the example below.<\/p>\n<pre><code>\"storageAccountName\": \"[variables('storageAccountName')]\"<\/code><\/pre>\n<h3>Best Practices<\/h3>\n<p>Best practices are similar to the Parameters.<\/p>\n<ul>\n<li>Provide complete descriptive names, no matter how long.<\/li>\n<li>Use <strong>Pascal Casing<\/strong> to name your parameters. i.e. First letter should be a small letter. Then every new word will have the first letter as a capital. No space between words. E.g. storageAccountName<\/li>\n<li>Use the constructs explained in the previous section to dynamically generate variables. This reduces any human errors.<\/li>\n<li>Anything that is used more than once and is not required to be entered by an end user, should be created as a variable. Later on, this helps by minimizing the number of places you need to change the value.<\/li>\n<\/ul>\n<p>That's all there is to Variables in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.<\/p>",
			"addpost": "addpost",
			"dated": "Aug 26, 2016",
			"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 2 - Parameters",
			"postDate": "22-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">Understanding all components<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/\">Parameters - This blog post<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/\">Variables<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/\">Resources<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/\">Outputs<\/a><\/li>\n<\/ol>\n<h2>Parameters<\/h2>\n<p>As mentioned earlier, parameters are the way to customize the templates, each time you deploy it to create resources in Azure. These parameters are the end-user inputs for various aspects of the template. E.g. If you are deploying an Azure Virtual Machine via an ARM Template then the name of the VM can be an input parameter. Operating System type can be another parameter.<\/p>\n<p>The parameters can be referred and used in other parts of the ARM Template.<\/p>\n<h3>1. Defining Parameters<\/h3>\n<p>Parameters is a one huge JSON object with multiple JSON properties. Each property is one parameter which is represented as another JSON object. Let us look at its structure at a high level.<\/p>\n<pre><code>\"parameters\": {\n               \"parameter 1\" : {},\n               \"parameter 2\" : {},\n               \"parameter 3\" : {}\n}<\/code><\/pre>\n<p>E.g. If you are creating a template to deploy a Windows Virtual Machine then the parameters will look something like below:<\/p>\n<pre><code>\"parameters\": {\n               \"VMName\" : {},\n               \"AdminUserName\" : {},\n               \"AdminPassword\" : {},\n               \"WindowsOSVersion\" : {}\n}<\/code><\/pre>\n<p>Now let us look at one of the parameters. E.g. The AdminUserName parameter will look like:<\/p>\n<pre><code>\"adminUsername\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"metadata\": {\n                \"description\": \"Username for the Virtual Machine.\"\n            }\n        }<\/code><\/pre>\n<p>The parameter object, as shown above, has following parts:<\/p>\n<ol>\n<li><strong>Type<\/strong> - This is the data Type of the parameter.<\/li>\n<li><strong>minLength<\/strong> - This is the minimum length the parameter must have<\/li>\n<li><strong>Metadata<\/strong> - This is just to provide a description as to what the parameter means.<\/li>\n<\/ol>\n<p>The <strong>Data Type<\/strong> allowed for the parameter are:<\/p>\n<ul>\n<li>string or secureString \u2013 any valid JSON string<\/li>\n<li>int \u2013 any valid JSON integer<\/li>\n<li>bool \u2013 any valid JSON boolean <\/li>\n<li>object \u2013 any valid JSON object <\/li>\n<li>array \u2013 any valid JSON array<\/li>\n<\/ul>\n<p>A more complex parameter e.g. Windows OS Version, with few more properties, is shown below:<\/p>\n<pre><code>\"windowsOSVersion\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"2012-R2-Datacenter\",\n            \"allowedValues\": [\n                \"2008-R2-SP1\",\n                \"2012-Datacenter\",\n                \"2012-R2-Datacenter\"\n            ],\n            \"metadata\": {\n                \"description\": \"The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter.\"\n            }\n        }<\/code><\/pre>\n<p>It has additional below properties:<\/p>\n<ol>\n<li><strong>Default Value<\/strong> - This is the default value. End User will be able to change this value when deploying the template. If no value is provided then this value is picked.<\/li>\n<li><strong>Allowed Values<\/strong> - This is an Array of values which are allowed for the parameter. Only value from this set is allowed as an input.<\/li>\n<\/ol>\n<h3>2. Using Parameters<\/h3>\n<p>Using parameters is easy. Wherever in your template (in variables or resources section) you want to use the value of a parameter, just use the parameter function as shown below with the name of the parameter as input, enclosed in square brackets. <\/p>\n<pre><code>[parameters('windowsOSVersion')]<\/code><\/pre>\n<p>If the parameter value is assigned to a property, enclosing it in double quotes, as shown below:<\/p>\n<pre><code>\"sku\": \"[parameters('windowsOSVersion')]\"<\/code><\/pre>\n<h3>3. Best Practices<\/h3>\n<ul>\n<li>Try to always provide Default Values<\/li>\n<li>Provide metadata so that you can provide insight as to what the parameter is meant for<\/li>\n<li>Provide complete descriptive names, no matter how long.<\/li>\n<li>Use <strong>Pascal Casing<\/strong> to name your parameters. i.e. First letter should be a small letter. Then every new word will have the first letter as a capital. No space between words. E.g. windowsOSVersion<\/li>\n<li>Use properties like minLength and Allowed values to impose restrictions. This reduces any human errors.<\/li>\n<\/ul>\n<p>That's all there is to Parameters in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.<\/p>",
			"addpost": "addpost",
			"dated": "Aug 24, 2016",
			"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>If you haven't checked the previous blog ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding All Components",
			"postDate": "23-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>As we discussed <a href=\"..\/step-by-step-azure-resource-manager-arm-templates-index\/\">earlier in the introduction<\/a> <strong>Azure Resource Manager (ARM) Template<\/strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources.<\/p>\n<p>In this post, we will deconstruct any basic ARM template and will understand it's various components.<\/p>\n<p>Any ARM Template will look like below:<\/p>\n<pre><code>{\n    \"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {},\n    \"variables\": {},\n    \"resources\": [ {}, {} ]\n}<\/code><\/pre>\n<p>Snapshot of the Template at root level, as generated via Visual Studio:<\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/147520488857edd71873f9b.png\" alt=\"ARM Template Components\" \/><\/p>\n<p>As you can see the components (or properties) of any ARM template includes:<\/p>\n<ol>\n<li>Schema<\/li>\n<li>Content Version<\/li>\n<li>Parameters<\/li>\n<li>Variables<\/li>\n<li>Resources<\/li>\n<\/ol>\n<p>Let's look at these in more detail.<\/p>\n<table border=\"1\" cellpadding=\"4\" cellspacing=\"4\">\n        <colgroup>\n            <col>\n            <col>\n            <col>\n            <col>\n        <\/colgroup>\n        <tbody valign=\"top\">\n            <tr>\n                <th>Element name<\/th>\n                <th>Required<\/th>\n                <th>JSON Type<\/th>\n                <th>Description<\/th>\n            <\/tr>\n            <tr>\n                <td>$schema<\/td>\n                <td>Yes<\/td>\n                <td>String Value<\/td>\n                <td>Location of the JSON schema file that describes the version of the template language.<\/td>\n            <\/tr>\n            <tr>\n                <td>contentVersion<\/td>\n                <td>Yes<\/td>\n                <td>String Value<\/td>\n                <td>Version of the template (such as 1.2.0.20). When deploying resources using the template, this value can be used to make sure that the right template is being used.<\/td>\n            <\/tr>\n            <tr>\n                <td>parameters<\/td>\n                <td>No<\/td>\n                <td>JSON Object<\/td>\n                <td>Values that are provided by the end user (manually or via a parameters file) when deployment is executed to customize resource deployment.<\/td>\n            <\/tr>\n            <tr>\n                <td>variables<\/td>\n                <td>No<\/td>\n                <td>JSON Object<\/td>\n                <td>Values that are reused multiple times in the template. You can update these values. They are different from Parameters as their value is known and they are not required as inputs from the end user.<\/td>\n            <\/tr>\n            <tr>\n                <td>resources<\/td>\n                <td>Yes<\/td>\n                <td>Array of Objects<\/td>\n                <td>Types of services that are deployed or updated in a resource group. Each JSON object in this Array denotes an Azure Resource.<\/td>\n            <\/tr>\n            <tr>\n                <td>outputs<\/td>\n                <td>No<\/td>\n                <td>JSON Object<\/td>\n                <td>Values that are returned after deployment.<\/td>\n            <\/tr>\n        <\/tbody>\n<\/table>\n<p>Now that you know what each part is at a high level, in the next posts, we will look at the key 4 components in detail.<\/p>\n<ol>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/\">Parameters<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/\">Variables<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/\">Resources<\/a><\/li>\n<li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/\">Outputs<\/a><\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "Aug 22, 2016",
			"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>As we discussed <a href=\"..\/step-by-step-...\"><\/a><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Step by Step ARM Templates - JSON 101 for IT Administrators",
			"postDate": "17-08-2016",
			"tags": [
				"ARM",
				"Azure",
				"AzureResourceManager",
				"JSON",
				"Templates"
			],
			"category": "Azure",
			"body": "<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>Azure Resource Manager (ARM) templates are written in JSON or <strong>JavaScript Object Notation<\/strong>. To understand ARM templates, you need to understand few quick basics about JSON. These will enable you to lay a great foundation which will enable you to understand ARM templates very easily.<\/p>\n<p>JSON or JavaScript Object Notation (pronounce like &quot;Jay-son&quot;) is a text-based data format that's designed to be human-readable, lightweight, and easy to transmit between a server and a web client. Its syntax is derived from JavaScript. Think of this as an even more compact version of XML files.<\/p>\n<p>JSON is a popular notation for transmitting data through RESTful web services. The official internet media type for JSON is <code>application\/json<\/code>, and JSON files typically have a <code>.json<\/code> extension.<\/p>\n<p>To understand JSON we need to understand <strong>3 main components<\/strong>. These components are like building blocks, using which you can build very complex JSON files.<\/p>\n<h2>1. Objects<\/h2>\n<p>Objects are the heart of JSON. Object denotes a real life object, e.g. an Employee. Just like a real life object, these have various properties and a value for each of these properties. E.g. An Employee will have Name property with value as John. Further, an employee object can have various another properties like Age, Salary, Department etc. So to denote an object in JSON you:<\/p>\n<ul>\n<li>One object will be represented by curly brackets. It will begin from opening curly bracket i.e. <code>{<\/code> and will end at closing curly bracket i.e. <code>}<\/code><\/li>\n<li>Denote the property and corresponding values as <code>\"key\" : \"value\"<\/code> or <code>\"property\" : \"value\"<\/code> pairs.<\/li>\n<li>You can only use double quotes for Properties as they will always be of type string<\/li>\n<li>You will have double quotes around Values if they are of string type. You will not have any quotes in case of a number or a boolean value.<\/li>\n<li>Each property will be separated from next property by a comma<\/li>\n<\/ul>\n<p><strong>Note:<\/strong> Each JSON file is also a single JSON object. At root level it starts with an opening curly bracket i.e. <code>{<\/code> and will end with closing curly bracket i.e. <code>}<\/code>. There can't be any other objects at the root level. Think of this similar to how in an XML file there can be only one element at the root level. <\/p>\n<p>Example Employee object is shown below:<\/p>\n<pre><code>{\n    \"Name\" : \"John\",\n    \"Age\" : 34,\n    \"Department\" : \"Finance\",\n    \"Salary\" : \"100000\",\n    \"IsAdmin\" : true\n}<\/code><\/pre>\n<h2>2. Arrays<\/h2>\n<p>Simply put, arrays are a collection of items. In JSON the <strong>square brackets<\/strong> represents an Array. E.g. An array of 3 employees will look like below:<\/p>\n<pre><code>[\n  {\n        \"Name\" : \"John\",\n        \"Age\" : 34\n    },\n   {\n        \"Name\" : \"Mary\",\n        \"Age\" : 32\n    },\n   {\n        \"Name\" : \"Matthew\",\n        \"Age\" : 29\n    }\n]<\/code><\/pre>\n<h2>3. Nesting of Objects<\/h2>\n<p>Now things get more interesting with nesting of Objects. What Nesting means is that one object can have it's property as another complex object. Don't worry if that sounds confusing. Let's understand that statement using an example. An Address where a person lives can be represented by an object. This object will look like below:<\/p>\n<pre><code>{\n  \"StreetNumber\" : \"50\",\n  \"StreetName\" : \"Brian Harrison Way\",\n  \"Unit Number\" : 22,\n  \"City\" : \"Toronto\",\n  \"Country\" : \"Canada\"\n}<\/code><\/pre>\n<p>Now an Employee Object will have an Address object as one of it's property (because employee need to live somewhere). This new complex Employee object will look like below, with nested Address object as one of it's property:<\/p>\n<pre><code> {\n        \"Name\" : \"John\",\n        \"Age\" : 34,\n        \"Department\" : \"Finance\",\n        \"Salary\" : \"100000\",\n        \"IsAdmin\" : true,\n        \"Address\" :   {\n                          \"StreetNumber\" : \"50\",\n                          \"StreetName\" : \"Brian Harrison Way\",\n                          \"Unit Number\" : 22,\n                          \"City\" : \"Toronto\",\n                          \"Country\" : \"Canada\"\n                       }\n    }<\/code><\/pre>\n<p>That's all there is to it. Now you can use these 3 components and build very complex json files\/templates. Even the most complex template can be broken into these 3 components. <\/p>\n<p>Below is a complex example with all 3 components. <\/p>\n<pre><code>{\n    \"Department\": \"Finance\",\n    \"TotalEmployees\": 2,\n    \"Employees\": [\n        {\n            \"Name\": \"John\",\n            \"Age\": 34,\n            \"Department\": \"Finance\",\n            \"Salary\": \"100000\",\n            \"IsAdmin\": true,\n            \"Address\": {\n                \"StreetNumber\": \"50\",\n                \"StreetName\": \"Brian Harrison Way\",\n                \"Unit Number\": 22,\n                \"City\": \"Toronto\",\n                \"Country\": \"Canada\"\n            }\n        },\n        {\n            \"Name\": \"John\",\n            \"Age\": 34,\n            \"Department\": \"Finance\",\n            \"Salary\": \"100000\",\n            \"IsAdmin\": true,\n            \"Address\": {\n                \"StreetNumber\": \"50\",\n                \"StreetName\": \"Brian Harrison Way\",\n                \"Unit Number\": 22,\n                \"City\": \"Toronto\",\n                \"Country\": \"Canada\"\n            }\n        }\n    ]\n}<\/code><\/pre>\n<p>The above JSON object denotes one department with name as Finance and total number of employees as 2. Then the &quot;Employees&quot; object is an array of 2 emplyees. Each emplyee object further have a complex property as Address, which is another object. <\/p>\n<p>If you understood each of the 3 components, you should be able to build\/understand most complex JSON files with ease.<\/p>",
			"savedraft": "savedraft",
			"dated": "Aug 17, 2016",
			"slug": "step-by-step-arm-templates-json-101-for-it-administrators",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Index<\/strong> of all blogs in this <strong>Step by Step ARM Templates series<\/strong> is located here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure Resource Manager (ARM) Templates - Index<\/a><\/p>\n<p>Azure Resource Manager (ARM) templates ar...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "ASR Setup for VMs running in VMWare without VMware level User Access",
			"postDate": "27-07-2016",
			"tags": [
				"ASR",
				"Azure",
				"AzureSiteRecovery",
				"VMWare"
			],
			"category": "Azure",
			"body": "<h3>Problem Statement<\/h3>\n<p>Recently I was setting up <strong>Azure Site Recovery<\/strong> (or ASR) in an environment. We had multiple VMs in VMWare environment. The environment was managed by Third Party who did not want to give any service account for VMWare as their environment was shared with different customers. So we had access only to the VMs. Without relevant access, ASR for VMWare was out of the question for us.<\/p>\n<h3>Solution<\/h3>\n<p>We treated the VMs, in such environment, as physical machines when setting up ASR to replicate these machines to Azure.\nWe used the option of &quot;<strong><em>Not virtualized\/other<\/em><\/strong>&quot; in the &quot;<strong><em>Prepare Infrastructure<\/em><\/strong>&quot; wizard of ASR. We <strong>treated the VMs as physical servers<\/strong> and did not face any issues during the migration. <\/p>\n<p>Refer below screenshot for the exact option discussed above.<\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/14696297155798c513ea908.png\" alt=\"Protection Goal\" \/><\/p>\n<p>Later when enabling the Replication for any Server, run the &quot;<strong><em>Enable Replication<\/em><\/strong>&quot; wizard by clicking on &quot;<strong>+Replicate<\/strong>&quot; on the ASR vault's blade. Then select &quot;<strong>Machine Type<\/strong>&quot; as &quot;<strong><em>Physical Machine<\/em><\/strong>&quot; and add the Physical Machines by mentioning their IP addresses. <\/p>\n<p><strong>Note:<\/strong> For this approach to work, the Configuration server should be on the same network as the VM being considered as Physical Machine.<\/p>\n<p>We were able to migrate many servers successfully and without any issues using this approach.<\/p>",
			"addpost": "addpost",
			"dated": "Jul 26, 2016",
			"slug": "asr-setup-for-vms-running-in-vmware-without-vmware-level-user-access",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<h3>Problem Statement<\/h3>\n<p>Recently I was setting up <strong>Azure Site Recovery<\/strong> (or ASR) in an environment. We had multiple VMs in VMWare environment. The environment was managed by Third Party who did not want to give any service account for VMWare as their environment was shared with ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Uploading and Downloading files securely from Azure Storage Blob via PowerShell",
			"postDate": "18-05-2016",
			"tags": [
				"azure",
				"blob",
				"powershell",
				"storage"
			],
			"category": "Azure",
			"body": "<p><strong>Azure blob storage<\/strong> can provide a very highly available way to store your files in the cloud. You can dynamically add or remove the files in an automated fashion. These files can then be used for any number of purposes. E.g. A parameter file for ARM template can be kept in Azure blob storage and then dynamically read while creating resources from an ARM template.<\/p>\n<p><strong>The whole process can be broken down into 3 parts<\/strong>:<\/p>\n<ol>\n<li>Generating the context to the storage container<\/li>\n<li>Uploading the files using the context<\/li>\n<li>Downloading the files using the context<\/li>\n<\/ol>\n<h3>1. Generating the context to the storage container<\/h3>\n<p>The context to the storage blob container can be created in one of the 3 ways, based on your security requirements. All methods use the <code>New-AzureStorageContext<\/code> cmdlet to generate the storage context. The methods differ on how you pass the parameters to this cmdlet.<\/p>\n<p><strong>A. Via fetching the Azure Storage Key<\/strong><\/p>\n<p>This first method uses the <code>Get-AzureStorageKey<\/code> to fetch the storage key. This key is then used to generate the context as shown below.<\/p>\n<pre><code>$StorageAccountName = \"yourstorageaccount\"\n$StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\n$Ctx = New-AzureStorageContext $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary<\/code><\/pre>\n<p><strong>B. Via fetching the Azure Storage Container SAS Token<\/strong><\/p>\n<p>This second method uses the <code>New-AzureStorageContainerSASToken<\/code> to create a new SAS token to securely access the storage container. This token is then used to generate the context as shown below.<\/p>\n<pre><code>$sasToken = New-AzureStorageContainerSASToken -Container abc -Permission rl\n$Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -SasToken $sasToken<\/code><\/pre>\n<p><strong>C. Via Connectin String<\/strong><\/p>\n<p>This third method uses a connection string, entered manually, which is then used to generate the context as shown below.<\/p>\n<pre><code>$ConnectionString = \"DefaultEndpointsProtocol=http;BlobEndpoint=&lt;blobEndpoint&gt;;QueueEndpoint=&lt;QueueEndpoint&gt;;TableEndpoint=&lt;TableEndpoint&gt;;AccountName=&lt;AccountName&gt;;AccountKey=&lt;AccountKey&gt;\"\n$Ctx = New-AzureStorageContext -ConnectionString $ConnectionString<\/code><\/pre>\n<h3>2. Uploading the files using the context<\/h3>\n<p>Now that you have the context to the storage account you can upload and download files from the storage blob container.\nUse the below code to upload a file named &quot;<em>Parameters.json<\/em>&quot;, located on the local machine at &quot;<em>C:\\Temp<\/em>&quot; directory.<\/p>\n<pre><code>#Uploading File\n$BlobName = \"Parameters.json\"\n$localFile = \"C:\\Temp\\\" + $BlobName\n$ContainerName  = \"vhds\"\n\n#Note the Force switch will overwrite if the file already exists in the Azure container\nSet-AzureStorageBlobContent -File $localFile -Container $ContainerName -Blob $BlobName -Context $Ctx -Force<\/code><\/pre>\n<h3>3. Downloading the files using the context<\/h3>\n<p>Download works in almost identical manner. You use the Get cmdlet instead of Set as shown below to download a file to a local folder, located at &quot;<em>C:\\Downloads<\/em>&quot;.<\/p>\n<pre><code>#Download File\n$BlobName = \"Parameters.json\"\n$localTargetDirectory = \"C:\\Downloads\"\n$ContainerName  = \"vhds\"\n\nGet-AzureStorageBlobContent -Blob $BlobName -Container $ContainerName -Destination $localTargetDirectory -Context $ctx<\/code><\/pre>\n<p>I hope this helps simplify the automated usage of Azure Storage container. Let us know your concerns or questions if any.<\/p>\n<p>You can find the <strong>complete sample<\/strong> at the below link on GitHub. Right-click and select Save As to save the file: <a href=\"https:\/\/raw.githubusercontent.com\/HarvestingClouds\/PowerShellSamples\/master\/Scripts\/StorageAccountBlobManagement.ps1\">StorageAccountBlobManagement.ps1<\/a><\/p>\n<p><strong>Reference:<\/strong> <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/storage-powershell-guide-full\/\" target=\"_blank\">Using Azure PowerShell with Azure Storage<\/a><\/p>",
			"addpost": "addpost",
			"dated": "May 18, 2016",
			"slug": "uploading-and-downloading-files-securely-from-azure-storage-blob-via-powershell",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Azure blob storage<\/strong> can provide a very highly available way to store your files in the cloud. You can dynamically add or remove the files in an automated fashion. These files can then be used for any number of purposes. E.g. A parameter file for ARM template can be kept in Azure b...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure comes to Canada (along with Office 365)",
			"postDate": "16-05-2016",
			"tags": [
				"azure",
				"datacenter"
			],
			"category": "Azure",
			"body": "<p>Last week marked the general availability of Azure datacenter for Canada locations. Also Office 365 has been released last week. Microsoft has set up 2 new datacenters in Canada. <\/p>\n<h3>Where Exactly are these datacenters located<\/h3>\n<ol>\n<li><strong>Canada Central<\/strong> - The first datacenter is located in Toronto.<\/li>\n<li><strong>Canada East<\/strong> - The second datacenter is located in Quebec City.<\/li>\n<\/ol>\n<p>Now when you are creating a new resource (like a Virtual Machine) you will see these two options.<\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/1463686879573e16df4f64c.png\" alt=\"New Locations\" \/><\/p>\n<p>Check out the brief announcement video by <strong>Janet Kennedy<\/strong>, President of Microsoft Canada:<\/p>\n<iframe src=\"https:\/\/channel9.msdn.com\/Blogs\/CANITPRO\/The-Microsoft-Canada-Cloud-is-Open-for-Business\/player\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"><\/iframe>\n<h3>Key Resources:<\/h3>\n<ul>\n<li>These locations are also listed in the official Microsoft Regions list here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/regions\/#services?WT.mc_id=azurebg_email_Trans_1106_Tier2_Release_MOSP\" target=\"_blank\">Azure Regions<\/a><\/li>\n<li>Various resources and information for cloud in Canada are available here at <a href=\"https:\/\/www.microsoft.com\/en-ca\/sites\/datacentre\/default.aspx\" target=\"_blank\">Cloud Accelerate site for Canada<\/a>.<\/li>\n<li>You can read about this announcement and upcoming features here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/blog\/microsoft-cloud-accelerates-in-canada-and-expands-to-south-korea\/?WT.mc_id=azurebg_email_Trans_1106_Tier2_Release_MOSP\" target=\"_blank\">Microsoft Cloud accelerates in Canada and expands to South Korea<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "May 16, 2016",
			"slug": "azure-comes-to-canada-along-with-office-365",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Last week marked the general availability of Azure datacenter for Canada locations. Also Office 365 has been released last week. Microsoft has set up 2 new datacenters in Canada. <\/p>\n<h3>Where Exactly are these datacenters located<\/h3>\n<ol><li><strong>Canada Central<\/strong> - The first datacen...<\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "NEW Feature - Azure Cool Blob Storage",
			"postDate": "02-05-2016",
			"tags": [
				"announcement",
				"azure",
				"storage"
			],
			"category": "Azure",
			"body": "<p>Have you heard about the new <strong>Azure Cool Blob Storage<\/strong>? <\/p>\n<p>If you haven\u2019t heard about it, this is Microsoft's low-cost storage for <strong>Cool<\/strong> object data. \u201cExample use cases for cool storage include backups, media content, scientific data, compliance and archival data. In general, any data which lives for a longer period of time and is accessed less than once a month is a perfect candidate for cool storage.\u201d It is similar to what <strong>Glacier storage tier<\/strong> provides in Amazon Web Services.<\/p>\n<ul>\n<li><strong>Pricing:<\/strong> Its cost is as low as $0.01\/GB.<\/li>\n<li><strong>Availability:<\/strong> 99% (as compared to 99.9% for Hot Storage). With Read-access geo-redundant storage (or RA-GRS) the SLA is 99.9% (as compared to 99.99% for Hot).<\/li>\n<li><strong>Deciding which AccessTier to use:<\/strong> If the objects in the storage account will be more frequently accessed, then go with <strong>Hot Tier<\/strong>. Select the <strong>Cold Tier<\/strong> for infrequently accessed data.<\/li>\n<\/ul>\n<p>Now when you go to New -&gt; &quot;Data + Storage&quot; -&gt; Storage Account, and try to create a Blob Storage account then you can select from one of the options for <strong>Access Tier<\/strong> from Cold or Hot tier. <\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/146232375357294a2980ece.png\" alt=\"Storage Tiers\" \/><\/p>\n<p>Also, note that at the time of this writing, Blob storage account is <strong>only available in these locations<\/strong>: Central US, East US 2, North Central US, North Europe, West Europe, Southeast Asia, Japan East, Japan West, Central India, South India, West India.<\/p>\n<p><strong>Resources to know more:<\/strong>  <\/p>\n<ul>\n<li><a href=\"https:\/\/azure.microsoft.com\/en-us\/blog\/introducing-azure-cool-storage\/\" target=\"_blank\">Official Announcement<\/a><\/li>\n<li><a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/storage-blob-storage-tiers\/\" target=\"_blank\">Getting started guide<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "May 02, 2016",
			"slug": "new-feature-azure-cool-blob-storage",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Have you heard about the new <strong>Azure Cool Blob Storage<\/strong>? <\/p>\n<p>If you haven&rsquo;t heard about it, this is Microsoft's low-cost storage for <strong>Cool<\/strong> object data. &ldquo;Example use cases for cool storage include backups, media content, scientific data, compliance and...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Taking Automatic Remediation Action on Azure VM Alert Generation",
			"postDate": "27-04-2016",
			"tags": [
				"automation",
				"azure",
				"azureautomation",
				"virtualmachine",
				"vm"
			],
			"category": "Azure",
			"body": "<p>Using a new feature in Azure, now you can easily configure to trigger an Azure Automation Runbook when an Alert is triggered on an Azure Virtual Machine to take a remediation action. To leverage this feature all you need to do is link the alert on Azure VM to an already existing Azure Automation Runbook.<\/p>\n<blockquote>\n<p>Note: This feature is supported only for the V2 Virtual Machines, i.e. the VMs created using ARM portal.<\/p>\n<\/blockquote>\n<p>To access this feature open your Virtual Machine. Then go to the Manage alerts section in the Settings:<\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/14618976705722c9c653752.png\" alt=\"Setting - Manage alerts\" \/><\/p>\n<p>Then open an existing alert or click on &quot;Add alert&quot; to create a new one. Specify the criteria for the alert. Scroll down to the bottom and you can view the new section to link the alert to an Automation Runbook.<\/p>\n<p><img src=\"http:\/\/HarvestingClouds.com\/images\/14618990795722cf4763dce.png\" alt=\"Automation Runbook for Alert\" \/><\/p>\n<h3>Under the hood<\/h3>\n<p>The alert will send data to your Runbook in a special format. Your Runbook should be expecting this. Under the hood this happens via WebHooks. The alert data is passed via a HTTP POST request. The Automation webhook service extracts the alert data from the POST request and passes it to the runbook in a parameter called <strong>&quot;WebhookData&quot;<\/strong>. The Runbook will look like below:<\/p>\n<pre><code>[OutputType(\"PSAzureOperationResponse\")]\n\nparam ( [object] $WebhookData )\n\nif ($WebhookData)\n{\n    # Get the data object from WebhookData\n    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)\n\n    #Rest of the script comes here\n}<\/code><\/pre>\n<p><strong>In Nutshell<\/strong>, now you can now trigger Azure Automation Runbooks to take remediation actions on Virtual Machines in case an alert is triggered. <\/p>\n<p><strong>Reference with complete Runbook sample:<\/strong> <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/automation-azure-vm-alert-integration\/\">Azure Automation solution - remediate Azure VM alerts<\/a><\/p>",
			"savedraft": "savedraft",
			"dated": "Apr 27, 2016",
			"slug": "taking-automatic-remediation-action-on-azure-vm-alert-generation",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Using a new feature in Azure, now you can easily configure to trigger an Azure Automation Runbook when an Alert is triggered on an Azure Virtual Machine to take a remediation action. To leverage this feature all you need to do is link the alert on Azure VM to an already existing Azure Automation ...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "ROADMAP - Solutions to help with Migration from Azure ASM to ARM portal",
			"postDate": "22-04-2016",
			"tags": [
				"announcement",
				"arm",
				"asm",
				"azure",
				"azureresourcemanager",
				"azureservicemanagement"
			],
			"category": "Azure",
			"body": "<p>In additional to the tool I mentioned yesterday regarding <a href=\"http:\/\/harvestingclouds.com\/Migrating-from-Azure-ASM-to-ARM-portal\">Migrating from Azure ASM to ARM portal<\/a> there are various solutions in the pipeline. This post looks at the high level Roadmap for the same from Microsoft.<\/p>\n<p>Microsoft has promised that they are committed to make the migration more easier from ASM (older) to ARM (newer) portal. Various solutions are already in the pipeline for this.\nBelow are the details and roadmap for the tentative timelines for these solutions.<\/p>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" width=\"29%\"> <p><b>Solution<\/b><\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p><b>Customer Experience<\/b><\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p><b>Expected availability in 2016<\/b><\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Script migration<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>VM is rebooted as it is recreated in the Resource Manager model. While the Virtual Machines for the environment are recreated, the network is disconnected.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q1<\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Virtual Machines, no VNET<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>As all Virtual Machines deployed in the Resource Manager model must be in a VNet, Virtual Machines will be migrated and placed in a new VNET. This will result in a change in network configuration, requiring a reboot to reconnect.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q2<\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Virtual Machines with VNET<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>Starting in Q2, the platform will offer Virtual Machine migration from ASM to Resource Manager model without disrupting the running Virtual Machine. This will require disconnecting any VNets connected on-premises, whether via ExpressRoute or VPN, before doing the migration.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q2<\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Virtual Machines with basic hybrid (one connection)<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>Starting in Q3, the platform will offer Virtual Machine migration from ASM to Resource Manager model without disrupting the running Virtual Machine and with minimal disruption to a basic hybrid connection, limited to just one connection back on-premises. More complex connections will require disconnecting before doing the migration.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q3<\/p> <\/td> <\/tr> <\/tbody> <\/table>\n<p>Reference: <a href=\"https:\/\/azure.microsoft.com\/en-us\/blog\/transitioning-to-the-resource-manager-model\/\">Transitioning to the Resource Manager model<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Apr 22, 2016",
			"slug": "roadmap-solutions-to-help-with-migration-from-azure-asm-to-arm-portal",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>In additional to the tool I mentioned yesterday regarding <a href=\"http:\/\/harvestingclouds.com\/Migrating-from-Azure-ASM-to-ARM-portal\">Migrating from Azure ASM to ARM portal<\/a> there are various solutions in the pipeline. This post looks at the high level Roadmap for the same from Microsoft.<\/p>...\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Migrating from Azure ASM to ARM portal",
			"postDate": "21-04-2016",
			"tags": [
				"arm",
				"asm",
				"azure",
				"azureresourcemanager",
				"azureservicemanagement"
			],
			"category": "Azure",
			"body": "<p>With co-existing Azure Service Management or ASM portal (older) and Azure Resource Manager or ARM portal (newer) there has been lots of confusions and problems for IT administrators.\nThe bottom line of all the discussion around the two portals is that <strong>ARM is the future and is here to stay<\/strong>. It means that you need to <strong>plan and migrate<\/strong> your resources from ASM portal to the ARM portal.<\/p>\n<p>The key resource is your infrastructure which primarily consists of virtual machines. To migrate a single Virtual Machine (VM) from ASM portal to ARM portal you can leverage a set of PowerShell scripts called ASM2ARM.\nYou can download these scripts and check their description on <a href=\"https:\/\/github.com\/fullscale180\/asm2arm\">GitHub here on the <strong>ASM2ARM<\/strong> page<\/a>. You can check the detailed instructions there too.<\/p>\n<p>To plan this right now is very important as the transitioning to Azure Resource Manager model is already underway. Any future development and investment seems to be happening only in the newer portal only.<\/p>\n<p><strong>Reference:<\/strong> <a href=\"https:\/\/github.com\/fullscale180\/asm2arm\">ASM2ARM scripts on GitHub<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Apr 21, 2016",
			"slug": "migrating-from-azure-asm-to-arm-portal",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>With co-existing Azure Service Management or ASM portal (older) and Azure Resource Manager or ARM portal (newer) there has been lots of confusions and problems for IT administrators.\nThe bottom line of all the discussion around the two portals is that <strong>ARM is the future and is here to stay...<\/strong><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "PowerShell DSC - Partial Configurations",
			"postDate": "20-04-2016",
			"tags": [
				"dsc",
				"powershell"
			],
			"category": "PowerShell",
			"body": "<p><strong>Partial Configurations<\/strong> is a new feature in PowerShell 5.0 Desired State Configuration or DSC. It allows the configurations to be delivered in parts or fragments. These configurations can come from various sources.\nThe Local Configuration Manager or LCM on the target node puts these partial configurations from different sources together and after that apply the same as a single configuration.<\/p>\n<p>This opens various possibilities for Enterprises to manage their infrastructure and designate the responsibility to various teams for a single node. The team expert in a particular field can focus on that feature without worrying about other features.<\/p>\n<p>You can have partial configurations in following modes:<\/p>\n<ol>\n<li>Push Mode<\/li>\n<li>Pull Mode<\/li>\n<li>Hybrid Mode (i.e. combination of Push and Pull)<\/li>\n<\/ol>\n<h3>Configuration for the PUSH Mode<\/h3>\n<p>You need to follow three steps to configure Partial configurations for the PUSH mode:<\/p>\n<ul>\n<li>Configure the LCM, on the target node, to expect partial configurations<\/li>\n<li>Push each partial configuration from different sources using <strong>Publish-DSCConfiguration<\/strong> cmdlet. Target node will automatically combine the partial configurations into single configuration.<\/li>\n<li>Apply the configuration by calling the <strong>Start-DSCConfiguration<\/strong>cmdlet<\/li>\n<\/ul>\n<h3>Configuration for the PULL Mode<\/h3>\n<p>This is bit complex than the Push mode. In nutshell you only need couple of steps:<\/p>\n<ul>\n<li>Configure the LCM, on the target node, to receive partial configurations but from PULL servers<\/li>\n<li>Name and locate the configuration documents properly on the pull servers<\/li>\n<\/ul>\n<p>To know more about DSC Partial configurations follow the below references:<\/p>\n<ul>\n<li><a href=\"https:\/\/automationnext.wordpress.com\/2016\/04\/19\/powershell-desired-state-configuration-partial-configurations-without-configurationid\/\">Detailed Blog by AutomationNext with very valuable insights<\/a><\/li>\n<li><a href=\"https:\/\/msdn.microsoft.com\/en-us\/powershell\/dsc\/partialconfigs\">Official MSDN Article<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Apr 20, 2016",
			"slug": "powershell-dsc-partial-configurations",
			"categoryslug": "powershell",
			"status": "publised",
			"summary": "\n<p><strong>Partial Configurations<\/strong> is a new feature in PowerShell 5.0 Desired State Configuration or DSC. It allows the configurations to be delivered in parts or fragments. These configurations can come from various sources.\nThe Local Configuration Manager or LCM on the target node puts the...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Container Service hits General Availability",
			"postDate": "19-04-2016",
			"tags": [
				"azure",
				"general"
			],
			"category": "Azure",
			"body": "<p>Azure Container Service has finally hit General Availability today. <\/p>\n<p>If you don't know already, it is the &quot;container hosting solution&quot; which is optimized for Microsoft's Azure cloud.\nAll the tools that you may be familiar with when working with a Container Service should work like Apache Mesos or Docker Swarm. It only uses open source components in the orchestration layers to give you portability of full applications.<\/p>\n<p>You can find the announcement here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/updates\/general-availability-azure-container-service\/\">GA for Azure Container Service<\/a><\/p>\n<p>You can learn more about the Container Service as offered by Azure on the product page here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/container-service\/\">Azure Container Service<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Apr 19, 2016",
			"slug": "azure-container-service-hits-general-availability",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Azure Container Service has finally hit General Availability today. <\/p>\n<p>If you don't know already, it is the \"container hosting solution\" which is optimized for Microsoft's Azure cloud.\nAll the tools that you may be familiar with when working with a Container Service should work lik...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Authentication - Authenticating any Azure API Request in your Application",
			"postDate": "15-04-2016",
			"tags": [
				".net",
				"azure",
				"csharp"
			],
			"category": "Azure",
			"body": "<p>I have created a code sample to showcase how you can authenticate any request programatically with Azure.\nThis also contains <strong>a Reusable Authentication Helper class<\/strong> which you can directly use in your code.<\/p>\n<h3>Where is the code<\/h3>\n<p>You can find the complete code sample along with the reusable Azure Authentication Helper class library from this GitHub repo:\n<a href=\"https:\/\/github.com\/HarvestingClouds\/AzureAuthentication\">Azure Authentication Sample<\/a><\/p>\n<h3>What are my authentication Options<\/h3>\n<p>You have the following options<\/p>\n<ul>\n<li>Authenticating by <strong>Prompting<\/strong> for Credentials from end user. (This needs end user interaction)<\/li>\n<li>Authenticating by <strong>Credentials<\/strong> i.e. using a password. (This does not need any end user interaction)<\/li>\n<li>Authenticating by using a <strong>Certificate<\/strong> ( This also does not need any end user interaction)<\/li>\n<\/ul>\n<p>I have provided this functionality in 3 separate methods, in a separate class file along with it's interface.\nYou can follow the instructions in the ReadMe file in the GitHub repo and start using any one of the method.<\/p>\n<p>I hope you find this usefull and this will avoid the trouble of figuring things out, which I have already undergone. <\/p>\n<p>Let me know in the comments below if you have any questions or anything to add to this.<\/p>",
			"addpost": "addpost",
			"dated": "Apr 15, 2016",
			"slug": "azure-authentication-authenticating-any-azure-api-request-in-your-application",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>I have created a code sample to showcase how you can authenticate any request programatically with Azure.\nThis also contains <strong>a Reusable Authentication Helper class<\/strong> which you can directly use in your code.<\/p>\n<h3>Where is the code<\/h3>\n<p>You can find the complete code sample alo...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Run Azure Automation Runbooks via PowerShell ISE",
			"postDate": "14-04-2016",
			"tags": [
				"automation",
				"azure",
				"powershell"
			],
			"category": "Azure",
			"body": "<p>Today I came across this blog post from my friend: <a href=\"https:\/\/scomanswers.wordpress.com\/2016\/04\/11\/azure-automation-powershell-ise-add-on\/\">Azure Automation PowerShell ISE add-on<\/a><\/p>\n<p>What I came to know is that now you can Run the Azure Automation Runbooks via PowerShell ISE. This solves a big pain point for all Azure developers.\nNow you will be able to develop and test your scripts right from the convenience of your laptop's local PowerShell ISE. <\/p>\n<h3>What you need to do<\/h3>\n<p>All you need to do is install the PowerShell Add-On using the below cmdlet:<\/p>\n<pre><code class=\"language-powershell\">Find-Module AzureAutomationAuthoringToolkit | Install-Module -Scope CurrentUser<\/code><\/pre>\n<p>Then import the module using below cmdlet:<\/p>\n<pre><code class=\"language-powershell\">Import-Module AzureAutomationAuthoringToolkit<\/code><\/pre>\n<p>You can configure the Add-On using a Configuration tab in the add-on and start getting your hands dirty. <\/p>\n<h3>Official Information from the Add-On Help<\/h3>\n<h4>Capabilities<\/h4>\n<ul>\n<li>Test runbooks on your local machine and in the Azure Automation service: <\/li>\n<li>Store and edit Automation Assets locally <\/li>\n<li>Use Automation Activities (Get-AutomationVariable, Get-AutomationPSCredential, etc) in local PowerShell scripts <\/li>\n<li>Sync changes back to your Automation Account <\/li>\n<li>Run test jobs in Automation and view results <\/li>\n<\/ul>\n<h4>Notes<\/h4>\n<p>Assets<\/p>\n<ul>\n<li>Secret values (passwords, encrypted variables) are not downloaded automatically; they need to be set manually the first time the account is synced <\/li>\n<li>Values that haven't been downloaded will be highlighted <\/li>\n<li>Asset values you enter locally will not get overwritten when you sync from the cloud <\/li>\n<\/ul>\n<p>Runbooks <\/p>\n<ul>\n<li>Native PowerShell and PowerShell Workflow runbooks are supported <\/li>\n<\/ul>\n<p>Check the screenshot regarding this information below:\n<img src=\"http:\/\/HarvestingClouds.com\/images\/1461735632572050d069253.png\" alt=\"Official Notes\" title=\"Official Notes\" \/><\/p>\n<h3>How much time it would take me<\/h3>\n<p>In all it would take you under 10 mins to get setup and rolling.<\/p>\n<h3>Where is more information on this and screenshots<\/h3>\n<p>Go to the official <a href=\"https:\/\/blogs.technet.microsoft.com\/msoms\/2016\/04\/08\/the-way-cool-azure-automation-powershell-ise-add-on\/\">Technet blog by clicking HERE.<\/a><\/p>\n<p>Start playing around and let us know your initial impression in the comments below. If you have any doubts and I will be happy to address them.<\/p>",
			"addpost": "addpost",
			"dated": "Apr 14, 2016",
			"slug": "run-azure-automation-runbooks-via-powershell-ise",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Today I came across this blog post from my friend: <a href=\"https:\/\/scomanswers.wordpress.com\/2016\/04\/11\/azure-automation-powershell-ise-add-on\/\">Azure Automation PowerShell ISE add-on<\/a><\/p>\n<p>What I came to know is that now you can Run the Azure Automation Runbooks via PowerShell ISE. This so...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Various Options Added to Buy Microsoft Azure Active Directory Basic",
			"postDate": "13-04-2016",
			"tags": [
				"azure",
				"general",
				"ad",
				"activedirectory"
			],
			"category": "Azure",
			"body": "<p>Today Microsoft announced that they have added various options to buy Microsoft Azure Active Directory (AAD) Basic.\nYou can now buy it through the Direct program as well as through following options:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.microsoft.com\/en-us\/licensing\/licensing-programs\/enterprise.aspx?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP\">Microsoft Enterprise Agreement<\/a><\/li>\n<li><a href=\"https:\/\/www.microsoft.com\/en-us\/licensing\/licensing-programs\/open-license.aspx?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP\">Open Volume License Program<\/a><\/li>\n<li><a href=\"https:\/\/partner.microsoft.com\/en-US\/Solutions\/cloud-reseller-overview?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP\">Microsoft Cloud Solution Provider<\/a><\/li>\n<\/ul>\n<p>To purchase, sign in to the <a href=\"https:\/\/portal.office.com\">Office 365 Administration Portal<\/a><\/p>\n<p>You can also watch the below video for details. Although the video is for AAD Premium, the steps are essentially similar for AAD Basic.<\/p>\n<iframe src=\"https:\/\/channel9.msdn.com\/Series\/Azure-Active-Directory-Videos-Demos\/How-to-Purchase-Azure-Active-Directory-Premium-Existing-Customer\/player\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"><\/iframe>\n<p>You can also engage a partner to assist you with the purchase and your Azure Active Directory related any requirements.\n<a href=\"http:\/\/www.infrontconsulting.com\/\">Infront Consulting Group<\/a> (where I currently work) is one such partner who are highly respected in market and are Microsoft Gold Certified Partner. <\/p>\n<p>Thanks for reading! If you have any questions please ask in the comments below.<\/p>",
			"addpost": "addpost",
			"dated": "Apr 13, 2016",
			"slug": "various-options-added-to-buy-microsoft-azure-active-directory-basic",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Today Microsoft announced that they have added various options to buy Microsoft Azure Active Directory (AAD) Basic.\nYou can now buy it through the Direct program as well as through following options:<\/p>\n<ul><li><a href=\"https:\/\/www.microsoft.com\/en-us\/licensing\/licensing-programs\/enterprise.asp...\"><\/a><\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Multiple Values In Grid.Mvc Single Column Filter via Checkboxes with Code Sample",
			"postDate": "12-04-2016",
			"tags": [
				"csharp",
				"gridmvc",
				"mvc",
				"webdevelopment"
			],
			"category": "Web Development",
			"body": "<p>I have been struggling to implement multiple filters in a single column in Grid.Mvc tool. I have solved this by altering the code and updating the custom widget.\n<strong>Note:<\/strong> The WithMultipleFilters() option will not help you in this. That option enables multiple filters on different columns. To have multiple filters in the same column you need to update the way filtering works in the tool itself.<\/p>\n<p>I have used a list of checkboxes and any or all of the elements selected in this checkbox list will be used for filtering the column values.<\/p>\n<p>You can find the code in my fork of the official Grid.Mvc repo at below link:\n<a href=\"https:\/\/github.com\/HarvestingClouds\/Grid.Mvc\" target=\"_blank\">Fork of Grid.Mvc repo with Advance Filters<\/a><\/p>\n<p>I have also created a pull request for the same so that more people get benefit from this if they refer the master branch of the main repo.<\/p>\n<h3>What are the changes I have done?<\/h3>\n<p>I have made changes to two files:<\/p>\n<ol>\n<li><strong>DefaultColumnFilter.cs<\/strong> file in &quot;<strong>GridMvc<\/strong>&quot; class library project under the Filters folder. I have updated the GetFilterExpression method to create multiple expressions based on the pipeline character in filter values.<\/li>\n<li><strong>gridmvc.customwidgets.js<\/strong> file in &quot;<strong>GridMvc.Site<\/strong>&quot; web application project<\/li>\n<\/ol>\n<p>Both of these paths are shown below:\nLocation of DefaultColumnFilter.cs:\n<img src=\"http:\/\/HarvestingClouds.com\/images\/146173541957204ffb99678.png\" alt=\"DefaultColumnFilter.cs\" title=\"DefaultColumnFilter.cs\" \/><\/p>\n<p>Location of gridmvc.customwidgets.js:\n<img src=\"http:\/\/HarvestingClouds.com\/images\/146173543057205006529e6.png\" alt=\"gridmvc.customwidgets.js\" title=\"gridmvc.customwidgets.js\" \/><\/p>\n<p>How the end result look like:\n<img src=\"http:\/\/HarvestingClouds.com\/images\/14617354255720500171fe7.png\" alt=\"Checkbox Filtering\" title=\"Checkbox Filtering\" \/><\/p>\n<p>You can directly use the code if you want. Just honor the license of the original author.<\/p>\n<p>Let me know in the comments below if you have any doubts and I will be happy to address them.<\/p>",
			"addpost": "addpost",
			"dated": "Apr 12, 2016",
			"slug": "multiple-values-in-gridmvc-single-column-filter-via-checkboxes-with-code-sample",
			"categoryslug": "web-development",
			"status": "publised",
			"summary": "\n<p>I have been struggling to implement multiple filters in a single column in Grid.Mvc tool. I have solved this by altering the code and updating the custom widget.\n<strong>Note:<\/strong> The WithMultipleFilters() option will not help you in this. That option enables multiple filters on different co...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Getting Started - Azure Site Recovery (ASR) In New Azure Portal",
			"postDate": "09-04-2016",
			"tags": [
				"arm",
				"azure"
			],
			"category": "Azure",
			"body": "<p>Azure Site Recovery or ASR is now available in the new Azure Resource Manager or ARM portal (codename Ibiza) with modern user interface. It is in preview at this stage. But it is production ready for all the Hyper-V related scenarios.\n<strong>Your older Vaults (created via Classic ASM Azure Portal) will not be available in ASR preview feature.<\/strong><\/p>\n<h3>What are the new features<\/h3>\n<p>The new features include:<\/p>\n<ul>\n<li>All the goodness of Azure Resource Manager in ASR<\/li>\n<li>Lean experience for various ASR scenarios<\/li>\n<li>Enhancements to the specific Site Recovery scenarios<\/li>\n<\/ul>\n<h3>Lets take a quick look at some of these.<\/h3>\n<p>If you Browse and search for &quot;Recovery&quot; you get Recovery Services Vaults as Preview feature.\n<img src=\"http:\/\/HarvestingClouds.com\/images\/14617358075720517f78904.png\" alt=\"Browse and Search\" title=\"Browse and Search\" \/><\/p>\n<p>Clicking on it will open up the blade for &quot;Recovery Services valuts&quot;. Notice that Microsoft has PREVIEW text in this.\n<img src=\"http:\/\/HarvestingClouds.com\/images\/1461735702572051161683f.png\" alt=\"alt text\" title=\"ASR Vault\" \/><\/p>\n<p>Clicking on the Add button brings up the ASR vault creation blade. Notice the locations available for vault creation here.\n<img src=\"http:\/\/HarvestingClouds.com\/images\/14617359385720520210878.png\" alt=\"Vault Creation\" title=\"Vault Creation\" \/><\/p>\n<p>After you hit create the Vault gets deployed really quickly. I tested for East US location and it was created in under 10 secs.\nRefresh to view your newly created vault. Click on it to open the NEW ASR Vault features. Notice that the Backup feature is also there in the ASR vault now.\n<img src=\"http:\/\/HarvestingClouds.com\/images\/1461735907572051e31549a.png\" alt=\"New Vault\" title=\"New Vault\" \/><\/p>\n<p>To find the options for replication go to Settings -&gt; Getting Started section -&gt; Site Recovery -&gt; Follow Wizard.\n<img src=\"http:\/\/HarvestingClouds.com\/images\/1461735869572051bd2d6fa.png\" alt=\"New Site Recovery Wizard\" title=\"New Site Recovery Wizard\" \/><\/p>\n<p>The Scenario Types available are only two. But all the scenarios are covered here:<\/p>\n<ul>\n<li>From my site to Azure<\/li>\n<li>From my site to another site<\/li>\n<\/ul>\n<p>Based on the scenario you select you are asked for different options. The options for Virtualization\/Management Server type for &quot;From my site to Azure&quot; are:<\/p>\n<ul>\n<li>VMM<\/li>\n<li>Stand alone Hyper-V hosts<\/li>\n<li>vCenter<\/li>\n<li>Physical machines (not virtualized)\n<img src=\"http:\/\/HarvestingClouds.com\/images\/14617358385720519e578ba.png\" alt=\"Creation Options\" title=\"Creation Options\" \/><\/li>\n<\/ul>\n<h3>Backup in ASR vault<\/h3>\n<p>Another feature is creation of Backups from the same vault. Click on the + icon for Backup in the Vault main blade and then follow the wizard for the preview feature.\n<img src=\"http:\/\/HarvestingClouds.com\/images\/14617357575720514d5d1d8.png\" alt=\"Backup In ASR\" title=\"Backup In ASR\" \/>\nNotice in the screenshot above that the backup types available are:<\/p>\n<ul>\n<li>Azure virtual machine backup<\/li>\n<li>File Folder backup<\/li>\n<li>System Center Data Protection Manager<\/li>\n<\/ul>\n<p>Selecting each option provides you with details for next steps. You can then create a backup policy and configure Items to backup.<\/p>\n<p>Give these features a try and let us know in comments below how you find the new features.\nHappy Exploring!<\/p>",
			"addpost": "addpost",
			"dated": "Apr 09, 2016",
			"slug": "getting-started-azure-site-recovery-asr-in-new-azure-portal",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Azure Site Recovery or ASR is now available in the new Azure Resource Manager or ARM portal (codename Ibiza) with modern user interface. It is in preview at this stage. But it is production ready for all the Hyper-V related scenarios.\n<strong>Your older Vaults (created via Classic ASM Azure Porta...<\/strong><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Coming Soon - Windows 10 Anniversary Update",
			"postDate": "08-04-2016",
			"tags": [
				"announcement",
				"windows10"
			],
			"category": "General",
			"body": "<p>Windows 10 Anniversary Update is coming this summary. It will be available for free download for the following devices (which is almost every device):<\/p>\n<ul>\n<li>PCs<\/li>\n<li>Tablets<\/li>\n<li>Phones<\/li>\n<li>Xbox One<\/li>\n<li>Microsoft HoloLens<\/li>\n<li>IoT<\/li>\n<\/ul>\n<h2>What this means to you:<\/h2>\n<ul>\n<li>Improved Biometric Security<\/li>\n<li>Microsoft Edge browser<\/li>\n<li>Windows Ink (where just one click of pen will bring up all the gamut available for use with your Pen device)<\/li>\n<li>Universal Windows Platform or UWP apps are coming to XBox through a Unified Windows Store. Also if you own a XBox you will be able to turn it into a dev box and do development with it<\/li>\n<li>Various improvements to Cortana<\/li>\n<\/ul>\n<p><a href=\"https:\/\/www.microsoft.com\/en-us\/windows\/upcoming-features\" target=\"_blank\">Check out more details here<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Apr 08, 2016",
			"slug": "coming-soon-windows-10-anniversary-update",
			"categoryslug": "general",
			"status": "publised",
			"summary": "\n<p>Windows 10 Anniversary Update is coming this summary. It will be available for free download for the following devices (which is almost every device):<\/p>\n<ul><li>PCs<\/li>\n<li>Tablets<\/li>\n<li>Phones<\/li>\n<li>Xbox One<\/li>\n<li>Microsoft HoloLens<\/li>\n<li>IoT<\/li>\n<\/ul><h2>What this means to you...<\/h2>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Introducing Harvesting Clouds",
			"postDate": "04-01-2016",
			"tags": [
				"general"
			],
			"category": "General",
			"body": "<p>Harvesting Clouds is a blog about all things Cloud. Be it Private Cloud or Public Cloud, I will try to cover various aspects of both.<\/p>\n<h3>Private Cloud<\/h3>\n<p>My key areas of interest in Private Cloud include the following:<\/p>\n<ul>\n<li>PowerShell Scripting<\/li>\n<li>Windows Azure Pack or WAP<\/li>\n<li>Service Management Automation or SMA<\/li>\n<li>Azure Stack<\/li>\n<li>System Center Orchestrator<\/li>\n<li>System Center VMM and other products like Service Manager, Ops Mgr, etc.<\/li>\n<\/ul>\n<h3>Public Cloud<\/h3>\n<p>In addition to the Private Cloud the areas of interest in Public Cloud are:<\/p>\n<ul>\n<li>Microsoft Azure and Amazon Web Services - both IaaS and PaaS<\/li>\n<li>Azure Automation<\/li>\n<li>Desired State Configurations<\/li>\n<li>Application Insights<\/li>\n<li>Azure Web Apps<\/li>\n<li>Web APIs<\/li>\n<li>Azure Site Recovery and Backup<\/li>\n<li>Migrations from Private to Public Clouds<\/li>\n<\/ul>\n<h3>Common Areas &amp; Best of both worlds<\/h3>\n<p>I have also been involved in creating Hybrid clouds leveraging the best of both worlds. I will try to share my knowledge on this with you. The key aspects in this area are:<\/p>\n<ul>\n<li>Building Hybrid Solutions<\/li>\n<li>Developing Web or Desktop Applications targetting either or both the clouds (using MVC, Dot Net)<\/li>\n<li>Using TFS Online, Visual Studio, GitHub to better collaborate and work in an automated fashion<\/li>\n<li>Release Manager to automate your release workflows<\/li>\n<\/ul>\n<h3>Primary Focus<\/h3>\n<p>As you must have guessed by now, the primary focus for this blog will be Microsoft Technologies. We will also explore beyond this and will be talking about various emerging open source technologies and the new Better Together world with the amalgamation of various technologies in one solution.<\/p>\n<p>I invite to take this journey with me!\nKeep learning!<\/p>",
			"addpost": "addpost",
			"dated": "Apr 01, 2016",
			"slug": "introducing-harvesting-clouds",
			"categoryslug": "general",
			"status": "publised",
			"summary": "\n<p>Harvesting Clouds is a blog about all things Cloud. Be it Private Cloud or Public Cloud, I will try to cover various aspects of both.<\/p>\n<h3>Private Cloud<\/h3>\n<p>My key areas of interest in Private Cloud include the following:<\/p>\n<ul><li>PowerShell Scripting<\/li>\n<li>Windows Azure Pack or WAP...<\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		}
	],
	"latestPosts": [
		{
			"author": "@20aman",
			"title": "Book published on Amazon - Quick and Practical Guide to ARM Templates",
			"postDate": "23-03-2018",
			"tags": [
				"arm",
				"azure",
				"microsoft",
				"microsoftazure",
				"ebook",
				"book",
				"templates",
				"armtemplates"
			],
			"category": "Azure",
			"body": "<p><strong>Quick and Practical Guide to ARM Templates<\/strong> is a very non-conventional book. The objective of the book is to help you &quot;Become Experts in Developing ARM Templates for Microsoft Azure without any prior knowledge&quot;. This book is for both a beginner and intermediate users. <\/p>\n<p>This is a quick and practical approach to learning ARM Templates for Azure. It covers only the most essential topics that you will need 95% of the time while working with ARM Templates. The goal is to have you working faster and quicker on ARM Templates without compromising any of the best practices. <\/p>\n<p>The book assumes that you do not have prior knowledge of ARM Templates. If you have no development background then this book is for you. It starts by building the fundamentals on which ARM Templates are built.  The more practical approach means less theory and more focus on the practical aspects that can help you start working and delivering on ARM Templates.<\/p>\n<p>You can view the book on Amazon.com at this link: <a href=\"https:\/\/www.amazon.com\/dp\/B07C8LSBSN\" target=\"_blank\"><a href=\"https:\/\/www.amazon.com\/dp\/B07C8LSBSN\">https:\/\/www.amazon.com\/dp\/B07C8LSBSN<\/a><\/a><\/p>\n<p>You can also search for the book in your local Amazon marketplace.<\/p>\n<img src=\"\/images\/15217860175ab49ca149064.png\" alt=\"Quick and Practical Guide to ARM Templates\">",
			"addpost": "addpost",
			"dated": "Mar 23, 2018",
			"slug": "book-published-on-amazon-quick-and-practical-guide-to-arm-templates",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Quick and Practical Guide to ARM Templates<\/strong> is a very non-conventional book. The objective of the book is to help you \"Become Experts in Developing ARM Templates for Microsoft Azure without any prior knowledge\". This book is for both a beginner and intermediate users. <\/p>\n",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Azure Site Recovery (ASR) - Series Index",
			"postDate": "19-02-2018",
			"tags": [
				"asr",
				"azure",
				"azuresiterecovery",
				"microsoft",
				"microsoftazure"
			],
			"category": "Azure",
			"body": "<p>Outages can happen anytime. There can be different reasons that you may encounter disruptions in the service. It is always good to be prepared. Azure Site Recovery (ASR) ensure business continuity by providing you with a backup plan in case of an outage or a disaster level event. <\/p>\n<p>This series talks about various aspects of working with <strong>Azure Site Recovery<\/strong> or <strong>ASR<\/strong>. <\/p>\n<p>This blog is an <strong>Index<\/strong> of various blogs in the series:<\/p>\n<ul>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/troubleshooting-azure-site-recovery-asr-data-replication-not-working\/\" target=\"_blank\">Troubleshooting Azure Site Recovery (ASR) - Data Replication Not Working<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/troubleshooting-azure-site-recovery-asr-data-replication-initiation-issues-part-2\/\" target=\"_blank\">Troubleshooting Azure Site Recovery (ASR) - Data Replication Initiation Issues<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/azure-site-recovery-asr-new-feature-added-to-target-resource-groups\/\" target=\"_blank\">Azure Site Recovery (ASR) - New feature added to target Resource Groups<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/suspending-and-resuming-azure-site-recovery-asr-replication-on-a-single-or-multiple-servers\/\" target=\"_blank\">Suspending and Resuming Azure Site Recovery (ASR) Replication on a single or multiple servers<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/asr-setup-for-vms-running-in-vmware-without-vmware-level-user-access\/\" target=\"_blank\">ASR Setup for VMs running in VMWare without VMware level User Access<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/getting-started-azure-site-recovery-asr-in-new-azure-portal\/\" target=\"_blank\">Getting Started - Azure Site Recovery (ASR) In New Azure Portal<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Mar 19, 2018",
			"slug": "azure-site-recovery-asr-series-index",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Outages can happen anytime. There can be different reasons that you may encounter disruptions in the service. It is always good to be prepared. Azure Site Recovery (ASR) ensure business continuity by providing you with a backup plan in case of an outage or a disaster level event. <\/p>\n<p>This ser...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Series Index",
			"postDate": "11-03-2018",
			"tags": [
				"azure",
				"azuresecurity",
				"microsoft",
				"microsoftazure",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>Understanding the security is of utmost importance in designing any application architecture. When bringing your applications or infrastructure to Azure or even designing new applications in Azure, you need to be aware of all the ways you can make your application\/design more secure by leveraging various features Azure has to offer.<\/p>\n<p>This series talks about various aspects of <strong>security<\/strong> as related to different aspects of Azure.<\/p>\n<p>This blog is an <strong>Index<\/strong> of various blogs in the series &quot;Demystifying Azure Security&quot;:<\/p>\n<ul>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-rbac-roles\/\" target=\"_blank\">Understanding RBAC Roles<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-custom-rbac-roles\/\" target=\"_blank\">Custom RBAC Roles<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-just-in-time-vm-access\/\" target=\"_blank\">Just In Time VM access<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-azure-policies-1-basics\/\" target=\"_blank\">Azure Policies - 1 - Basics<\/a><\/li>\n<li><a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-azure-policies-2-assigning-a-policy\/\" target=\"_blank\">Azure Policies - 2 - Assigning a Policy<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "Mar 11, 2018",
			"slug": "demystifying-azure-security-series-index",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>Understanding the security is of utmost importance in designing any application architecture. When bringing your applications or infrastructure to Azure or even designing new applications in Azure, you need to be aware of all the ways you can make your application\/design more secure by leveraging...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Resources - New Azure Log Analytics Language Cheat Sheets",
			"postDate": "19-02-2018",
			"tags": [
				"analytics",
				"azue",
				"language",
				"log",
				"loganalytics",
				"microsoft",
				"microsoftazure",
				"oms",
				"query",
				"querylanguage"
			],
			"category": "Azure",
			"body": "<p>Azure Log Analytics (part of the OMS suite) has a very versatile query language. To investigate and report on the data you need to know the query language at least at the basic level. Recently the language had a complete overhaul with new syntax coming in and various new features being incorporated into the new language. This blog post talks about the resources to quickly learn the new syntax. Specifically, if you know the older syntax or you know T-SQL syntax then how to translate that knowledge.<\/p>\n<h3>Older to new Query Language syntax<\/h3>\n<p>If you have been working with the older Log Analytics query syntax, then you have two options to convert that knowledge to newer query language syntax:<\/p>\n<ol>\n<li>Use the in portal legacy syntax converter and learn as you convert<\/li>\n<li>Use the Microsoft provided Cheat Sheet<\/li>\n<\/ol>\n<p>When you navigate to OMS log analytics portal and go to the Log search section, there you will see a link above the query text window for &quot;<strong>Show legacy language converter<\/strong>&quot;. When you click on this link a new text box will appear above the query text box. Type your legacy query and then click on &quot;<strong>Convert<\/strong>&quot; button. The query will be converted into the new language syntax. Click Run to execute the query. If there will be any errors in the query you will be notified of the same. <\/p>\n<img src=\"\/images\/15212342425aac314289ed9.png\" alt=\"OMS Language Converter\">\n<p>In the above example, &quot;Event&quot; type is being fetched and then only Source, EventLog, EventID properties are selected. In the older format the query syntax used to be:<\/p>\n<pre><code>Type=Event | select Source, EventLog, EventID<\/code><\/pre>\n<p>In the newer format the same query looks as below:<\/p>\n<pre><code>Event | project Source, EventLog, EventID<\/code><\/pre>\n<p>Pointers for key query syntax can be found in the complete cheat sheet which can be found here: <a href=\"https:\/\/docs.loganalytics.io\/docs\/Learn\/References\/Legacy-to-new-to-Azure-Log-Analytics-Language\" target=\"_blank\">Legacy to new Azure Log Analytics Query Language cheat sheet<\/a><\/p>\n<h3>T-SQL to new Query Language syntax<\/h3>\n<p>If you are well versed in the T-SQL query syntax and are new to OMS Azure Log Analytics, then you can easily translate that to the Log Analytics query language with the help of the cheat sheet provided by Microsoft for the key syntax.<\/p>\n<p>E.g. if we want to select records for only columns name and resultCode from a table named dependencies then the query syntax in T-SQL will look like:<\/p>\n<pre><code>SELECT name, resultCode FROM dependencies<\/code><\/pre>\n<p>Syntax for the same query in newer Log Analytics language will look like:<\/p>\n<pre><code>dependencies \n| project name, resultCode<\/code><\/pre>\n<p>As you might have guessed already, &quot;project&quot; is a key word in newer language to select specific columns. Selecting a table is as simple as typing the name of the table.<\/p>\n<p>The complete cheat sheet can be found here: <a href=\"https:\/\/docs.loganalytics.io\/docs\/Learn\/References\/SQL-to-Azure-Log-Analytics\" target=\"_blank\">SQL to Azure Log Analytics query language cheat sheet<\/a><\/p>",
			"addpost": "addpost",
			"dated": "Feb 19, 2018",
			"slug": "resources-new-azure-log-analytics-language-cheat-sheets",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p>Azure Log Analytics (part of the OMS suite) has a very versatile query language. To investigate and report on the data you need to know the query language at least at the basic level. Recently the language had a complete overhaul with new syntax coming in and various new features being incorporat...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "@20aman",
			"title": "Demystifying Azure Security - Custom RBAC Roles",
			"postDate": "04-02-2018",
			"tags": [
				"azure",
				"azureresourcemanager",
				"azuresecurity",
				"custom",
				"customroles",
				"microsoft",
				"microsoftazure",
				"roles",
				"security"
			],
			"category": "Azure Security",
			"body": "<p>Before going through this blog, please ensure that you have visited the basics of RBAC Roles in general, explained in a primer here: <a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-rbac-roles\/\" target=\"_blank\">Demystifying Azure Security - RBAC Roles<\/a>.<\/p>\n<p>This blog explains an easy approach to understand and create your own Custom RBAC Roles in Azure (ARM model). We will inspect an existing simple role and will reverse engineer the way to create Custom RBAC Roles. <\/p>\n<h3>Inspecting Existing Role's Definition<\/h3>\n<p>Start by inspecting any existing Role's Definition. To do this run the cmdlet <strong>Get-AzureRMRoleDefinition<\/strong> and provide the name of any built-in RBAC Role. For this blog, run the below script to inspect the &quot;Reader&quot; and &quot;Virtual Machine Contributor&quot; roles.<\/p>\n<pre><code>Login-AzureRMAccount\n\nGet-AzureRMRoleDefinition -Name \"Reader\" | ConvertTo-Json | Out-File C:\\rbacrole-reader.json\n\nGet-AzureRMRoleDefinition -Name \"Virtual Machine Contributor\" | ConvertTo-Json | Out-File C:\\rbacrole-VMContributor.json<\/code><\/pre>\n<p>If you open and inspect the &quot;rbacrole-reader.json&quot; file you will see the JSON similar to below:<\/p>\n<pre><code>{\n    \"Name\":  \"Reader\",\n    \"Id\":  \"aaaa11a1-3333-48ef-bd42-f606fba81ae7\",\n    \"IsCustom\":  false,\n    \"Description\":  \"Lets you view everything, but not make any changes.\",\n    \"Actions\":  [\n                    \"*\/read\"\n                ],\n    \"NotActions\":  [\n\n                   ],\n    \"AssignableScopes\":  [\n                             \"\/\"\n                         ]\n}<\/code><\/pre>\n<p>Notice above that there are below sections in the definition:<\/p>\n<ol>\n<li><strong>Name<\/strong> - Name of the role<\/li>\n<li><strong>Id<\/strong> - unique guid for the role<\/li>\n<li><strong>IsCustom<\/strong> - boolean value. &quot;true&quot; for the Custom Roles and &quot;false&quot; for the built-in roles<\/li>\n<li><strong>Description<\/strong> - description of the role<\/li>\n<li><strong>Actions<\/strong> - Allowed list of actions for the Role<\/li>\n<li><strong>NotActions<\/strong> - Not Allowed list of actions for the Role<\/li>\n<li><strong>AssignableScopes<\/strong> - Scope at which this role can be assigned. E.g. all the subscription Ids. It's mandatory that the RBAC role contains the explicit subscription IDs where it is used otherwise you will not be able to use the role.<\/li>\n<\/ol>\n<h3>Understanding Actions and NotActions<\/h3>\n<p>As mentioned before, Actions describe the allowed list of action for the Role whereas the NotActions describe the not allowed actions for the Role. You can use wildcard * and special syntax to define the Actions and NotActions, as per the Microsoft documentation here: <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/role-based-access-control-custom-roles\" target=\"_blank\">Create custom roles for Azure Role-Based Access Control<\/a>:<\/p>\n<p>Operation strings that contain wildcards (*) grant access to all operations that match the operation string. For instance:<\/p>\n<ul>\n<li><code>*\/read<\/code> grants access to read operations for all resource types of all Azure resource providers.<\/li>\n<li><code>Microsoft.Compute\/*<\/code> grants access to all operations for all resource types in the Microsoft.Compute resource provider.<\/li>\n<li><code>Microsoft.Network\/*\/read<\/code> grants access to read operations for all resource types in the Microsoft.Network resource provider of Azure.<\/li>\n<li><code>Microsoft.Compute\/virtualMachines\/*<\/code> grants access to all operations of virtual machines and its child resource types.<\/li>\n<li><code>Microsoft.Web\/sites\/restart\/Action<\/code> grants access to restart websites.<\/li>\n<\/ul>\n<p>Use <code>Get-AzureRmProviderOperation<\/code> (in PowerShell) or <code>azure provider operations show<\/code> (in Azure CLI) to list operations of Azure resource providers. You may also use these commands to verify that an operation string is valid and to expand wildcard operation strings.<\/p>\n<pre><code>Get-AzureRMProviderOperation Microsoft.Compute\/virtualMachines\/*\/action | FT Operation, OperationName\n\nGet-AzureRMProviderOperation Microsoft.Network\/*<\/code><\/pre>\n<h3>Defining a Custom role<\/h3>\n<p>Let's define a custom role, who can start or restart a VM in Azure but can't open a support ticket.<\/p>\n<p>Save the following code as &quot;yourCustomRole01.json&quot; file on your C drive (or any other location).<\/p>\n<pre><code>{\n  \"Name\": \"Virtual Machine Start and Restart\",\n  \"Id\": \"7ed03a9f-b372-4341-ba8d-38ef8e614038\",\n  \"IsCustom\": true,\n  \"Description\": \"Can restart virtual machines but can't open support tickets.\",\n  \"Actions\": [\n    \"Microsoft.Compute\/virtualMachines\/start\/action\",\n    \"Microsoft.Compute\/virtualMachines\/restart\/action\"\n  ],\n  \"NotActions\": [\n    \"Microsoft.Support\/*\"\n  ],\n  \"AssignableScopes\": [\n    \"\/subscriptions\/aaaaaaaa-1111-1111-1111-111111111111\",\n    \"\/subscriptions\/aaaaaaaa-2222-2222-2222-222222222222\",\n    \"\/subscriptions\/aaaaaaaa-3333-3333-3333-333333333333\/resourceGroups\/RG-Prod-USE2\"\n  ]\n}<\/code><\/pre>\n<p>Notice the Action and NotAction area are set as per the requirements.<\/p>\n<p>Also, note that under Assignable Scope the role is available for assignment to all Resources and Resource Groups in the first two subscriptions but only in Resource Group named &quot;RG-Prod-USE2&quot; for the third subscription in the list.<\/p>\n<h3>Creating New Custom role<\/h3>\n<p>Once you have the definition ready in a JSON file, you can use the &quot;<strong>New-AzureRMRoleDefinition<\/strong>&quot; cmdlet to create the Custom Role Definition, as shown below. Make sure to alter the path to the json file as per your environment.<\/p>\n<pre><code>New-AzureRMRoleDefinition -InputFile \"C:\\yourCustomRole01.json\"<\/code><\/pre>\n<p>Now you will be able to use this new Custom Role while assigning access to someone. You will be able to tweak the access and provide only the access that you need to your internal and external resources.<\/p>",
			"addpost": "addpost",
			"dated": "Feb 04, 2018",
			"slug": "demystifying-azure-security-custom-rbac-roles",
			"categoryslug": "azure-security",
			"status": "publised",
			"summary": "\n<p>Before going through this blog, please ensure that you have visited the basics of RBAC Roles in general, explained in a primer here: <a href=\"http:\/\/harvestingclouds.com\/post\/demystifying-azure-security-rbac-roles\/\" target=\"_blank\">Demystifying Azure Security - RBAC Roles<\/a>.<\/p>\n<p>This blog ex...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		}
	],
	"homePosts": [
		{
			"author": "@20aman",
			"title": "Book published on Amazon - Quick and Practical Guide to ARM Templates",
			"postDate": "23-03-2018",
			"tags": [
				"arm",
				"azure",
				"microsoft",
				"microsoftazure",
				"ebook",
				"book",
				"templates",
				"armtemplates"
			],
			"category": "Azure",
			"body": "<p><strong>Quick and Practical Guide to ARM Templates<\/strong> is a very non-conventional book. The objective of the book is to help you &quot;Become Experts in Developing ARM Templates for Microsoft Azure without any prior knowledge&quot;. This book is for both a beginner and intermediate users. <\/p>\n<p>This is a quick and practical approach to learning ARM Templates for Azure. It covers only the most essential topics that you will need 95% of the time while working with ARM Templates. The goal is to have you working faster and quicker on ARM Templates without compromising any of the best practices. <\/p>\n<p>The book assumes that you do not have prior knowledge of ARM Templates. If you have no development background then this book is for you. It starts by building the fundamentals on which ARM Templates are built.  The more practical approach means less theory and more focus on the practical aspects that can help you start working and delivering on ARM Templates.<\/p>\n<p>You can view the book on Amazon.com at this link: <a href=\"https:\/\/www.amazon.com\/dp\/B07C8LSBSN\" target=\"_blank\"><a href=\"https:\/\/www.amazon.com\/dp\/B07C8LSBSN\">https:\/\/www.amazon.com\/dp\/B07C8LSBSN<\/a><\/a><\/p>\n<p>You can also search for the book in your local Amazon marketplace.<\/p>\n<img src=\"\/images\/15217860175ab49ca149064.png\" alt=\"Quick and Practical Guide to ARM Templates\">",
			"addpost": "addpost",
			"dated": "Mar 23, 2018",
			"slug": "book-published-on-amazon-quick-and-practical-guide-to-arm-templates",
			"categoryslug": "azure",
			"status": "publised",
			"summary": "\n<p><strong>Quick and Practical Guide to ARM Templates<\/strong> is a very non-conventional book. The objective of the book is to help you \"Become Experts in Developing ARM Templates for Microsoft Azure without any prior knowledge\". This book is for both a beginner and intermediate users. <\/p>\n",
			"showbody": "1"
		}
	],
	"categories": [
		{
			"category": "Azure",
			"categoryslug": "azure"
		},
		{
			"category": "Azure Security",
			"categoryslug": "azure-security"
		},
		{
			"category": "General",
			"categoryslug": "general"
		},
		{
			"category": "PowerShell",
			"categoryslug": "powershell"
		},
		{
			"category": "Web Development",
			"categoryslug": "web-development"
		}
	],
	"tagsCloud": "<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/net\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">net<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/activedirectory\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">activedirectory<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/activedirectory\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ActiveDirectory<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/ad\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">AD<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/ad\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ad<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/analytics\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">analytics<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/announcement\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">announcement<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/applicationinsights\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ApplicationInsights<\/a>\n<a style=\"font-size: 25px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/arm\" title=\"22 total posts\" data-original-title=\"23 total posts\" data-toggle=\"tooltip\">ARM<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/arm\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">arm<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/armtemplates\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">armtemplates<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/asm\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">asm<\/a>\n<a style=\"font-size: 14px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/asr\" title=\"5 total posts\" data-original-title=\"6 total posts\" data-toggle=\"tooltip\">ASR<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/asr\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">asr<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/automation\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">automation<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/automation\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">Automation<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azue\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">azue<\/a>\n<a style=\"font-size: 30px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azure\" title=\"29 total posts\" data-original-title=\"30 total posts\" data-toggle=\"tooltip\">azure<\/a>\n<a style=\"font-size: 30px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azure\" title=\"29 total posts\" data-original-title=\"30 total posts\" data-toggle=\"tooltip\">Azure<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azureautomation\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">azureautomation<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azurepolicies\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">azurepolicies<\/a>\n<a style=\"font-size: 26px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azureresourcemanager\" title=\"24 total posts\" data-original-title=\"25 total posts\" data-toggle=\"tooltip\">AzureResourceManager<\/a>\n<a style=\"font-size: 16px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azureresourcemanager\" title=\"8 total posts\" data-original-title=\"9 total posts\" data-toggle=\"tooltip\">azureresourcemanager<\/a>\n<a style=\"font-size: 17px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azuresecurity\" title=\"9 total posts\" data-original-title=\"10 total posts\" data-toggle=\"tooltip\">azuresecurity<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azureservicemanagement\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">azureservicemanagement<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azuresiterecovery\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">AzureSiteRecovery<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/azuresiterecovery\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">azuresiterecovery<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/bash\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">bash<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/blob\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">blob<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/book\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">book<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/certifications\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">certifications<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/cloud\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">cloud<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/csharp\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">csharp<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/custom\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">custom<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/custompolicy\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">custompolicy<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/customroles\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">customroles<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/datacenter\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">datacenter<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/dsc\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">dsc<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/ebook\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ebook<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/general\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">general<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/gridmvc\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">gridmvc<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/json\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">JSON<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/keyvault\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">KeyVault<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/language\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">language<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/log\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">log<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/loganalytics\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">loganalytics<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/manageddisks\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">manageddisks<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/mcsa\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">mcsa<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/mcsd\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">mcsd<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/mcse\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">mcse<\/a>\n<a style=\"font-size: 22px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/microsoft\" title=\"18 total posts\" data-original-title=\"19 total posts\" data-toggle=\"tooltip\">microsoft<\/a>\n<a style=\"font-size: 22px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/microsoftazure\" title=\"17 total posts\" data-original-title=\"18 total posts\" data-toggle=\"tooltip\">microsoftazure<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/mvc\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">mvc<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/oms\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">oms<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/policies\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">policies<\/a>\n<a style=\"font-size: 14px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/policy\" title=\"5 total posts\" data-original-title=\"6 total posts\" data-toggle=\"tooltip\">policy<\/a>\n<a style=\"font-size: 15px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/powershell\" title=\"6 total posts\" data-original-title=\"7 total posts\" data-toggle=\"tooltip\">powershell<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/powershell\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">PowerShell<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/query\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">query<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/querylanguage\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">querylanguage<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/remoteapp\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">RemoteApp<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/reservedinstances\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">reservedinstances<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/resourcegroups\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ResourceGroups<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/roles\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">roles<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/runbooks\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">Runbooks<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/sample\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">Sample<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/script\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">Script<\/a>\n<a style=\"font-size: 17px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/security\" title=\"9 total posts\" data-original-title=\"10 total posts\" data-toggle=\"tooltip\">security<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/shell\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">shell<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/storage\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">storage<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/tags\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">Tags<\/a>\n<a style=\"font-size: 24px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/templates\" title=\"20 total posts\" data-original-title=\"21 total posts\" data-toggle=\"tooltip\">Templates<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/templates\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">templates<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/troubleshooting\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">troubleshooting<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/virtualmachine\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">virtualmachine<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/visualstudio\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">VisualStudio<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/vm\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">vm<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/vmware\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">VMWare<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/webdevelopment\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">webdevelopment<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"http:\/\/HarvestingClouds.com\/tag\/windows\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">windows<\/a>\n",
	"archives": "<ul class=\"archives list-group\"><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/march-2018\">March 2018<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/february-2018\">February 2018<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/january-2018\">January 2018<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/december-2017\">December 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/november-2017\">November 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/october-2017\">October 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/january-2017\">January 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/november-2016\">November 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/october-2016\">October 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/september-2016\">September 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/august-2016\">August 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/july-2016\">July 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/may-2016\">May 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"http:\/\/HarvestingClouds.com\/archive\/april-2016\">April 2016<\/a><\/li><\/ul>"
}